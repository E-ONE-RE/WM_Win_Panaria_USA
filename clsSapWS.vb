' *****************************************************************************************
' AUTORE            : MARCO PALTRINIERI
' DITTA             : eOneGroup
' DATA CREAZIONE    : 12/05/2011
' DATA MODIFICA     : 12/05/2011
' VERSIONE          : 1.0
' DESCRIZIONE       : la classe implementa tutte le chiamate ai WEB SERVICES di SAP
' *****************************************************************************************

Imports System.Data
Imports System.Web.Services
Imports System.Xml.Schema.XmlSchemaForm
Imports System.Net
Imports WS_MB_CHECK_CONNECTION
Imports WS_MB_CHECK_DOCMAT
Imports WS_MB_EXEC_WM_TO
Imports WS_MB_EXEC_WM_BEM_TO
Imports clsBusinessLogic
Imports clsDataType
Imports clsSapUtility
Imports clsWmsJob
Imports clsAppTranslation
Imports clsUserGrants
Imports clsUds
Imports clsTrasfUbi


#If APPLICAZIONE_WIN32 = "SI" Then
Imports SAP.Middleware.Connector
Imports clsSAPNetConn
#End If


Public Structure StructGenericTableMSEG
    Dim Info As String
    Public Shared MSEG_Rec As New WS_MB_CHECK_DOCMAT.Mseg
End Structure

Public Structure StructGenericTableVBAP
    Dim Info As String
    Public Shared VBAP_Rec As New WS_MB_CHECK_ORDINE_VENDITA.Vbap
End Structure


Public Structure StructGenericSapTableSyst
    Dim Info As String
    Public Shared SystInfo_Rec As New WS_MB_GET_SYSTEM_INFO.Syst
End Structure


Public Structure StructGenericTableLQUA
    Dim Info As String
    Public Shared LQUA_Rec As New WS_MB_GET_LQUA_GIACENZE.ZlquaMobile
    Public Shared LQUA_CHECK_Rec As New WS_MB_CHECK_STOCK_GIACENZA.ZlquaMobile
    Public Shared LQUA_DEST_Rec As New WS_CHECK_STOCK_AND_GET_DEST.Lqua
End Structure

Public Structure rfcStructGenericTableLQUA
    Dim Info As String
    'Public Shared LQUA_Rec As New WS_MB_GET_LQUA_GIACENZE.ZlquaMobile
    Public Shared LQUA_CHECK_Rec As rfcZlquaMobile
    'Public Shared LQUA_DEST_Rec As New WS_CHECK_STOCK_AND_GET_DEST.Lqua
End Structure

Public Structure rfcZwmsStepsExecutedMatInfo
    Public Shared matnrOri As String
    Public Shared werksOri As String
    Public Shared lgortOri As String
    Public Shared chargOri As String
    Public Shared qtaExecuted As Decimal
    Public Shared udmQtaExecuted As String
    Public Shared qtaExecutedSfusi As Decimal
    Public Shared bestq As String
    Public Shared sobkz As String
    Public Shared sonum As String
    Public Shared lqnumOri As String
    Public Shared lgnumOri As String
    Public Shared lgtypOri As String
    Public Shared lgplaOri As String
    Public Shared lenumOri As String
    Public Shared letyp As String
    Public Shared lqnumDest As String
    Public Shared lgnumDest As String
    Public Shared lgtypDest As String
    Public Shared lgplaDest As String
    Public Shared lenumDest As String
    Public Shared matnrDest As String
    Public Shared werksDest As String
    Public Shared lgortDest As String
    Public Shared chargDest As String
End Structure

Public Structure rfcZlquaMobile
    Public Shared mandtField As String
    Public Shared lgnumField As String
    Public Shared lqnumField As String
    Public Shared matnrField As String
    Public Shared werksField As String
    Public Shared chargField As String
    Public Shared bestqField As String
    Public Shared sobkzField As String
    Public Shared sonumField As String
    Public Shared lgtypField As String
    Public Shared lgplaField As String
    Public Shared plposField As String
    Public Shared skzueField As String
    Public Shared skzuaField As String
    Public Shared skzseField As String
    Public Shared skzsaField As String
    Public Shared skzsiField As String
    Public Shared spgruField As String
    Public Shared zeugnField As String
    Public Shared bdatuField As String
    Public Shared bzeitField As String
    Public Shared letypField As String
    Public Shared meinsField As String
    Public Shared gesmeField As Decimal
    Public Shared vermeField As Decimal
    Public Shared einmeField As Decimal
    Public Shared ausmeField As Decimal
    Public Shared mgewiField As Decimal
    Public Shared geweiField As String
    Public Shared tbnumField As String
    Public Shared lenumField As String
    Public Shared qplosField As String
    Public Shared vfdatField As String
    Public Shared koberField As String
    Public Shared lgortField As String
    Public Shared gesmeConsField As Decimal
    Public Shared vermeConsField As Decimal
    Public Shared einmeConsField As Decimal
    Public Shared ausmeConsField As Decimal
    Public Shared vrkmeField As String
    Public Shared maktgField As String
    Public Shared gestioneUmAttivaField As String
    Public Shared varianteImballoField As rfcZe1Mt00015
    Public Shared lagpLkapvField As Decimal
    Public Shared numPalletField As Integer
End Structure

Public Structure rfcZe1Mt00015
    Public Shared mandtField As String
    Public Shared matnrField As String
    Public Shared imballoField As String
    Public Shared pzXScField As String
    Public Shared scXPalField As String
    Public Shared m2XPalField As Decimal
    Public Shared ean11ScField As String
    Public Shared ean11PalField As String
    Public Shared codImbField As String
    Public Shared pallLargField As String
    Public Shared pallProfField As String
    Public Shared pallAltField As String
    Public Shared pallAltPField As String
    Public Shared pallPianField As String
    Public Shared pallColPiaField As String
    Public Shared testoField As String
    Public Shared imballoAlternaField As String
End Structure


Public Structure rfcZwmMbGoodsmvtCreateMb11
    Dim eBapiretTabField As rfcBapiret2
    Dim iBillOfLadingField As String
    Dim iDocDateField As String
    Dim iElaborationTypeField As String
    Dim iEnableDebugField As String
    Dim iGoodsmvtCodeField As String
    Dim iGoodsmvtItemTabField As rfcBapi2017GmItemCreate
    Dim iGrGiSlipNoField As String
    Dim iHeaderTextField As String
    Dim iLanguageField As String
    Dim iLenumField As String
    Dim iLgnumField As String
    Dim iLgplaField As String
    Dim iLgtypField As String
    Dim iLqnumField As String
    Dim iPstngDateField As String
    Dim iRefDocNoField As String
    Dim iSobkzField As String
    Dim iSonumField As String
    Dim iUserIdField As String
End Structure

Public Structure rfcBapiret2
    Dim typeField As String
    Dim idField As String
    Dim numberField As String
    Dim messageField As String
    Dim logNoField As String
    Dim logMsgNoField As String
    Dim messageV1Field As String
    Dim messageV2Field As String
    Dim messageV3Field As String
    Dim messageV4Field As String
    Dim parameterField As String
    Dim rowField As Integer
    Dim fieldField As String
    Dim systemField As String
End Structure

Public Structure rfcBapi2017GmItemCreate
    Dim materialField As String
    Dim plantField As String
    Dim stgeLocField As String
    Dim batchField As String
    Dim moveTypeField As String
    Dim stckTypeField As String
    Dim specStockField As String
    Dim vendorField As String
    Dim customerField As String
    Dim salesOrdField As String
    Dim sOrdItemField As String
    Dim schedLineField As String
    Dim valTypeField As String
    Dim entryQntField As Decimal
    Dim entryUomField As String
    Dim entryUomIsoField As String
    Dim poPrQntField As Decimal
    Dim orderprUnField As String
    Dim orderprUnIsoField As String
    Dim poNumberField As String
    Dim poItemField As String
    Dim shippingField As String
    Dim compShipField As String
    Dim noMoreGrField As String
    Dim itemTextField As String
    Dim grRcptField As String
    Dim unloadPtField As String
    Dim costcenterField As String
    Dim orderidField As String
    Dim orderItnoField As String
    Dim calcMotiveField As String
    Dim assetNoField As String
    Dim subNumberField As String
    Dim reservNoField As String
    Dim resItemField As String
    Dim resTypeField As String
    Dim withdrawnField As String
    Dim moveMatField As String
    Dim movePlantField As String
    Dim moveStlocField As String
    Dim moveBatchField As String
    Dim moveValTypeField As String
    Dim mvtIndField As String
    Dim moveReasField As String
    Dim rlEstKeyField As String
    Dim refDateField As String
    Dim costObjField As String
    Dim profitSegmNoField As String
    Dim profitCtrField As String
    Dim wbsElemField As String
    Dim networkField As String
    Dim activityField As String
    Dim partAcctField As String
    Dim amountLcField As Decimal
    Dim amountSvField As Decimal
    Dim refDocYrField As String
    Dim refDocField As String
    Dim refDocItField As String
    Dim expirydateField As String
    Dim prodDateField As String
    Dim fundField As String
    Dim fundsCtrField As String
    Dim cmmtItemField As String
    Dim valSalesOrdField As String
    Dim valSOrdItemField As String
    Dim valWbsElemField As String
    Dim glAccountField As String
    Dim indProposeQuanxField As String
    Dim xstobField As String
    Dim eanUpcField As String
    Dim delivNumbToSearchField As String
    Dim delivItemToSearchField As String
    Dim serialnoAutoNumberassignmentField As String
    Dim vendrbatchField As String
    Dim stgeTypeField As String
    Dim stgeBinField As String
    Dim suPlStck1Field As Decimal
    Dim stUnQtyy1Field As Decimal
    Dim stUnQtyy1IsoField As String
    Dim unittype1Field As String
    Dim suPlStck2Field As Decimal
    Dim stUnQtyy2Field As Decimal
    Dim stUnQtyy2IsoField As String
    Dim unittype2Field As String
    Dim stgeTypePcField As String
    Dim stgeBinPcField As String
    Dim noPstChgntField As String
    Dim grNumberField As String
    Dim stgeTypeStField As String
    Dim stgeBinStField As String
    Dim matdocTrCancelField As String
    Dim matitemTrCancelField As String
    Dim matyearTrCancelField As String
    Dim noTransferReqField As String
    Dim coBusprocField As String
    Dim acttypeField As String
    Dim supplVendField As String
    Dim materialExternalField As String
    Dim materialGuidField As String
    Dim materialVersionField As String
    Dim moveMatExternalField As String
    Dim moveMatGuidField As String
    Dim moveMatVersionField As String
    Dim funcAreaField As String
    Dim trPartBaField As String
    Dim parCompcoField As String
    Dim delivNumbField As String
    Dim delivItemField As String
    Dim nbSlipsField As String
    Dim nbSlipsxField As String
    Dim grRcptxField As String
    Dim unloadPtxField As String
    Dim specMvmtField As String
    Dim grantNbrField As String
    Dim cmmtItemLongField As String
    Dim funcAreaLongField As String
    Dim lineIdField As String
    Dim parentIdField As String
    Dim lineDepthField As String
    Dim quantityField As Decimal
    Dim baseUomField As String
    Dim longnumField As String
    Dim budgetPeriodField As String
    Dim earmarkedNumberField As String
    Dim earmarkedItemField As String
End Structure


Public Structure StrctSapWMSOtInfo
    Dim Info As String

#If Not APPLICAZIONE_WIN32 = "SI" Then
    Public Shared SapOtInfo_Rec As New WS_MB_EXEC_WM_WMS_TO.ZwmMbExecWmWmsTo
#Else
    Public Shared rfcSapOtInfo_Rec As New rfcZwmMbExecWmWmsTo
#End If

End Structure

Public Structure StrctSapLgtypInfo
    Dim Info As String
    Public Shared SapLgtypInfo_Rec As New WS_MB_GET_LGTYP_LIST.ZlgtypInfo
End Structure

Public Structure StrctSapMoveSuParams
    Dim Info As String

#If Not APPLICAZIONE_WIN32 = "SI" Then
    Public Shared SapOtInfo_Rec As New WS_MB_EXEC_WM_TO_MOVE_SU.ZwmMbExecWmToMoveSu
#Else
    Public Shared rfcSapOtInfo_Rec As New rfcZwmMbExecWmToMoveSu
#End If

End Structure

Public Structure StrctSapMoveSuMulParams
    Dim Info As String

#If Not APPLICAZIONE_WIN32 = "SI" Then
    Public Shared SapOtMulInfo_Rec As New WS_MB_EXEC_WM_TO_MOVE_SU_MUL.ZwmMbExecWmToMoveSuMul
#Else
    Public Shared rfcSapOtMulInfo_Rec As New rfcZwmMbExecWmToMoveSuMul
#End If

End Structure

Public Structure StrctSapGetMaterialList
    Dim Info As String
    Public Shared GetMaterialList_Rec As New WS_MB_GET_MATERIAL_LIST.ZmbMaterialList
End Structure


Public Structure rfcZwmMbExecWmWmsTo
    Dim IAblad As String
    Dim IAltme As String
    Dim IAnfme As Double
    Dim IBenum As String
    Dim IBestq As String
    Dim IBetyp As String
    Dim IBwlvs As String
    Dim ICharg As String
    Dim IElaborationType As String
    Dim IEnableDebug As String
    Dim ILanguage As String
    Dim ILetyp As String
    Dim ILgnum As String
    Dim ILgort As String
    Dim IMatnr As String
    Dim IMblnr As String
    Dim IMessageId As String
    Dim IMjahr As String
    Dim INlber As String
    Dim INlenr As String
    Dim INlpla As String
    Dim INltyp As String
    Dim INppos As String
    Dim IQtaExecutedSfusi As Double
    Dim IReceiverId As String
    Dim ISenderId As String
    Dim ISobkz As String
    Dim ISonum As String
    Dim ISquit As String
    Dim ITbnum As String
    Dim ITbpos As String
    Dim ITestrun As String
    Dim IUserId As String
    Dim IVlber As String
    Dim IVlenr As String
    Dim IVlpla As String
    Dim IVlqnr As String
    Dim IVltyp As String
    Dim IVppos As String
    Dim IWerks As String
    Dim IZeile As String

    Dim IBemActDurata As Long
    Dim IBemActEnDt As String
    Dim IBemActEnTm As String
    Dim IBemActStDt As String
    Dim IBemActStTm As String

    Dim ILgtypSpunta As String
    Dim IUseridRf As String
    Dim IZemDaProd As String

End Structure

Public Structure rfcZwmMbExecWmToMoveSu
    Dim ILenum As String
    Dim IBwlvs As String
    Dim IBETYP As String
    Dim IBENUM As String
    Dim ISquit As String
    Dim ILetyp As String
    Dim INltyp As String
    Dim INlber As String
    Dim INlpla As String
    Dim INPPOS As String
    Dim ILanguage As String
End Structure

Public Structure rfcZwmMbExecWmToMoveSuMul
    Dim IBwlvs As String
    Dim ISquit As String
    Dim ILetyp As String
    Dim ILenum As String
    Dim INltyp As String
    Dim INlpla As String
    Dim INlber As String
    Dim ILanguage As String
    Dim ILenumTab() As String
End Structure

Public Structure rfcZe1Ss00004Cons
    Dim Werks As String
    Dim Matnr As String
    Dim Charg As String
    Dim Lgort As String
    Dim Vbmnc As String
    Dim Dispo As String
    Dim Scelta As String
    Dim UtaVis As String
    Dim Nota As String
End Structure

Public Structure StrctGoodMovCreateMB1BInfo
    Dim Info As String
    Dim HEADER_TEXT As String
    Dim REF_DOC_NO As String
    Dim BILL_OF_LADING As String
    Dim GR_GI_SLIP_NO As String
    Dim LQNUM As String
    Dim LGNUM As String
    Dim LGTYP As String
    Dim LGPLA As String
    Dim SOBKZ As String
    Dim SONUM As String
    Dim PSTNG_DATE As Date
    Dim DOC_DATE As Date

#If Not APPLICAZIONE_WIN32 = "SI" Then
    Public Shared SapMovCreateItem_Rec As New WS_MB_GOODSMVT_CREATE_MB1B.Bapi2017GmItemCreate
#Else
    Dim rfcSapMovCreateItem_Rec As rfcZwmMbGoodsmvtCreateMb11
#End If

End Structure

Public Structure StrctGoodMovCreateStockQ
    Dim Info As String
    Dim HEADER_TEXT As String
    Dim REF_DOC_NO As String
    Dim BILL_OF_LADING As String
    Dim GR_GI_SLIP_NO As String
    Dim LQNUM As String
    Dim LGNUM As String
    Dim LGTYP As String
    Dim LGPLA As String
    Dim SOBKZ As String
    Dim SONUM As String
    Dim LENUM As String
    Dim BESTQ As String
    Dim PSTNG_DATE As Date
    Dim DOC_DATE As Date

#If Not APPLICAZIONE_WIN32 = "SI" Then
    Public Shared SapMovCreateItem_Rec As New WS_MB_GOODSMVT_CREATE_MB11_Q.Bapi2017GmItemCreate
#Else
    Dim rfcSapMovCreateItem_Rec As rfcZwmMbGoodsmvtCreateMb11
#End If

End Structure

Public Structure StrctGoodMovMB11CreateStock
    Dim Info As String
    Dim HEADER_TEXT As String
    Dim REF_DOC_NO As String
    Dim BILL_OF_LADING As String
    Dim GR_GI_SLIP_NO As String
    Dim LQNUM As String
    Dim LGNUM As String
    Dim LGTYP As String
    Dim LGPLA As String
    Dim SOBKZ As String
    Dim SONUM As String
    Dim LENUM As String
    Dim BESTQ As String
    Dim PSTNG_DATE As Date
    Dim DOC_DATE As Date
    Dim QTA_EXECUTED_SFUSI As Double
    Dim EnableCheckAvailableQty As Boolean
    Dim InfoLocazioneMovimento As String
#If Not APPLICAZIONE_WIN32 = "SI" Then
    Public Shared SapMovCreateItem_Rec As New WS_MB_GOODSMVT_CREATE_MB11.Bapi2017GmItemCreate
#Else
    Dim rfcSapMovCreateItem_Rec As rfcZwmMbGoodsmvtCreateMb11
#End If

End Structure

Public Structure rfc_I_EXCLUDE_LGPLA
    Dim rfc_SIGN As String
    Dim rfc_OPTION As String
    Dim rfc_LOW As String
    Dim rfc_HIGH As String
End Structure

Public Structure rfc_I_STOCK_TAB
    Dim rfc_LENUM As String
    Dim rfc_WERKS As String
    Dim rfc_MATNR As String
    Dim rfc_CHARG As String
    Dim rfc_GESME As String
    Dim rfc_VERME As String
    Dim rfc_MEINS As String
    Dim rfc_ZFLAG_SKIPUNLOAD As String
End Structure

Public Structure rfc_I_UDS_TRUCK_LOAD_TAB
    Dim rfc_WERKS As String
    Dim rfc_LGNUM As String
    Dim rfc_LENUM As String
    Dim rfc_ZUDS_BARCODE As String
End Structure

Public Structure rfc_I_ZWMS_JOB_PICK_TAB
    Dim rfc_ZUDS_BARCODE As String
    Dim rfc_ZNR_WMS_JOBS As String
    Dim rfc_MATNR_ORI As String
    Dim rfc_WERKS_ORI As String
    Dim rfc_LGORT_ORI As String
    Dim rfc_CHARG_ORI As String
    Dim rfc_LQNUM_ORI As String
    Dim rfc_LGNUM_ORI As String
    Dim rfc_LGTYP_ORI As String
    Dim rfc_LGPLA_ORI As String
    Dim rfc_LENUM_ORI As String
    Dim rfc_LETYP As String
    Dim rfc_MATNR_DEST As String
    Dim rfc_WERKS_DEST As String
    Dim rfc_LGORT_DEST As String
    Dim rfc_CHARG_DEST As String
    Dim rfc_LQNUM_DEST As String
    Dim rfc_LGNUM_DEST As String
    Dim rfc_LGTYP_DEST As String
    Dim rfc_LGPLA_DEST As String
    Dim rfc_LENUM_DEST As String
    Dim rfc_BESTQ As String
    Dim rfc_SOBKZ As String
    Dim rfc_SONUM As String
    Dim rfc_QTA_PICKED As String
    Dim rfc_UDM_QTA_PICKED As String
    Dim rfc_FLAG_PICK_ENDED As String
    Dim rfc_ZINFO_PRELIEVO As String
    Dim rfc_ZUDS_CHANGE_OPER As String
End Structure


Public Class clsSapWS

    '*****************************************
    'MANAGE OF CODE VERSION
    Private Const CodeClassObjectName As String = "clsSapWS"

    Public Shared Function Call_ZWS_MB_GET_LQUA_GIACENZE(ByRef inFilterUbicazione As clsDataType.SapWmUbicazione, ByRef inFilterGiacenza As clsDataType.SapWmGiacenza, ByVal inFilterLgtypEm As Boolean, ByVal inMaxNumRowReturned As Long, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outDataTableSped As DataTable, ByRef outNrUDC As Long, ByRef inFilterExcludeUbicazioni() As clsDataType.SapWmUbicazione, ByRef outFlagErrorSkuElaboration As clsDataType.FlagErrorSkuElaborationStruct, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean, Optional ByVal inIGetLocOccupation As Boolean = False, Optional ByVal inIGetOnlyPartialPal As Boolean = False) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim wkUbicazione As clsDataType.SapWmUbicazione
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim DimensioniExcludeUbi As Long
        Dim objWS As New WS_MB_GET_LQUA_GIACENZE.ZWS_MB_GET_LQUA_GIACENZE
        Dim stImportParams As New WS_MB_GET_LQUA_GIACENZE.ZwmMbGetLquaGiacenze
        Dim objWSResponse As New WS_MB_GET_LQUA_GIACENZE.ZwmMbGetLquaGiacenzeResponse

        Dim wkE_Success As Boolean = False
        Dim wkE_Foundrows As Boolean = False


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_LQUA_GIACENZE = 1 'INIT AT ERROR

            outGetOk = False

            outNrUDC = 0

            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inFilterUbicazione.NumeroMagazzino) <= 0) And (Len(inFilterUbicazione.UnitaMagazzino) <= 0) And (Len(inFilterGiacenza.SKU) <= 0) And (Len(inFilterGiacenza.CodiceMateriale) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(924, "", "Errore in esecuzione GET_GET_LQUA. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ NumMagazzino] ") & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inFilterUbicazione.Divisione) <= 0) And (Len(inFilterUbicazione.UnitaMagazzino) <= 0) And (Len(inFilterGiacenza.SKU) <= 0) And (Len(inFilterGiacenza.CodiceMateriale) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(963, "", "Errore in esecuzione GET_GET_LQUA. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Divisione] ") & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IWerks = inFilterUbicazione.Divisione
            stImportParams.ILgnum = inFilterUbicazione.NumeroMagazzino
            stImportParams.ILgtyp = inFilterUbicazione.TipoMagazzino
            stImportParams.ILgpla = inFilterUbicazione.Ubicazione
            stImportParams.IMatnr = inFilterGiacenza.CodiceMateriale
            stImportParams.ILenum = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inFilterUbicazione.UnitaMagazzino)
            stImportParams.ICharg = inFilterGiacenza.Partita
            If (inMaxNumRowReturned > 0) Then
                stImportParams.IMaxRetRows = inMaxNumRowReturned
            End If

            '>>> FLAG CHE MI INSERISCE NEL FILTRO TUTTI I TIPI MAGAZZINO DI ENTRATA MERCE (90x)
            If (inFilterLgtypEm = True) Then
                stImportParams.IFilterLgtypEm = "X"
            Else
                stImportParams.IFilterLgtypEm = ""
            End If

            'VERIFICO SE HE DELLE UBICAZIONI DA EXCLUDERE
            If (Not (inFilterExcludeUbicazioni Is Nothing)) Then
                DimensioniExcludeUbi = -1 'INIT
                For Each wkUbicazione In inFilterExcludeUbicazioni
                    If (clsUtility.IsStringValid(wkUbicazione.Ubicazione, True) = True) Then
                        DimensioniExcludeUbi = DimensioniExcludeUbi + 1
                        ReDim Preserve stImportParams.IExcludeLgpla(DimensioniExcludeUbi)
                        stImportParams.IExcludeLgpla(DimensioniExcludeUbi) = New WS_MB_GET_LQUA_GIACENZE.ZmbLquaLgplaRng
                        stImportParams.IExcludeLgpla(DimensioniExcludeUbi).Sign = "I"
                        stImportParams.IExcludeLgpla(DimensioniExcludeUbi).Option = "NE"
                        stImportParams.IExcludeLgpla(DimensioniExcludeUbi).Low = UCase(wkUbicazione.Ubicazione)
                    End If
                Next
            End If

            stImportParams.ILanguage = inLingua

            ''>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_lqua_giacenze/" & SapClient & "/zws_mb_get_lqua_giacenze/zws_mb_get_lqua_giacenze"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmMbGetLquaGiacenze(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                outNrUDC = objWSResponse.ENumUdc
                If (objWSResponse.ETabLqua.Length > 0) Then
                    '>>> VERIFICO SE HO UN NUMERO DI ELEMENTI RITORNATI ECCESSIVO; IN QUESTO CASO LI LIMITO AI PRIMI "N"
                    If (objWSResponse.ETabLqua.Length > NumRecordMaxListaGriglia) Then
                        ReDim Preserve objWSResponse.ETabLqua(NumRecordMaxListaGriglia)
                    End If
                    For Index = 0 To objWSResponse.ETabLqua.Length - 1
                        If (Len(objWSResponse.ETabLqua(Index).Lgtyp) > 0) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("Werks") = objWSResponse.ETabLqua(Index).Werks
                            WorkRow.Item("Lgnum") = objWSResponse.ETabLqua(Index).Lgnum
                            WorkRow.Item("Lgtyp") = objWSResponse.ETabLqua(Index).Lgtyp
                            WorkRow.Item("Lgpla") = objWSResponse.ETabLqua(Index).Lgpla
                            WorkRow.Item("Matnr") = clsSapUtility.FormattaStringaCodiceMateriale(objWSResponse.ETabLqua(Index).Matnr)
                            WorkRow.Item("Charg") = objWSResponse.ETabLqua(Index).Charg
                            WorkRow.Item("Verme") = objWSResponse.ETabLqua(Index).Verme
                            WorkRow.Item("Gesme") = objWSResponse.ETabLqua(Index).Gesme
                            WorkRow.Item("Meins") = objWSResponse.ETabLqua(Index).Meins
                            WorkRow.Item("Lenum") = clsSapUtility.FormattaStringaUnitaMagazzino(objWSResponse.ETabLqua(Index).Lenum)
                            WorkRow.Item("Sobkz") = objWSResponse.ETabLqua(Index).Sobkz
                            WorkRow.Item("Sonum") = objWSResponse.ETabLqua(Index).Sonum
                            WorkRow.Item("Bestq") = objWSResponse.ETabLqua(Index).Bestq
                            WorkRow.Item("Lgort") = objWSResponse.ETabLqua(Index).Lgort
                            WorkRow.Item("LQNUM") = objWSResponse.ETabLqua(Index).Lqnum
                            WorkRow.Item("VERME_CONS") = objWSResponse.ETabLqua(Index).VermeCons
                            WorkRow.Item("GESME_CONS") = objWSResponse.ETabLqua(Index).GesmeCons
                            WorkRow.Item("VRKME") = objWSResponse.ETabLqua(Index).Vrkme
                            WorkRow.Item("GESME_PZ") = objWSResponse.ETabLqua(Index).GesmePz
                            WorkRow.Item("VERME_PZ") = objWSResponse.ETabLqua(Index).VermePz
                            WorkRow.Item("MAKTG") = objWSResponse.ETabLqua(Index).Maktg
                            WorkRow.Item("IMBALLO") = objWSResponse.ETabLqua(Index).VarianteImballo.Imballo
                            WorkRow.Item("PZ_X_SC") = objWSResponse.ETabLqua(Index).VarianteImballo.PzXSc
                            WorkRow.Item("SC_X_PAL") = objWSResponse.ETabLqua(Index).VarianteImballo.ScXPal
                            WorkRow.Item("M2_X_PAL") = objWSResponse.ETabLqua(Index).VarianteImballo.M2XPal
                            WorkRow.Item("LAGP_LKAPV") = objWSResponse.ETabLqua(Index).LagpLkapv
                            WorkRow.Item("NUM_PALLET") = objWSResponse.ETabLqua(Index).NumPallet

                            WorkRow.Item("ZFLAG_UDS") = objWSResponse.ETabLqua(Index).ZflagUds
                            WorkRow.Item("ODV_VBELN") = objWSResponse.ETabLqua(Index).OdvVbeln
                            WorkRow.Item("ODV_POSNR") = objWSResponse.ETabLqua(Index).OdvPosnr
                            WorkRow.Item("ODV_KUNNR_AG") = objWSResponse.ETabLqua(Index).OdvKunnrAg
                            WorkRow.Item("ODV_KUNNR_WE") = objWSResponse.ETabLqua(Index).OdvKunnrWe
                            WorkRow.Item("ODV_LIFNR_SP") = objWSResponse.ETabLqua(Index).OdvLifnrSp
                            WorkRow.Item("ODV_KUNNR_AG_NAME1") = objWSResponse.ETabLqua(Index).OdvKunnrAgName1
                            WorkRow.Item("ODV_KUNNR_WE_NAME1") = objWSResponse.ETabLqua(Index).OdvKunnrWeName1
                            WorkRow.Item("ODV_LIFNR_SP_NAME1") = objWSResponse.ETabLqua(Index).OdvLifnrSpName1
                            WorkRow.Item("ZNR_WMS_JOBS") = objWSResponse.ETabLqua(Index).ZnrWmsJobs
                            WorkRow.Item("ZNR_WMS_JOBSGRP") = objWSResponse.ETabLqua(Index).ZnrWmsJobsgrp
                            WorkRow.Item("ZNRPICK") = objWSResponse.ETabLqua(Index).Znrpick
                            WorkRow.Item("ZPOSPK") = objWSResponse.ETabLqua(Index).Zpospk

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If

                        'RIEMPO DATA TABLE "SPEDIZIONI"
                        If (Not outDataTableSped Is Nothing) Then
                            If (Len(objWSResponse.ETabLqua(Index).Lgtyp) > 0) And objWSResponse.ETabLqua(Index).ZflagUds = "X" Then
                                WorkRow = outDataTableSped.NewRow()
                                WorkRow.Item("Werks") = objWSResponse.ETabLqua(Index).Werks
                                WorkRow.Item("Lgnum") = objWSResponse.ETabLqua(Index).Lgnum
                                WorkRow.Item("Lgtyp") = objWSResponse.ETabLqua(Index).Lgtyp
                                WorkRow.Item("Lgpla") = objWSResponse.ETabLqua(Index).Lgpla
                                WorkRow.Item("Matnr") = clsSapUtility.FormattaStringaCodiceMateriale(objWSResponse.ETabLqua(Index).Matnr)
                                WorkRow.Item("Charg") = objWSResponse.ETabLqua(Index).Charg
                                WorkRow.Item("Verme") = objWSResponse.ETabLqua(Index).Verme
                                WorkRow.Item("Gesme") = objWSResponse.ETabLqua(Index).Gesme
                                WorkRow.Item("Meins") = objWSResponse.ETabLqua(Index).Meins
                                WorkRow.Item("Lenum") = clsSapUtility.FormattaStringaUnitaMagazzino(objWSResponse.ETabLqua(Index).Lenum)
                                WorkRow.Item("Sobkz") = objWSResponse.ETabLqua(Index).Sobkz
                                WorkRow.Item("Sonum") = objWSResponse.ETabLqua(Index).Sonum
                                WorkRow.Item("Bestq") = objWSResponse.ETabLqua(Index).Bestq
                                WorkRow.Item("Lgort") = objWSResponse.ETabLqua(Index).Lgort
                                WorkRow.Item("LQNUM") = objWSResponse.ETabLqua(Index).Lqnum
                                WorkRow.Item("VERME_CONS") = objWSResponse.ETabLqua(Index).VermeCons
                                WorkRow.Item("GESME_CONS") = objWSResponse.ETabLqua(Index).GesmeCons
                                WorkRow.Item("VRKME") = objWSResponse.ETabLqua(Index).Vrkme
                                WorkRow.Item("MAKTG") = objWSResponse.ETabLqua(Index).Maktg
                                WorkRow.Item("IMBALLO") = objWSResponse.ETabLqua(Index).VarianteImballo.Imballo
                                WorkRow.Item("PZ_X_SC") = objWSResponse.ETabLqua(Index).VarianteImballo.PzXSc
                                WorkRow.Item("SC_X_PAL") = objWSResponse.ETabLqua(Index).VarianteImballo.ScXPal
                                WorkRow.Item("M2_X_PAL") = objWSResponse.ETabLqua(Index).VarianteImballo.M2XPal
                                WorkRow.Item("LAGP_LKAPV") = objWSResponse.ETabLqua(Index).LagpLkapv
                                WorkRow.Item("NUM_PALLET") = objWSResponse.ETabLqua(Index).NumPallet

                                WorkRow.Item("ZFLAG_UDS") = objWSResponse.ETabLqua(Index).ZflagUds
                                WorkRow.Item("ODV_VBELN") = objWSResponse.ETabLqua(Index).OdvVbeln
                                WorkRow.Item("ODV_POSNR") = objWSResponse.ETabLqua(Index).OdvPosnr
                                WorkRow.Item("ODV_KUNNR_AG") = objWSResponse.ETabLqua(Index).OdvKunnrAg
                                WorkRow.Item("ODV_KUNNR_WE") = objWSResponse.ETabLqua(Index).OdvKunnrWe
                                WorkRow.Item("ODV_LIFNR_SP") = objWSResponse.ETabLqua(Index).OdvLifnrSp
                                WorkRow.Item("ODV_KUNNR_AG_NAME1") = objWSResponse.ETabLqua(Index).OdvKunnrAgName1
                                WorkRow.Item("ODV_KUNNR_WE_NAME1") = objWSResponse.ETabLqua(Index).OdvKunnrWeName1
                                WorkRow.Item("ODV_LIFNR_SP_NAME1") = objWSResponse.ETabLqua(Index).OdvLifnrSpName1
                                WorkRow.Item("ZNR_WMS_JOBS") = objWSResponse.ETabLqua(Index).ZnrWmsJobs
                                WorkRow.Item("ZNR_WMS_JOBSGRP") = objWSResponse.ETabLqua(Index).ZnrWmsJobsgrp
                                WorkRow.Item("ZNRPICK") = objWSResponse.ETabLqua(Index).Znrpick
                                WorkRow.Item("ZPOSPK") = objWSResponse.ETabLqua(Index).Zpospk

                                outDataTableSped.Rows.Add(WorkRow) 'aggiungo la riga
                            End If
                        End If
                    Next
                End If
            End If


            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And Not (outDataTableSped Is Nothing) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                'outNrUDC = objWSResponse.ENumUdc
                If (objWSResponse.ETabLqua.Length > 0) Then
                    For Index = 0 To objWSResponse.ETabLqua.Length - 1
                    Next
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            Dim rfc_stImportParams() As rfc_I_EXCLUDE_LGPLA

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GET_LQUA_GIACENZE")


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            rfcFunction.SetValue("I_WERKS", inFilterUbicazione.Divisione)
            rfcFunction.SetValue("I_LGNUM", inFilterUbicazione.NumeroMagazzino)
            rfcFunction.SetValue("I_LGTYP", inFilterUbicazione.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA", inFilterUbicazione.Ubicazione)
            rfcFunction.SetValue("I_MATNR", inFilterGiacenza.CodiceMateriale)
            rfcFunction.SetValue("I_LENUM", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inFilterUbicazione.UnitaMagazzino))
            rfcFunction.SetValue("I_CHARG", inFilterGiacenza.Partita)
            rfcFunction.SetValue("I_SKU", inFilterGiacenza.SKU)
            rfcFunction.SetValue("I_LGORT", inFilterGiacenza.MagazzinoLogico)

            If (inMaxNumRowReturned > 0) Then
                rfcFunction.SetValue("I_MAX_RET_ROWS", inMaxNumRowReturned)
            End If

            '>>> FLAG CHE MI INSERISCE NEL FILTRO TUTTI I TIPI MAGAZZINO DI ENTRATA MERCE (90x)
            If (inFilterLgtypEm = True) Then
                rfcFunction.SetValue("I_FILTER_LGTYP_EM", "X")
            Else
                rfcFunction.SetValue("I_FILTER_LGTYP_EM", " ")
            End If

            'FLAG CHE RITORNA I DATI DI OCCUPAZIONE UBICAZIONE
            If (inIGetLocOccupation = True) Then
                rfcFunction.SetValue("I_GET_LOC_OCCUPATION", "X")
            Else
                rfcFunction.SetValue("I_GET_LOC_OCCUPATION", " ")
            End If

            'FLAG CHE RITORNA SOLO I RECORD CONTENENTI DI CODE PARTIAL PALLET
            If (inIGetOnlyPartialPal = True) Then
                rfcFunction.SetValue("I_GET_ONLY_PARTIALPAL", "X")
            Else
                rfcFunction.SetValue("I_GET_ONLY_PARTIALPAL", " ")
            End If



            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_EXCLUDE_LGPLA")
            'Dim In_rfcRow As IRfcStructure = rfcFunction.GetStructure("I_EXCLUDE_LGPLA")


            'VERIFICO SE HE DELLE UBICAZIONI DA ESCLUDERE
            If (Not (inFilterExcludeUbicazioni Is Nothing)) Then
                DimensioniExcludeUbi = -1 'INIT
                For Each wkUbicazione In inFilterExcludeUbicazioni
                    If (clsUtility.IsStringValid(wkUbicazione.Ubicazione, True) = True) Then
                        DimensioniExcludeUbi = DimensioniExcludeUbi + 1

                        ReDim Preserve rfc_stImportParams(DimensioniExcludeUbi)

                        In_rfcTable.Append()

                        rfc_stImportParams(DimensioniExcludeUbi).rfc_SIGN = "I"
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_OPTION = "NE"
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_LOW = UCase(wkUbicazione.Ubicazione)

                        In_rfcTable.SetValue("SIGN", rfc_stImportParams(DimensioniExcludeUbi).rfc_SIGN)
                        In_rfcTable.SetValue("OPTION", rfc_stImportParams(DimensioniExcludeUbi).rfc_OPTION)
                        In_rfcTable.SetValue("LOW", rfc_stImportParams(DimensioniExcludeUbi).rfc_LOW)

                    End If
                Next
            End If

            rfcFunction.SetValue("I_LANGUAGE", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                wkE_Success = True

                If (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) Then
                    wkE_Foundrows = True

                    rfcTable = rfcFunction.GetTable("E_Tab_Lqua")

                    Dim Out_rfcStruct_E_VARIANTE_IMBALLO As IRfcStructure = rfcTable.GetStructure("VARIANTE_IMBALLO")

                    outGetOk = True 'UNICO CASO DI CHECK OK


                    'RITORNO FLAG CON EVENTUALI ERRORI DI ELABORAZIONE DELLO SKU
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_MATNR_FROM_SKU") = "X") Then
                        outFlagErrorSkuElaboration.FlagErrorSku_MATNR = True
                    Else
                        outFlagErrorSkuElaboration.FlagErrorSku_MATNR = False
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_CHARG_FROM_SKU") = "X") Then
                        outFlagErrorSkuElaboration.FlagErrorSku_CHARG = True
                    Else
                        outFlagErrorSkuElaboration.FlagErrorSku_CHARG = False
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_SHADE_NOT_FOUND") = "X") Then
                        outFlagErrorSkuElaboration.FlagErrorSku_ShadeNotFound = True
                    Else
                        outFlagErrorSkuElaboration.FlagErrorSku_ShadeNotFound = False
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_MATNR_FROM_SKU") = "X") Then
                        outFlagErrorSkuElaboration.FlagErrorSku_DiffMatnr = True
                    Else
                        outFlagErrorSkuElaboration.FlagErrorSku_DiffMatnr = False
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_MATNR_CLASS_001") = "X") Then
                        outFlagErrorSkuElaboration.FlagErrorSku_MatnrClass001 = True
                    Else
                        outFlagErrorSkuElaboration.FlagErrorSku_MatnrClass001 = False
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_CLASS_FROM_SKU") = "X") Then
                        outFlagErrorSkuElaboration.FlagErrorSku_DiffClass001 = True
                    Else
                        outFlagErrorSkuElaboration.FlagErrorSku_DiffClass001 = False
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_TONO_FROM_SKU") = "X") Then
                        outFlagErrorSkuElaboration.FlagErrorSku_DiffTono = True
                    Else
                        outFlagErrorSkuElaboration.FlagErrorSku_DiffTono = False
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_CALIBRO_FROM_SKU") = "X") Then
                        outFlagErrorSkuElaboration.FlagErrorSku_DiffCalibro = True
                    Else
                        outFlagErrorSkuElaboration.FlagErrorSku_DiffCalibro = False
                    End If


                    If (rfcTable.RowCount > 0) Then
                        '>>> VERIFICO SE HO UN NUMERO DI ELEMENTI RITORNATI ECCESSIVO; IN QUESTO CASO LI LIMITO AI PRIMI "N"

                        If (rfcTable.RowCount > NumRecordMaxListaGriglia) Then
                            ReDim Preserve objWSResponse.ETabLqua(NumRecordMaxListaGriglia)
                        End If

                        outNrUDC = rfcTable.RowCount

                        For Each rfcRow In rfcTable

                            If (Len(rfcRow.GetString(rfcTable.GetElementMetadata("LGTYP").Name)) > 0) Then
                                WorkRow = outDataTable.NewRow()

                                Out_rfcStruct_E_VARIANTE_IMBALLO = rfcRow.GetStructure("VARIANTE_IMBALLO")

                                WorkRow.Item("Werks") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Werks")
                                WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                                WorkRow.Item("Lgtyp") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                                WorkRow.Item("Lgpla") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                                WorkRow.Item("Matnr") = clsSapUtility.FormattaStringaCodiceMateriale(clsSapUtility.GetRFCStructParamToString(rfcRow, "Matnr"))
                                WorkRow.Item("Charg") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Charg")


                                WorkRow.Item("GESME_QTY_USER") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_PAL")))) + " " + _
                                                                 Trim(clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_PAL")) + " / " + _
                                                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_PARTIAL")))) + " " + _
                                                                 Trim(clsSapUtility.GetRFCStructParamToString(rfcRow, "Vrkme")) + " / " + _
                                                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_SF")))) + " " + _
                                                                 Trim(clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_PZ"))


                                'WorkRow.Item("VERME_QTY_USER") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_CONS")


                                WorkRow.Item("Verme") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme")
                                WorkRow.Item("Gesme") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme")
                                WorkRow.Item("Meins") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Meins")
                                WorkRow.Item("Lenum") = clsSapUtility.FormattaStringaCodiceMateriale(clsSapUtility.GetRFCStructParamToString(rfcRow, "Lenum"))
                                WorkRow.Item("Sobkz") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Sobkz")
                                WorkRow.Item("Sonum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Sonum")
                                WorkRow.Item("Bestq") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Bestq")
                                WorkRow.Item("Lgort") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgort")
                                WorkRow.Item("Lqnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lqnum")
                                WorkRow.Item("VERME_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_CONS")
                                WorkRow.Item("GESME_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_CONS")
                                WorkRow.Item("Vrkme") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Vrkme")
                                WorkRow.Item("GESME_PAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_PAL")
                                WorkRow.Item("VERME_PAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_PAL")

                                WorkRow.Item("MEINS_PAL") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_PAL")

                                WorkRow.Item("GESME_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_PARTIAL")
                                WorkRow.Item("VERME_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_PARTIAL")
                                WorkRow.Item("GESME_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_PZ")
                                WorkRow.Item("VERME_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_PZ")
                                WorkRow.Item("GESME_SF") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_SF")
                                WorkRow.Item("VERME_SF") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_SF")
                                WorkRow.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_PZ")

                                WorkRow.Item("MAKTG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAKTG")


                                '>>> RECUPERO DATI VARIANTE IMBALLO
                                WorkRow.Item("IMBALLO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_VARIANTE_IMBALLO, "IMBALLO")
                                WorkRow.Item("PZ_X_SC") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_VARIANTE_IMBALLO, "PZ_X_SC")
                                WorkRow.Item("SC_X_PAL") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_VARIANTE_IMBALLO, "SC_X_PAL")
                                WorkRow.Item("M2_X_PAL") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_VARIANTE_IMBALLO, "M2_X_PAL")

                                WorkRow.Item("LAGP_LKAPV") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "LAGP_LKAPV")

                                WorkRow.Item("NUM_PALLET") = clsSapUtility.GetRFCStructParamToString(rfcRow, "NUM_PALLET")
                                WorkRow.Item("ZFLAG_UDS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZFLAG_UDS")
                                WorkRow.Item("ODV_VBELN") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_VBELN")
                                WorkRow.Item("ODV_POSNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_POSNR")
                                WorkRow.Item("ODV_KUNNR_AG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_KUNNR_AG")
                                WorkRow.Item("ODV_KUNNR_WE") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_KUNNR_WE")
                                WorkRow.Item("ODV_LIFNR_SP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_LIFNR_SP")
                                WorkRow.Item("ODV_KUNNR_AG_NAME1") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_KUNNR_AG_NAME1")
                                WorkRow.Item("ODV_KUNNR_WE_NAME1") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_KUNNR_WE_NAME1")
                                WorkRow.Item("ODV_LIFNR_SP_NAME1") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_LIFNR_SP_NAME1")
                                WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                                WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                                WorkRow.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNRPICK")
                                WorkRow.Item("ZPOSPK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZPOSPK")

                                WorkRow.Item("ZWMS_SKU_PALLET") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_SKU_PALLET")
                                WorkRow.Item("ZZCDLEGACY") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZZCDLEGACY")

                                'Nuovi campi per Gestire Unità di Misura Metri Quadri in IT e EN
                                WorkRow.Item("GESME_M2") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_M2")
                                WorkRow.Item("GESME_SQF") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_SQF")
                                WorkRow.Item("MEINS_M2") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_M2")
                                WorkRow.Item("MEINS_SQF") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_SQF")



                                'AGGIUNTA CAMPI GESTIONE QTA' TOTALI DELLE UBICAZIONI

                                WorkRow.Item("UBI_USER_QTY_TOTAL") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "UBI_GESME_PAL")))) + " " + _
                                                            Trim(clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_PAL")) + " / " + _
                                                            Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "UBI_GESME_PARTIAL")))) + " " + _
                                                            Trim(clsSapUtility.GetRFCStructParamToString(rfcRow, "Vrkme")) + " / " + _
                                                            Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "UBI_GESME_SF")))) + " " + _
                                                            Trim(clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_PZ"))



                                'FLAG CHE INDICA SE ATTIVA LA GESTIONE DELLE UNITA MAGAZZINO
                                WorkRow.Item("GESTIONE_UM_ATTIVA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GESTIONE_UM_ATTIVA")
                                'AGGIUNTA FLAG GESTIONE PEZZI ATTIVA
                                WorkRow.Item("ZGESTIONE_PZ_ATTIVA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZGESTIONE_PZ_ATTIVA")


                                outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                            End If

                            'RIEMPO DATA TABLE "SPEDIZIONI"
                            If (Not outDataTableSped Is Nothing) Then
                                If (Len(rfcRow.GetString(rfcTable.GetElementMetadata("Lgtyp").Name)) > 0) And (rfcRow.GetString(rfcTable.GetElementMetadata("ZFLAG_UDS").Name) = "X") Then
                                    WorkRow = outDataTableSped.NewRow()

                                    WorkRow.Item("Werks") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Werks")
                                    WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                                    WorkRow.Item("Lgtyp") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                                    WorkRow.Item("Lgpla") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                                    WorkRow.Item("Matnr") = clsSapUtility.FormattaStringaCodiceMateriale(clsSapUtility.GetRFCStructParamToString(rfcRow, "Matnr"))
                                    WorkRow.Item("Charg") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Charg")
                                    WorkRow.Item("Verme") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme")
                                    WorkRow.Item("Gesme") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme")
                                    WorkRow.Item("Meins") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Meins")
                                    WorkRow.Item("Lenum") = clsSapUtility.FormattaStringaCodiceMateriale(clsSapUtility.GetRFCStructParamToString(rfcRow, "Lenum"))
                                    WorkRow.Item("Sobkz") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Sobkz")
                                    WorkRow.Item("Sonum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Sonum")
                                    WorkRow.Item("Bestq") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Bestq")
                                    WorkRow.Item("Lgort") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgort")
                                    WorkRow.Item("Lqnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lqnum")
                                    WorkRow.Item("VERME_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_CONS")
                                    WorkRow.Item("GESME_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_CONS")
                                    WorkRow.Item("Vrkme") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Vrkme")
                                    WorkRow.Item("GESME_PAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_PAL")
                                    WorkRow.Item("VERME_PAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_PAL")
                                    WorkRow.Item("GESME_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_PARTIAL")
                                    WorkRow.Item("VERME_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_PARTIAL")
                                    WorkRow.Item("GESME_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_PZ")
                                    WorkRow.Item("VERME_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_PZ")
                                    WorkRow.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_PZ")
                                    WorkRow.Item("IMBALLO") = clsSapUtility.GetRFCStructParamToString(rfcRow, "IMBALLO")
                                    WorkRow.Item("PZ_X_SC") = clsSapUtility.GetRFCStructParamToString(rfcRow, "PZ_X_SC")
                                    WorkRow.Item("SC_X_PAL") = clsSapUtility.GetRFCStructParamToString(rfcRow, "SC_X_PAL")
                                    WorkRow.Item("M2_X_PAL") = clsSapUtility.GetRFCStructParamToString(rfcRow, "M2_X_PAL")
                                    WorkRow.Item("LAGP_LKAPV") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LAGP_LKAPV")
                                    WorkRow.Item("NUM_PALLET") = clsSapUtility.GetRFCStructParamToString(rfcRow, "NUM_PALLET")
                                    WorkRow.Item("ZFLAG_UDS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZFLAG_UDS")
                                    WorkRow.Item("ODV_VBELN") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_VBELN")
                                    WorkRow.Item("ODV_POSNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_POSNR")
                                    WorkRow.Item("ODV_KUNNR_AG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_KUNNR_AG")
                                    WorkRow.Item("ODV_KUNNR_WE") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_KUNNR_WE")
                                    WorkRow.Item("ODV_LIFNR_SP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_LIFNR_SP")
                                    WorkRow.Item("ODV_KUNNR_AG_NAME1") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_KUNNR_AG_NAME1")
                                    WorkRow.Item("ODV_KUNNR_WE_NAME1") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_KUNNR_WE_NAME1")
                                    WorkRow.Item("ODV_LIFNR_SP_NAME1") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ODV_LIFNR_SP_NAME1")
                                    WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                                    WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                                    WorkRow.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNRPICK")
                                    WorkRow.Item("ZPOSPK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZPOSPK")

                                    outDataTableSped.Rows.Add(WorkRow) 'aggiungo la riga
                                End If
                            End If
                        Next
                    End If
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then

#If APPLICAZIONE_WIN32 <> "SI" Then
                                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                                    RetCode = 101
                                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                                Else
                                    RetCode = 999
                                    '>>> CONDIZIONE DI ERRORE
                                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(964, "", "Estrazione dati errata (GET_GET_LQUA).Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                                End If
#Else
                If wkE_Success And Not wkE_Foundrows Then
                    RetCode = 101
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    RetCode = 999
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(964, "", "Estrazione dati errata (GET_GET_LQUA).Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If

#End If

                outSapFunctionError.ERROR_CODE = RetCode
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_GET_LQUA_GIACENZE = RetCode
            Else
                Call_ZWS_MB_GET_LQUA_GIACENZE = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GOODSMVT_CREATE_MB1B(ByVal inInfoPerMovimento As StrctGoodMovCreateMB1BInfo, ByRef outOkMovExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outDocumentoMateriale As clsDataType.SapWmDocumentoMateriale, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim DataCorrente As Date

#If Not APPLICAZIONE_WIN32 = "SI" Then
        Dim objWS As New WS_MB_GOODSMVT_CREATE_MB1B.ZWS_MB_GOODSMVT_CREATE_MB1B
        Dim stImportParams As New WS_MB_GOODSMVT_CREATE_MB1B.ZwmMbGoodsmvtCreateMb1b
        Dim stWsResponse As New WS_MB_GOODSMVT_CREATE_MB1B.ZwmMbGoodsmvtCreateMb1bResponse
#Else
        Dim MatDocNum As String = ""
        Dim MatDocYear As Long = 0
#End If

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GOODSMVT_CREATE_MB1B = 1 'INIT AT ERROR

            outOkMovExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI

#If Not APPLICAZIONE_WIN32 = "SI" Then

            If (Len(inInfoPerMovimento.LGNUM) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgnum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGTYP) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgtyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGPLA) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.Material) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Material] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.Plant) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Plant] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.MoveType) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [MoveType] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inInfoPerMovimento.SapMovCreateItem_Rec.EntryQnt <= 0) Then
                RetCode = 206
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryQnt] " & clsAppTranslation.GetSingleParameterValue(968, "", "<= zero.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.EntryUom) <= 0) Then
                RetCode = 208
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryUom] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.RefDoc) <= 0) Then
                RetCode = 210
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [RefDoc] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.RefDocIt) <= 0) Then
                RetCode = 211
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(965, "", "Errore in esecuzione MOV-MB1B.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [RefDocIt] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            stImportParams.IGoodsmvtCode.GmCode = "04"
            stImportParams.IBillOfLading = inInfoPerMovimento.BILL_OF_LADING

            DataCorrente = Date.Now.Date
            If ((Len(inInfoPerMovimento.DOC_DATE) > 0) And (inInfoPerMovimento.DOC_DATE > Date.MinValue)) Then
                'stImportParams.IHeader = inInfoPerMovimento.DOC_DATE
            Else
                'Format(DataLimitePerGestioneOdPVecchi.Year, "0000") & "-" & Format(DataLimitePerGestioneOdPVecchi.Month, "00") & "-" & Format(DataLimitePerGestioneOdPVecchi.Day, "00")
                'stImportParams.IDocDate = Format(DataCorrente, "yyyy-MM-dd")
            End If
            stImportParams.IGrGiSlipNo = inInfoPerMovimento.GR_GI_SLIP_NO
            stImportParams.IHeaderText = inInfoPerMovimento.HEADER_TEXT
            stImportParams.ILgnum = inInfoPerMovimento.LGNUM
            stImportParams.ILgpla = inInfoPerMovimento.LGPLA
            stImportParams.ILgtyp = inInfoPerMovimento.LGTYP
            stImportParams.ILqnum = inInfoPerMovimento.LQNUM
            If ((Len(inInfoPerMovimento.PSTNG_DATE) > 0) And (inInfoPerMovimento.PSTNG_DATE > Date.MinValue)) Then
                'stImportParams.IPstngDate = inInfoPerMovimento.PSTNG_DATE
            Else
                'stImportParams.IPstngDate = Format(DataCorrente, "yyyy-MM-dd")
            End If
            stImportParams.IRefDocNo = inInfoPerMovimento.REF_DOC_NO
            stImportParams.ISobkz = inInfoPerMovimento.SOBKZ
            stImportParams.ISonum = inInfoPerMovimento.SONUM

            'PASSO ITEM PER MOVIMENTO
            stImportParams.IGoodsmvtItem = inInfoPerMovimento.SapMovCreateItem_Rec

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_goodsmvt_create_mb1b/" & SapClient & "/zws_mb_goodsmvt_create_mb1b/zws_mb_goodsmvt_create_mb1b"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'chiamo function per eseguire l'OT
            stWsResponse = objWS.ZwmMbGoodsmvtCreateMb1b(stImportParams)
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA

            If ((stWsResponse.ESuccess = "Y") And (clsUtility.IsStringValid(stWsResponse.EMaterialdocument, True)) = True) Then
                outOkMovExecuted = True 'UNICO CASO DI MOVIMENTO OK
                Call_ZWS_MB_GOODSMVT_CREATE_MB1B = RetCode 'SE = 0 TUTTO OK
            Else
                outOkMovExecuted = False  'Errore nel trasferimento
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcRow As IRfcStructure
            


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            If (Len(inInfoPerMovimento.LGNUM) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgnum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGTYP) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgtyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGPLA) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.materialField) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Material] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.plantField) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Plant] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.moveTypeField) <= 0) Then
                RetCode = 206
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [MoveType] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryQntField <= 0) Then
                RetCode = 207
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryQnt] " & clsAppTranslation.GetSingleParameterValue(968, "", " <= zero.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryUomField) <= 0) Then
                RetCode = 208
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryUom] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.refDocField) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [StgeLoc] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.refDocItField) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [StgeLoc] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            'IMPOSTO LA LINGUA

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GOODSMVT_CREATE_MB11")

            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)

            rfcFunction.SetValue("I_GOODSMVT_CODE", "04")
            rfcFunction.SetValue("I_BILL_OF_LADING", inInfoPerMovimento.BILL_OF_LADING)


            DataCorrente = Date.Now.Date
            If ((Len(inInfoPerMovimento.DOC_DATE) > 0) And (inInfoPerMovimento.DOC_DATE > Date.MinValue)) Then
                'stImportParams.IHeader = inInfoPerMovimento.DOC_DATE
            Else
                'Format(DataLimitePerGestioneOdPVecchi.Year, "0000") & "-" & Format(DataLimitePerGestioneOdPVecchi.Month, "00") & "-" & Format(DataLimitePerGestioneOdPVecchi.Day, "00")
                'stImportParams.IDocDate = Format(DataCorrente, "yyyy-MM-dd")
            End If

            rfcFunction.SetValue("I_GR_GI_SLIP_NO", inInfoPerMovimento.GR_GI_SLIP_NO)
            rfcFunction.SetValue("I_HEADER_TEXT", inInfoPerMovimento.HEADER_TEXT)
            rfcFunction.SetValue("I_LGNUM", inInfoPerMovimento.LGNUM)
            rfcFunction.SetValue("I_LGPLA", inInfoPerMovimento.LGPLA)
            rfcFunction.SetValue("I_LGTYP", inInfoPerMovimento.LGTYP)
            rfcFunction.SetValue("I_LQNUM", inInfoPerMovimento.LQNUM)

            If ((Len(inInfoPerMovimento.PSTNG_DATE) > 0) And (inInfoPerMovimento.PSTNG_DATE > Date.MinValue)) Then
                'stImportParams.IPstngDate = inInfoPerMovimento.PSTNG_DATE
            Else
                'stImportParams.IPstngDate = Format(DataCorrente, "yyyy-MM-dd")
            End If

            rfcFunction.SetValue("I_REF_DOC_NO", inInfoPerMovimento.REF_DOC_NO)
            rfcFunction.SetValue("I_SOBKZ", inInfoPerMovimento.SOBKZ)
            rfcFunction.SetValue("I_SONUM", inInfoPerMovimento.SONUM)

            'PASSO ITEM PER MOVIMENTO
            'stImportParams.IGoodsmvtItem = inInfoPerMovimento.SapMovCreateItem_Rec

            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_GOODSMVT_ITEM_TAB")

            In_rfcTable.Append()

            In_rfcTable.SetValue("MATERIAL", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.materialField)
            In_rfcTable.SetValue("BATCH", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.batchField)
            In_rfcTable.SetValue("PLANT", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.plantField)
            In_rfcTable.SetValue("STGE_LOC", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.stgeLocField)

            'In_rfcTable.SetValue("COSTCENTER", Default_Inventario_ParametroMB11CentroDiCosto)
            In_rfcTable.SetValue("COSTCENTER", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.plantField)

            In_rfcTable.SetValue("MOVE_TYPE", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.moveTypeField)
            In_rfcTable.SetValue("MOVE_REAS", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.moveReasField)

            In_rfcTable.SetValue("STCK_TYPE", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.stckTypeField)
            In_rfcTable.SetValue("SPEC_STOCK", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.specStockField)
            In_rfcTable.SetValue("ENTRY_QNT", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryQntField)
            In_rfcTable.SetValue("ENTRY_UOM", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryUomField)

            In_rfcTable.SetValue("PO_NUMBER", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.poNumberField)
            In_rfcTable.SetValue("PO_ITEM", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.poItemField)

            In_rfcTable.SetValue("REF_DOC", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.refDocField)
            In_rfcTable.SetValue("REF_DOC_IT", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.refDocItField)

            In_rfcTable.SetValue("VAL_SALES_ORD", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.valSalesOrdField)
            In_rfcTable.SetValue("VAL_S_ORD_ITEM", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.valSOrdItemField)

            '>>>


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If ((clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsUtility.IsStringValid(clsSapUtility.GetRFCParameterToString(rfcFunction, "E_DOC_MAT_INFO"), True) = True)) Then
                outOkMovExecuted = True 'UNICO CASO DI LOGIN OK

                Dim Out_rfcStruct_E_DOC_MAT_INFO As IRfcStructure = rfcFunction.GetStructure("E_DOC_MAT_INFO")

                MatDocNum = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_DOC_MAT_INFO, "MAT_DOC_NUM")
                MatDocYear = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_DOC_MAT_INFO, "MAT_DOC_YEAR")


                Call_ZWS_MB_GOODSMVT_CREATE_MB1B = RetCode 'SE = 0 TUTTO OK
            Else
                outOkMovExecuted = False  'Errore nel trasferimento
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkMovExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(969, "", "Movimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & stWsResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & stWsResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else

#If Not APPLICAZIONE_WIN32 = "SI" Then
                outDocumentoMateriale.NumeroDocumento = EDocMatInfo.MatDocNum '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
                outDocumentoMateriale.AnnoEsercizio = EDocMatInfo.MatDocYear  '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
#Else
                outDocumentoMateriale.NumeroDocumento = MatDocNum '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
                outDocumentoMateriale.AnnoEsercizio = MatDocYear  '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
#End If

                Call_ZWS_MB_GOODSMVT_CREATE_MB1B = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GOODSMVT_CREATE_MB11(ByVal inInfoPerMovimento As StrctGoodMovMB11CreateStock, ByRef outOkMovExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outDocumentoMateriale As clsDataType.SapWmDocumentoMateriale, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim DataCorrente As Date


#If Not APPLICAZIONE_WIN32 = "SI" Then
        Dim objWS As New WS_MB_GOODSMVT_CREATE_MB11.ZWS_MB_GOODSMVT_CREATE_MB11
        Dim EDocMatInfo As WS_MB_GOODSMVT_CREATE_MB11.Ze1DocMatInfo
        Dim stImportParams As New WS_MB_GOODSMVT_CREATE_MB11.ZwmMbGoodsmvtCreateMb11
        Dim stWsResponse As New WS_MB_GOODSMVT_CREATE_MB11.ZwmMbGoodsmvtCreateMb11Response
#Else

#End If

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GOODSMVT_CREATE_MB11 = 1 'INIT AT ERROR

            outOkMovExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)
            RetCode = clsSapUtility.ResetSapWmDocumentoMateriale(outDocumentoMateriale)

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI

#If Not APPLICAZIONE_WIN32 = "SI" Then

            If (Len(inInfoPerMovimento.LGNUM) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgnum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGTYP) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgtyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGPLA) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.Material) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Material] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.Plant) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Plant] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.StgeLoc) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [StgeLoc] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.MoveType) <= 0) Then
                RetCode = 206
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [MoveType] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inInfoPerMovimento.SapMovCreateItem_Rec.EntryQnt <= 0) Then
                RetCode = 207
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryQnt] " & clsAppTranslation.GetSingleParameterValue(968, "", " <= zero.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.EntryUom) <= 0) Then
                RetCode = 208
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryUom] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            stImportParams.IGoodsmvtCode.GmCode = "04"
            stImportParams.IBillOfLading = inInfoPerMovimento.BILL_OF_LADING

            DataCorrente = Date.Now.Date
            If ((Len(inInfoPerMovimento.DOC_DATE) > 0) And (inInfoPerMovimento.DOC_DATE > Date.MinValue)) Then
                'stImportParams.IHeader = inInfoPerMovimento.DOC_DATE
            Else
                'Format(DataLimitePerGestioneOdPVecchi.Year, "0000") & "-" & Format(DataLimitePerGestioneOdPVecchi.Month, "00") & "-" & Format(DataLimitePerGestioneOdPVecchi.Day, "00")
                'stImportParams.IDocDate = Format(DataCorrente, "yyyy-MM-dd")
            End If
            stImportParams.IGrGiSlipNo = inInfoPerMovimento.GR_GI_SLIP_NO
            stImportParams.IHeaderText = inInfoPerMovimento.HEADER_TEXT
            stImportParams.ILgnum = inInfoPerMovimento.LGNUM
            stImportParams.ILgpla = inInfoPerMovimento.LGPLA
            stImportParams.ILgtyp = inInfoPerMovimento.LGTYP
            stImportParams.ILqnum = inInfoPerMovimento.LQNUM
            If ((Len(inInfoPerMovimento.PSTNG_DATE) > 0) And (inInfoPerMovimento.PSTNG_DATE > Date.MinValue)) Then
                'stImportParams.IPstngDate = inInfoPerMovimento.PSTNG_DATE
            Else
                'stImportParams.IPstngDate = Format(DataCorrente, "yyyy-MM-dd")
            End If
            stImportParams.IRefDocNo = inInfoPerMovimento.REF_DOC_NO
            stImportParams.ISobkz = inInfoPerMovimento.SOBKZ
            stImportParams.ISonum = inInfoPerMovimento.SONUM

            'PASSO ITEM PER MOVIMENTO
            stImportParams.IGoodsmvtItem = inInfoPerMovimento.SapMovCreateItem_Rec

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_goodsmvt_create_mb1b/" & SapClient & "/zws_mb_goodsmvt_create_mb1b/zws_mb_goodsmvt_create_mb1b"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'chiamo function per eseguire l'OT
            stWsResponse = objWS.ZwmMbGoodsmvtCreateMb1b(stImportParams)
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA

            If ((stWsResponse.ESuccess = "Y") And (clsUtility.IsStringValid(stWsResponse.EMaterialdocument, True)) = True) Then
                outOkMovExecuted = True 'UNICO CASO DI MOVIMENTO OK
                Call_ZWS_MB_GOODSMVT_CREATE_MB1B = RetCode 'SE = 0 TUTTO OK
            Else
                outOkMovExecuted = False  'Errore nel trasferimento
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            If (Len(inInfoPerMovimento.LGNUM) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgnum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGTYP) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgtyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGPLA) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.materialField) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Material] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.plantField) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Plant] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.stgeLocField) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [StgeLoc] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.moveTypeField) <= 0) Then
                RetCode = 206
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [MoveType] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryQntField <= 0) And (inInfoPerMovimento.QTA_EXECUTED_SFUSI <= 0) Then
                RetCode = 207
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryQnt] " & clsAppTranslation.GetSingleParameterValue(968, "", " <= zero.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryUomField) <= 0) Then
                RetCode = 208
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryUom] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            'IMPOSTO LA LINGUA

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GOODSMVT_CREATE_MB11")

            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)

            rfcFunction.SetValue("I_GOODSMVT_CODE", "06")
            rfcFunction.SetValue("I_BILL_OF_LADING", inInfoPerMovimento.BILL_OF_LADING)


            DataCorrente = Date.Now.Date
            If ((Len(inInfoPerMovimento.DOC_DATE) > 0) And (inInfoPerMovimento.DOC_DATE > Date.MinValue)) Then
                'stImportParams.IHeader = inInfoPerMovimento.DOC_DATE
            Else
                'Format(DataLimitePerGestioneOdPVecchi.Year, "0000") & "-" & Format(DataLimitePerGestioneOdPVecchi.Month, "00") & "-" & Format(DataLimitePerGestioneOdPVecchi.Day, "00")
                'stImportParams.IDocDate = Format(DataCorrente, "yyyy-MM-dd")
            End If

            rfcFunction.SetValue("I_GR_GI_SLIP_NO", inInfoPerMovimento.GR_GI_SLIP_NO)
            rfcFunction.SetValue("I_HEADER_TEXT", inInfoPerMovimento.HEADER_TEXT)
            rfcFunction.SetValue("I_LGNUM", inInfoPerMovimento.LGNUM)
            rfcFunction.SetValue("I_LGPLA", inInfoPerMovimento.LGPLA)
            rfcFunction.SetValue("I_LGTYP", inInfoPerMovimento.LGTYP)
            rfcFunction.SetValue("I_LQNUM", inInfoPerMovimento.LQNUM)
            rfcFunction.SetValue("I_QTA_EXECUTED_SFUSI", inInfoPerMovimento.QTA_EXECUTED_SFUSI)

            If ((Len(inInfoPerMovimento.PSTNG_DATE) > 0) And (inInfoPerMovimento.PSTNG_DATE > Date.MinValue)) Then
                'stImportParams.IPstngDate = inInfoPerMovimento.PSTNG_DATE
            Else
                'stImportParams.IPstngDate = Format(DataCorrente, "yyyy-MM-dd")
            End If

            rfcFunction.SetValue("I_REF_DOC_NO", inInfoPerMovimento.REF_DOC_NO)
            rfcFunction.SetValue("I_SOBKZ", inInfoPerMovimento.SOBKZ)
            rfcFunction.SetValue("I_SONUM", inInfoPerMovimento.SONUM)
            rfcFunction.SetValue("I_LENUM", inInfoPerMovimento.LENUM)
            rfcFunction.SetValue("I_BESTQ", inInfoPerMovimento.BESTQ)
            rfcFunction.SetValue("I_LOCATION_INFO", inInfoPerMovimento.InfoLocazioneMovimento)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_EN_SEND_MAIL", "X")

            If (inInfoPerMovimento.EnableCheckAvailableQty = True) Then
                rfcFunction.SetValue("I_EN_CHECK_AVAILQTY", "X")
            End If

            'PASSO ITEM PER MOVIMENTO
            'stImportParams.IGoodsmvtItem = inInfoPerMovimento.SapMovCreateItem_Rec

            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_GOODSMVT_ITEM_TAB")

            In_rfcTable.Append()

            In_rfcTable.SetValue("MATERIAL", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.materialField)
            In_rfcTable.SetValue("BATCH", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.batchField)
            In_rfcTable.SetValue("PLANT", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.plantField)
            In_rfcTable.SetValue("STGE_LOC", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.stgeLocField)

            'In_rfcTable.SetValue("COSTCENTER", Default_Inventario_ParametroMB11CentroDiCosto)
            In_rfcTable.SetValue("COSTCENTER", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.plantField)

            In_rfcTable.SetValue("MOVE_TYPE", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.moveTypeField)
            In_rfcTable.SetValue("MOVE_REAS", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.moveReasField)

            In_rfcTable.SetValue("STCK_TYPE", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.stckTypeField)
            In_rfcTable.SetValue("SPEC_STOCK", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.specStockField)
            In_rfcTable.SetValue("ENTRY_QNT", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryQntField)
            In_rfcTable.SetValue("ENTRY_UOM", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryUomField)

            In_rfcTable.SetValue("PO_NUMBER", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.poNumberField)
            In_rfcTable.SetValue("PO_ITEM", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.poItemField)

            In_rfcTable.SetValue("REF_DOC", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.refDocField)
            In_rfcTable.SetValue("REF_DOC_IT", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.refDocItField)

            In_rfcTable.SetValue("VAL_SALES_ORD", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.valSalesOrdField)
            In_rfcTable.SetValue("VAL_S_ORD_ITEM", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.valSOrdItemField)

            '>>>


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If ((clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsUtility.IsStringValid(clsSapUtility.GetRFCParameterToString(rfcFunction, "E_DOC_MAT_INFO"), True) = True)) Then
                outOkMovExecuted = True 'UNICO CASO DI LOGIN OK

                Dim Out_rfcStruct_E_DOC_MAT_INFO As IRfcStructure = rfcFunction.GetStructure("E_DOC_MAT_INFO")

                '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
                outDocumentoMateriale.NumeroDocumento = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_DOC_MAT_INFO, "MAT_DOC_NUM")
                outDocumentoMateriale.AnnoEsercizio = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_DOC_MAT_INFO, "MAT_DOC_YEAR")

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_QTY_SKIP_MOV") = "X") Then
                    outDocumentoMateriale.SkipMovimentoPerQtaNonDisponibile = True
                End If
                outDocumentoMateriale.QtaNonDisponibile = clsSapUtility.GetRFCParameterToFloat(rfcFunction, "E_QTY_NOTAVAIL_FOR_MOV")

                Call_ZWS_MB_GOODSMVT_CREATE_MB11 = RetCode 'SE = 0 TUTTO OK
            Else
                outOkMovExecuted = False  'Errore nel trasferimento
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkMovExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(969, "", "Movimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & stWsResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & stWsResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else

#If Not APPLICAZIONE_WIN32 = "SI" Then
                outDocumentoMateriale.NumeroDocumento = EDocMatInfo.MatDocNum '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
                outDocumentoMateriale.AnnoEsercizio = EDocMatInfo.MatDocYear  '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
#End If

                Call_ZWS_MB_GOODSMVT_CREATE_MB11 = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_MB_GOODSMVT_CREATE_MB11_Q(ByVal inInfoPerMovimento As StrctGoodMovCreateStockQ, ByRef outOkMovExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outDocumentoMateriale As clsDataType.SapWmDocumentoMateriale, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim DataCorrente As Date


#If Not APPLICAZIONE_WIN32 = "SI" Then
        Dim objWS As New WS_MB_GOODSMVT_CREATE_MB11_Q.ZWS_MB_GOODSMVT_CREATE_MB11_Q
        Dim stImportParams As New WS_MB_GOODSMVT_CREATE_MB11_Q.ZwmMbGoodsmvtCreateMb11Q
        Dim stWsResponse As New WS_MB_GOODSMVT_CREATE_MB11_Q.ZwmMbGoodsmvtCreateMb11QResponse
#Else
        Dim MatDocNum As String = ""
        Dim MatDocYear As Long = 0
#End If


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GOODSMVT_CREATE_MB11_Q = 1 'INIT AT ERROR

            outOkMovExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI

#If Not APPLICAZIONE_WIN32 = "SI" Then

            If (Len(inInfoPerMovimento.LGNUM) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(970, "", "Errore in esecuzione MOV-MB11-Q.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgnum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGTYP) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(970, "", "Errore in esecuzione MOV-MB11-Q.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgtyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGPLA) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(970, "", "Errore in esecuzione MOV-MB11-Q.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.Material) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(970, "", "Errore in esecuzione MOV-MB11-Q.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Material] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.Plant) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(970, "", "Errore in esecuzione MOV-MB11-Q.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Plant] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.StgeLoc) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(970, "", "Errore in esecuzione MOV-MB11-Q.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [StgeLoc] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.MoveType) <= 0) Then
                RetCode = 206
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(970, "", "Errore in esecuzione MOV-MB11-Q.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [MoveType] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inInfoPerMovimento.SapMovCreateItem_Rec.EntryQnt <= 0) Then
                RetCode = 207
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(970, "", "Errore in esecuzione MOV-MB11-Q.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryQnt] " & clsAppTranslation.GetSingleParameterValue(968, "", " <= zero.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.SapMovCreateItem_Rec.EntryUom) <= 0) Then
                RetCode = 208
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(970, "", "Errore in esecuzione MOV-MB11-Q.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryUom] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            stImportParams.IGoodsmvtCode = "06"
            stImportParams.IBillOfLading = inInfoPerMovimento.BILL_OF_LADING

            DataCorrente = Date.Now.Date
            If ((Len(inInfoPerMovimento.DOC_DATE) > 0) And (inInfoPerMovimento.DOC_DATE > Date.MinValue)) Then
                stImportParams.IDocDate = inInfoPerMovimento.DOC_DATE
            Else
                stImportParams.IDocDate = String.Format(DataCorrente, "yyyy-MM-dd")
            End If
            stImportParams.IGrGiSlipNo = inInfoPerMovimento.GR_GI_SLIP_NO
            stImportParams.IHeaderText = inInfoPerMovimento.HEADER_TEXT
            stImportParams.ILgnum = inInfoPerMovimento.LGNUM
            stImportParams.ILgpla = inInfoPerMovimento.LGPLA
            stImportParams.ILgtyp = inInfoPerMovimento.LGTYP
            stImportParams.ILqnum = inInfoPerMovimento.LQNUM
            If ((Len(inInfoPerMovimento.PSTNG_DATE) > 0) And (inInfoPerMovimento.PSTNG_DATE > Date.MinValue)) Then
                stImportParams.IPstngDate = inInfoPerMovimento.PSTNG_DATE
            Else
                stImportParams.IPstngDate = String.Format(DataCorrente, "yyyy-MM-dd")
            End If
            stImportParams.IRefDocNo = inInfoPerMovimento.REF_DOC_NO
            stImportParams.ISobkz = inInfoPerMovimento.SOBKZ
            stImportParams.ISonum = inInfoPerMovimento.SONUM
            stImportParams.ILenum = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoPerMovimento.LENUM)

            'PASSO ITEM PER MOVIMENTO IN PARAMETRO ARRAY
            Dim ParGoodsmvtItemTab(1) As WS_MB_GOODSMVT_CREATE_MB11_Q.Bapi2017GmItemCreate

            If (Not ParGoodsmvtItemTab Is Nothing) Then
                ParGoodsmvtItemTab.Clear(ParGoodsmvtItemTab, 0, 0)
            End If
            ParGoodsmvtItemTab.SetValue(inInfoPerMovimento.SapMovCreateItem_Rec, 0)
            stImportParams.IGoodsmvtItemTab = ParGoodsmvtItemTab

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_goodsmvt_create_mb11_q/" & SapClient & "/zws_mb_goodsmvt_create_mb11_q/zws_mb_goodsmvt_create_mb11_q"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'chiamo function per eseguire l'OT
            stWsResponse = objWS.ZwmMbGoodsmvtCreateMb11Q(stImportParams)
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA

            If ((stWsResponse.ESuccess = "Y") And (clsUtility.IsStringValid(stWsResponse.EDocMatInfo.MatDocNum, True)) = True) Then
                outOkMovExecuted = True 'UNICO CASO DI MOVIMENTO OK
                Call_ZWS_MB_GOODSMVT_CREATE_MB11_Q = RetCode 'SE = 0 TUTTO OK
            Else
                outOkMovExecuted = False  'Errore nel trasferimento
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            If (Len(inInfoPerMovimento.LGNUM) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgnum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGTYP) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgtyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.LGPLA) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Lgpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.materialField) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Material] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.plantField) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [Plant] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.stgeLocField) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [StgeLoc] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.moveTypeField) <= 0) Then
                RetCode = 206
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [MoveType] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryQntField <= 0) Then
                RetCode = 207
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryQnt] " & clsAppTranslation.GetSingleParameterValue(968, "", " <= zero.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryUomField) <= 0) Then
                RetCode = 208
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1057, "", "Errore in esecuzione MOV-MB11.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(966, "", "Parametro") & " [EntryUom] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            'IMPOSTO LA LINGUA

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GOODSMVT_CREATE_MB11_Q")

            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)

            rfcFunction.SetValue("I_GOODSMVT_CODE", "06")
            rfcFunction.SetValue("I_BILL_OF_LADING", inInfoPerMovimento.BILL_OF_LADING)


            DataCorrente = Date.Now.Date
            If ((Len(inInfoPerMovimento.DOC_DATE) > 0) And (inInfoPerMovimento.DOC_DATE > Date.MinValue)) Then
                inInfoPerMovimento.rfcSapMovCreateItem_Rec.iDocDateField = inInfoPerMovimento.DOC_DATE
            Else
                inInfoPerMovimento.rfcSapMovCreateItem_Rec.iDocDateField = String.Format(DataCorrente, "yyyy-MM-dd")
            End If

            rfcFunction.SetValue("I_GR_GI_SLIP_NO", inInfoPerMovimento.GR_GI_SLIP_NO)
            rfcFunction.SetValue("I_HEADER_TEXT", inInfoPerMovimento.HEADER_TEXT)
            rfcFunction.SetValue("I_LGNUM", inInfoPerMovimento.LGNUM)
            rfcFunction.SetValue("I_LGPLA", inInfoPerMovimento.LGPLA)
            rfcFunction.SetValue("I_LGTYP", inInfoPerMovimento.LGTYP)
            rfcFunction.SetValue("I_LQNUM", inInfoPerMovimento.LQNUM)

            If ((Len(inInfoPerMovimento.PSTNG_DATE) > 0) And (inInfoPerMovimento.PSTNG_DATE > Date.MinValue)) Then
                inInfoPerMovimento.rfcSapMovCreateItem_Rec.iPstngDateField = inInfoPerMovimento.PSTNG_DATE
            Else
                inInfoPerMovimento.rfcSapMovCreateItem_Rec.iPstngDateField = String.Format(DataCorrente, "yyyy-MM-dd")
            End If

            rfcFunction.SetValue("I_REF_DOC_NO", inInfoPerMovimento.REF_DOC_NO)
            rfcFunction.SetValue("I_SOBKZ", inInfoPerMovimento.SOBKZ)
            rfcFunction.SetValue("I_SONUM", inInfoPerMovimento.SONUM)
            rfcFunction.SetValue("I_LENUM", inInfoPerMovimento.LENUM)
            rfcFunction.SetValue("I_BESTQ", inInfoPerMovimento.BESTQ)


            'PASSO ITEM PER MOVIMENTO
            'stImportParams.IGoodsmvtItem = inInfoPerMovimento.SapMovCreateItem_Rec

            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_GOODSMVT_ITEM_TAB")

            In_rfcTable.Append()

            In_rfcTable.SetValue("MATERIAL", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.materialField)
            In_rfcTable.SetValue("BATCH", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.batchField)
            In_rfcTable.SetValue("PLANT", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.plantField)
            In_rfcTable.SetValue("STGE_LOC", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.stgeLocField)

            'In_rfcTable.SetValue("COSTCENTER", Default_Inventario_ParametroMB11CentroDiCosto)
            In_rfcTable.SetValue("COSTCENTER", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.plantField)

            In_rfcTable.SetValue("MOVE_TYPE", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.moveTypeField)
            In_rfcTable.SetValue("MOVE_REAS", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.moveReasField)

            In_rfcTable.SetValue("STCK_TYPE", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.stckTypeField)
            In_rfcTable.SetValue("SPEC_STOCK", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.specStockField)
            In_rfcTable.SetValue("ENTRY_QNT", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryQntField)
            In_rfcTable.SetValue("ENTRY_UOM", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.entryUomField)

            In_rfcTable.SetValue("PO_NUMBER", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.poNumberField)
            In_rfcTable.SetValue("PO_ITEM", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.poItemField)

            In_rfcTable.SetValue("REF_DOC", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.refDocField)
            In_rfcTable.SetValue("REF_DOC_IT", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.refDocItField)

            In_rfcTable.SetValue("VAL_SALES_ORD", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.valSalesOrdField)
            In_rfcTable.SetValue("VAL_S_ORD_ITEM", inInfoPerMovimento.rfcSapMovCreateItem_Rec.iGoodsmvtItemTabField.valSOrdItemField)

            '>>>


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If ((clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsUtility.IsStringValid(clsSapUtility.GetRFCParameterToString(rfcFunction, "E_DOC_MAT_INFO"), True) = True)) Then
                outOkMovExecuted = True 'UNICO CASO DI LOGIN OK

                Dim Out_rfcStruct_E_DOC_MAT_INFO As IRfcStructure = rfcFunction.GetStructure("E_DOC_MAT_INFO")

                MatDocNum = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_DOC_MAT_INFO, "MAT_DOC_NUM")
                MatDocYear = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_DOC_MAT_INFO, "MAT_DOC_YEAR")


                Call_ZWS_MB_GOODSMVT_CREATE_MB11_Q = RetCode 'SE = 0 TUTTO OK
            Else
                outOkMovExecuted = False  'Errore nel trasferimento
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkMovExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(969, "", "Movimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & stWsResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & stWsResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else

#If Not APPLICAZIONE_WIN32 = "SI" Then
                outDocumentoMateriale.NumeroDocumento = EDocMatInfo.MatDocNum '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
                outDocumentoMateriale.AnnoEsercizio = EDocMatInfo.MatDocYear  '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
#Else
                outDocumentoMateriale.NumeroDocumento = MatDocNum '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
                outDocumentoMateriale.AnnoEsercizio = MatDocYear  '>>> TORNO LE INFO DEL DOCUMENTO MATERIALE
#End If

                Call_ZWS_MB_GOODSMVT_CREATE_MB11_Q = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_EXEC_WM_TO_MOVE_SU_MUL(ByVal inParams As StrctSapMoveSuMulParams, ByRef outOkTransferExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outOT_Number() As String, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim LoopIndex As Integer = 0

        Dim objWS As New WS_MB_EXEC_WM_TO_MOVE_SU_MUL.ZWS_MB_EXEC_WM_TO_MOVE_SU_MUL
        Dim stImportParams As New WS_MB_EXEC_WM_TO_MOVE_SU_MUL.ZwmMbExecWmToMoveSuMul
        Dim objWSResponse As New WS_MB_EXEC_WM_TO_MOVE_SU_MUL.ZwmMbExecWmToMoveSuMulResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_EXEC_WM_TO_MOVE_SU_MUL = 1 'INIT AT ERROR

            outOkTransferExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)


#If Not APPLICAZIONE_WIN32 = "SI" Then

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (inParams.SapOtMulInfo_Rec.ILenumTab Is Nothing) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inParams.SapOtMulInfo_Rec.ILenumTab.Length <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.SapOtMulInfo_Rec.IBwlvs) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Bwlvs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.SapOtMulInfo_Rec.INltyp) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nltyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.SapOtMulInfo_Rec.INlpla) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nlpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            'IMPOSTO LE UNITA DI MAGAZZINO
            For LoopIndex = 0 To (inParams.SapOtMulInfo_Rec.ILenumTab.Length - 1)
                inParams.SapOtMulInfo_Rec.ILenumTab(LoopIndex) = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inParams.SapOtMulInfo_Rec.ILenumTab(LoopIndex)) '>>> CONVERTO IN FORMATO
            Next

            If (Len(inParams.SapOtMulInfo_Rec.INlber) <= 0) Then
                inParams.SapOtMulInfo_Rec.INlber = "001"
            End If

            'IMPOSTO LA LINGUA
            inParams.SapOtMulInfo_Rec.ILanguage = clsUser.SapWmsUser.LANGUAGE

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_exec_wm_to_move_su_mul/" & SapClient & "/zws_mb_exec_wm_to_move_su_mul/zws_mb_exec_wm_to_move_su_mul"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire OT
            objWSResponse = objWS.ZwmMbExecWmToMoveSuMul(inParams.SapOtMulInfo_Rec)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA


            If (objWSResponse.ESuccess = "Y") Then 'And (objWSResponse.ETanum > 0)) Then
                If (Not objWSResponse.EOtTab Is Nothing) Then
                    If (objWSResponse.EOtTab.Length > 0) Then
                        ReDim outOT_Number(objWSResponse.EOtTab.Length - 1)
                        For LoopIndex = 0 To objWSResponse.EOtTab.Length - 1
                            If (objWSResponse.EOtTab(LoopIndex).Tanum > 0) Then
                                outOT_Number(LoopIndex) = objWSResponse.EOtTab(LoopIndex).Tanum
                                outOkTransferExecuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If
                        Next
                    End If
                End If
                Call_ZWS_MB_EXEC_WM_TO_MOVE_SU_MUL = RetCode 'SE = 0 TUTTO OK
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim Out_rfcStruct_E_OT_TAB As IRfcTable
            Dim rfcRow As IRfcStructure
            
            


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (inParams.rfcSapOtMulInfo_Rec.ILenumTab Is Nothing) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inParams.rfcSapOtMulInfo_Rec.ILenumTab.Length <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.rfcSapOtMulInfo_Rec.IBwlvs) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Bwlvs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.rfcSapOtMulInfo_Rec.INltyp) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nltyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.rfcSapOtMulInfo_Rec.INlpla) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nlpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inParams.rfcSapOtMulInfo_Rec.INlber) <= 0) Then
                inParams.rfcSapOtMulInfo_Rec.INlber = "001"
            End If

            'IMPOSTO LA LINGUA
            inParams.rfcSapOtMulInfo_Rec.ILanguage = clsUser.SapWmsUser.LANGUAGE

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_EXEC_WM_TO_MOVE_SU_MUL")

            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_LENUM_TAB")

            LoopIndex = 0

            'IMPOSTO LE UNITA DI MAGAZZINO
            For LoopIndex = 0 To (inParams.rfcSapOtMulInfo_Rec.ILenumTab.Length - 1)

                In_rfcTable.Append()

                inParams.rfcSapOtMulInfo_Rec.ILenumTab(LoopIndex) = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inParams.rfcSapOtMulInfo_Rec.ILenumTab(LoopIndex)) '>>> CONVERTO IN FORMATO

                In_rfcTable.SetValue(0, inParams.rfcSapOtMulInfo_Rec.ILenumTab(LoopIndex))

            Next

            'rfcFunction.SetValue("I_LENUM_TAB", inParams.rfcSapOtMulInfo_Rec.ILenumTab)
            rfcFunction.SetValue("I_BWLVS", inParams.rfcSapOtMulInfo_Rec.IBwlvs)
            rfcFunction.SetValue("I_NLTYP", inParams.rfcSapOtMulInfo_Rec.INltyp)
            rfcFunction.SetValue("I_NLPLA", inParams.rfcSapOtMulInfo_Rec.INlpla)
            rfcFunction.SetValue("I_NLBER", inParams.rfcSapOtMulInfo_Rec.INlber)
            rfcFunction.SetValue("I_SQUIT", "X")
            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)

            rfcFunction.SetValue("I_USER_ID", clsUser.SapWmsUser.USERID)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)

            
            LoopIndex = 0

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                Out_rfcStruct_E_OT_TAB = rfcFunction.GetTable("E_OT_TAB")

                If (Not Out_rfcStruct_E_OT_TAB Is Nothing) Then
                    If (Out_rfcStruct_E_OT_TAB.RowCount > 0) Then

                        ReDim outOT_Number(Out_rfcStruct_E_OT_TAB.RowCount - 1)

                        For Each rfcRow In Out_rfcStruct_E_OT_TAB

                            If (Out_rfcStruct_E_OT_TAB.GetObject("Tanum") > 0) Then
                                outOT_Number(LoopIndex) = clsSapUtility.GetRFCStructParamToString(rfcRow, "Tanum")
                                'outOT_Number(LoopIndex) = Out_rfcStruct_E_OT_TAB.GetObject("Tanum") 'objWSResponse.EOtTab(LoopIndex).Tanum
                                outOkTransferExecuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If
                            LoopIndex += 1
                        Next
                    End If
                End If

                Call_ZWS_MB_EXEC_WM_TO_MOVE_SU_MUL = RetCode 'SE = 0 TUTTO OK

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkTransferExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                'CASO ESECUZIONE OK
                Call_ZWS_MB_EXEC_WM_TO_MOVE_SU_MUL = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_EXEC_WM_TO_MOVE_SU(ByVal inParams As StrctSapMoveSuParams, ByVal inFlagPUTAWAY As Boolean, ByVal inFlagEmProduzione As Boolean, ByRef outOkTransferExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outOT_Number As String, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_EXEC_WM_TO_MOVE_SU.ZWS_MB_EXEC_WM_TO_MOVE_SU
        Dim stImportParams As New WS_MB_EXEC_WM_TO_MOVE_SU.ZwmMbExecWmToMoveSu
        Dim objWSResponse As New WS_MB_EXEC_WM_TO_MOVE_SU.ZwmMbExecWmToMoveSuResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_EXEC_WM_TO_MOVE_SU = 1 'INIT AT ERROR

            outOkTransferExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)

#If Not APPLICAZIONE_WIN32 = "SI" Then

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (Len(inParams.SapOtInfo_Rec.ILenum) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.SapOtInfo_Rec.IBwlvs) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Bwlvs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.SapOtInfo_Rec.INltyp) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nltyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.SapOtInfo_Rec.INlpla) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nlpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inParams.SapOtInfo_Rec.ILenum) > 0) Then
                If (Len(inParams.SapOtInfo_Rec.ILenum) <> 20) Then
                    inParams.SapOtInfo_Rec.ILenum = inParams.SapOtInfo_Rec.ILenum.PadLeft(20, "0")
                End If
            End If
            If (Len(inParams.SapOtInfo_Rec.INlber) <= 0) Then
                inParams.SapOtInfo_Rec.INlber = "001"
            End If

            'IMPOSTO LA LINGUA
            inParams.SapOtInfo_Rec.ILanguage = clsUser.SapWmsUser.LANGUAGE

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_exec_wm_to_move_su/" & SapClient & "/zws_mb_exec_wm_to_move_su/zws_mb_exec_wm_to_move_su"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire OT
            objWSResponse = objWS.ZwmMbExecWmToMoveSu(inParams.SapOtInfo_Rec)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA


            If ((objWSResponse.ESuccess = "Y") And (objWSResponse.ETanum > 0)) Then
                outOkTransferExecuted = True 'UNICO CASO DI LOGIN OK
                Call_ZWS_MB_EXEC_WM_TO_MOVE_SU = RetCode 'SE = 0 TUTTO OK
            Else
                outOkTransferExecuted = False  'Errore nel trasferimento
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            
            


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (Len(inParams.rfcSapOtInfo_Rec.ILenum) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.rfcSapOtInfo_Rec.IBwlvs) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Bwlvs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.rfcSapOtInfo_Rec.INltyp) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nltyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.rfcSapOtInfo_Rec.INlpla) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nlpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inParams.rfcSapOtInfo_Rec.ILenum) > 0) Then
                If (Len(inParams.rfcSapOtInfo_Rec.ILenum) <> 20) Then
                    inParams.rfcSapOtInfo_Rec.ILenum = inParams.rfcSapOtInfo_Rec.ILenum.PadLeft(20, "0")
                End If
            End If
            If (Len(inParams.rfcSapOtInfo_Rec.INlber) <= 0) Then
                inParams.rfcSapOtInfo_Rec.INlber = "001"
            End If

            'IMPOSTO LA LINGUA
            inParams.rfcSapOtInfo_Rec.ILanguage = clsUser.SapWmsUser.LANGUAGE


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_EXEC_WM_TO_MOVE_SU")


            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse())

            rfcFunction.SetValue("I_LENUM", inParams.rfcSapOtInfo_Rec.ILenum)
            rfcFunction.SetValue("I_BWLVS", inParams.rfcSapOtInfo_Rec.IBwlvs)
            rfcFunction.SetValue("I_BETYP", inParams.rfcSapOtInfo_Rec.IBETYP)
            rfcFunction.SetValue("I_BENUM", inParams.rfcSapOtInfo_Rec.IBENUM)
            rfcFunction.SetValue("I_SQUIT", inParams.rfcSapOtInfo_Rec.ISquit)
            rfcFunction.SetValue("I_LETYP", inParams.rfcSapOtInfo_Rec.ILetyp)
            rfcFunction.SetValue("I_NLTYP", inParams.rfcSapOtInfo_Rec.INltyp)
            rfcFunction.SetValue("I_NLBER", inParams.rfcSapOtInfo_Rec.INlber)
            rfcFunction.SetValue("I_NLPLA", inParams.rfcSapOtInfo_Rec.INlpla)
            rfcFunction.SetValue("I_NPPOS", inParams.rfcSapOtInfo_Rec.INPPOS)

            If (inFlagPUTAWAY = True) Then
                rfcFunction.SetValue("I_ZEM_PUTAWAY", "X")
            End If
            If (inFlagEmProduzione = True) Then
                rfcFunction.SetValue("I_ZEM_DA_PROD", "X")
            End If
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            'If ((clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcFunction.GetObject("E_Tanum") > 0)) Then
            If ((clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToInt(rfcFunction, "E_Tanum") > 0)) Then
                outOkTransferExecuted = True 'UNICO CASO DI LOGIN OK
                Call_ZWS_MB_EXEC_WM_TO_MOVE_SU = RetCode 'SE = 0 TUTTO OK
            Else
                outOkTransferExecuted = False  'Errore nel trasferimento
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkTransferExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                outOT_Number = objWSResponse.ETanum '>>> TORNO IL NUMERO DELL'OT
                Call_ZWS_MB_EXEC_WM_TO_MOVE_SU = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_CHECK_JOBS_GROUP_LAST_SEQ(ByVal inSapWmWmsJob As clsDataType.SapWmWmsJob, ByRef outCheckOk As Boolean, ByVal inLingua As String, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_CHECK_JOBS_GROUP_LAST_SEQ.ZWS_CHECK_JOBS_GROUP_LAST_SEQ
        Dim stImportParams As New WS_CHECK_JOBS_GROUP_LAST_SEQ.ZwmsCheckJobsGroupLastSeq
        Dim objWSResponse As New WS_CHECK_JOBS_GROUP_LAST_SEQ.ZwmsCheckJobsGroupLastSeqResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_JOBS_GROUP_LAST_SEQ = 1 'INIT AT ERROR

            outCheckOk = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (inSapWmWmsJob.NrWmsJobs <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(973, "", "Errore in esecuzione OT (CHECK_JOBS_GRP_LAST_SEQ). Parametro") & "[" & clsAppTranslation.GetSingleParameterValue(1086, "", "NrWmsJobs") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inSapWmWmsJob.CodiceGruppoMissioni) <= 0) Then
                'SE NON HO IL GRUPPO LA MISSIONE E' SINGOLA PER CUI ESCO SENZA ERRORE E CON IL FLAG ATTIVO
                RetCode = 0
                Call_ZWS_CHECK_JOBS_GROUP_LAST_SEQ = RetCode
                outCheckOk = True
                Exit Function
            End If

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inSapWmWmsJob.NrWmsJobs
            stImportParams.IZnrWmsJobsgrp = inSapWmWmsJob.CodiceGruppoMissioni
            stImportParams.ISequence = inSapWmWmsJob.Sequence
            stImportParams.ISpras = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_check_jobs_group_last_seq/" & SapClient & "/zws_check_jobs_group_last_seq/zws_check_jobs_group_last_seq"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire OT
            objWSResponse = objWS.ZwmsCheckJobsGroupLastSeq(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                If (objWSResponse.ECheckOk = "X") Then
                    outCheckOk = True 'UNICO CASO DI FLAG SETTATO
                End If
            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (objWSResponse.ESuccess <> "Y") Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione") & "[ZWS_CHECK_JOBS_GROUP_LAST_SEQ]" & clsAppTranslation.GetSingleParameterValue(975, "", ". Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                Call_ZWS_CHECK_JOBS_GROUP_LAST_SEQ = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_CHECK_JOBS_OK_FOR_ACTION(ByVal inSapWmWmsJob As clsDataType.SapWmWmsJob, ByRef outCheckOk As Boolean, ByRef outWarningFlag As Boolean, ByRef outWarningDescription As String, ByVal inLingua As String, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_CHECK_JOBS_OK_FOR_ACTION.ZWS_CHECK_JOBS_OK_FOR_ACTION
        Dim stImportParams As New WS_CHECK_JOBS_OK_FOR_ACTION.ZwmsCheckJobsOkForAction
        Dim objWSResponse As New WS_CHECK_JOBS_OK_FOR_ACTION.ZwmsCheckJobsOkForActionResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_JOBS_OK_FOR_ACTION = 1 'INIT AT ERROR

            outCheckOk = False
            outWarningFlag = False
            outWarningDescription = ""

            If (Len(inSapWmWmsJob.NrWmsJobs) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(976, "", "Errore in esecuzione CHECK JOB ACTION. Parametro") & "[" & clsAppTranslation.GetSingleParameterValue(1086, "", "NrWmsJobs") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If Not APPLICAZIONE_WIN32 = "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inSapWmWmsJob.NrWmsJobs
            stImportParams.ISpras = inLingua

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_check_jobs_ok_for_action/" & SapClient & "/zws_check_jobs_ok_for_action/zws_check_jobs_ok_for_action"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmsCheckJobsOkForAction(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                If (objWSResponse.ECheckOk = "X") Then
                    outCheckOk = True
                End If
                If (objWSResponse.ECheckWarning = "X") Then
                    outWarningFlag = True
                End If
                outWarningDescription = objWSResponse.EWarningDescription
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_CHECK_JOBS_OK_FOR_ACTION")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inSapWmWmsJob.NrWmsJobs)
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Check_Ok") = "X") Then
                    outCheckOk = True
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Check_Warning") = "X") Then
                    outWarningFlag = True
                End If
                outWarningDescription = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Warning_Description")
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(977, "", "Missione NON OK per operazione richiesta.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                Else
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = objWSResponse.EErrorDescription
                End If
                Call_ZWS_CHECK_JOBS_OK_FOR_ACTION = RetCode 'caso di errore
            Else
                Call_ZWS_CHECK_JOBS_OK_FOR_ACTION = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_GET_JOB_GROUP_EXEC_INFO(ByVal inSapWmWmsJob As clsDataType.SapWmWmsJob, ByRef outExecutionOk As Boolean, ByRef outExecGroupFound As Boolean, ByRef outSapWmJobsGroupExecTab As clsDataType.SapWmJobsGroupExecTab, ByVal inLingua As String, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim Index As Long = 0

        Dim objWS As New WS_GET_JOB_GROUP_EXEC_INFO.ZWS_GET_JOB_GROUP_EXEC_INFO
        Dim stImportParams As New WS_GET_JOB_GROUP_EXEC_INFO.ZwmsGetJobGroupExecInfo
        Dim objWSResponse As New WS_GET_JOB_GROUP_EXEC_INFO.ZwmsGetJobGroupExecInfoResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_JOB_GROUP_EXEC_INFO = 1 'INIT AT ERROR

            outExecutionOk = False
            outExecGroupFound = False
            RetCode += clsSapUtility.ResetWmJobsGroupExecTabStruct(outSapWmJobsGroupExecTab)

            If (Len(inSapWmWmsJob.NrWmsJobs) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(978, "", "Errore in esecuzione GET GROUP EXEC. Parametro") & "[" & clsAppTranslation.GetSingleParameterValue(1086, "", "NrWmsJobs") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inSapWmWmsJob.NrWmsJobs
            stImportParams.IZnrWmsJobsgrp = inSapWmWmsJob.CodiceGruppoMissioni
            stImportParams.IZnrWmsGrpexec = inSapWmWmsJob.CodiceRaggruppoEsecuzione
            stImportParams.ISpras = inLingua

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_job_group_exec_info/" & SapClient & "/zws_get_job_group_exec_info/zws_get_job_group_exec_info"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmsGetJobGroupExecInfo(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outExecutionOk = True
                If (objWSResponse.EGroupexecFound = "Y") Then
                    outExecGroupFound = True
                End If
                If (outExecGroupFound = True) And (objWSResponse.EFoundrows > 1) And (objWSResponse.ETotalZqtapkOri > 0) Then
                    outSapWmJobsGroupExecTab.ExecGroupFound = True
                    outSapWmJobsGroupExecTab.QtaGroupTotaleDaPrelevare = objWSResponse.ETotalZqtapkOri

                    ReDim outSapWmJobsGroupExecTab.JobsGroupExecTab(objWSResponse.EFoundrows - 1)
                    For Index = 0 To objWSResponse.EFoundrows - 1
                        outSapWmJobsGroupExecTab.JobsGroupExecTab(Index).NrWmsJobs = objWSResponse.EJobGroupexecTab(Index).ZnrWmsJobs
                        outSapWmJobsGroupExecTab.JobsGroupExecTab(Index).UdmQtaTotaleDaPrelevare = objWSResponse.EJobGroupexecTab(Index).MeinsOri
                        outSapWmJobsGroupExecTab.JobsGroupExecTab(Index).QtaTotaleDaPrelevare = objWSResponse.EJobGroupexecTab(Index).ZqtapkOri
                        outSapWmJobsGroupExecTab.JobsGroupExecTab(Index).QtaTotaleDaPrelevareRimanente = objWSResponse.EJobGroupexecTab(Index).ZqtapkRimanente
                        outSapWmJobsGroupExecTab.JobsGroupExecTab(Index).QtaPrelevataInUdMBase = objWSResponse.EJobGroupexecTab(Index).ZqtaPrelBase
                        outSapWmJobsGroupExecTab.JobsGroupExecTab(Index).UdmQtaPrelevataInUdMBase = objWSResponse.EJobGroupexecTab(Index).UdmQtaprMeins
                        outSapWmJobsGroupExecTab.JobsGroupExecTab(Index).QtaPrelevataInUdMConsegna = objWSResponse.EJobGroupexecTab(Index).ZqtaPrelCons
                        outSapWmJobsGroupExecTab.JobsGroupExecTab(Index).UdmQtaPrelevataInUdMConsegna = objWSResponse.EJobGroupexecTab(Index).UdmQtaprCons
                        outSapWmJobsGroupExecTab.JobsGroupExecTab(Index).QuantitaConfermataOperatore = 0
                    Next
                End If

            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1059, "", "Errore in [GET_JOB_GROUP_EXEC].Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_JOB_GROUP_EXEC_INFO = RetCode 'caso di errore
            Else
                Call_ZWS_GET_JOB_GROUP_EXEC_INFO = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CHECK_LGPLA(ByVal inInfoRicercaUbicazione As clsDataType.SapWmUbicazione, ByRef outCheckOk As Boolean, ByRef outUbicazioneStruct As clsDataType.SapWmUbicazione, ByRef outDatiGiacenze() As clsDataType.SapWmGiacenza, ByRef outNrUDC As Long, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_CHECK_LGPLA.ZWS_MB_CHECK_LGPLA
        Dim stImportParams As New WS_MB_CHECK_LGPLA.ZwmMbCheckLgpla
        Dim objWSResponse As New WS_MB_CHECK_LGPLA.ZwmMbCheckLgplaResponse
        Dim WorkZstockMaterialInfo As WS_MB_CHECK_LGPLA.ZstockMaterialInfo
        Dim WorkGiacenza As clsDataType.SapWmGiacenza
        Dim WorkLoopIndex As Long = 0
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CHECK_LGPLA = 1 'INIT AT ERROR

            outNrUDC = 0
            outCheckOk = False

            If (Len(inInfoRicercaUbicazione.Ubicazione) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1122, "", " CHECK UBICAZIONE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1089, "", "Ubicazione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.ILgpla = inInfoRicercaUbicazione.Ubicazione
            stImportParams.ILgtyp = inInfoRicercaUbicazione.TipoMagazzino
            stImportParams.ILgnum = inInfoRicercaUbicazione.NumeroMagazzino

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_lgpla/" & SapClient & "/zws_mb_check_lgpla/zws_mb_check_lgpla"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbCheckLgpla(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK

                outNrUDC = objWSResponse.ENumUdc 'RITORNO NUMERO DI UDC

                'RITORNO DATI DELL'UBICAZIONE TROVATA
                outUbicazioneStruct.Divisione = objWSResponse.EWerks
                outUbicazioneStruct.Ubicazione = objWSResponse.EData.Lgpla
                outUbicazioneStruct.TipoMagazzino = objWSResponse.EData.Lgtyp
                outUbicazioneStruct.NumeroMagazzino = objWSResponse.EData.Lgnum
                outUbicazioneStruct.UnitaMagazzino = ""
                If (objWSResponse.EGestioneUmAttiva = "X") Then
                    outUbicazioneStruct.AbilitaUnitaMagazzino = True
                Else
                    outUbicazioneStruct.AbilitaUnitaMagazzino = False
                End If
                outUbicazioneStruct.NumeroUdcInUbicazione = objWSResponse.ENumUdc 'NUMERO DI UDC CONTENUTI NELL'UBICAZIONE

                If (objWSResponse.ETabStockMaterial.Length > 0) Then
                    ReDim outDatiGiacenze(objWSResponse.ETabStockMaterial.Length - 1)
                    For WorkLoopIndex = 0 To (objWSResponse.ETabStockMaterial.Length - 1)

                        WorkGiacenza.UbicazioneInfo.TipoUnitaMagazzino = objWSResponse.ETabStockMaterial(WorkLoopIndex).Letyp
                        WorkGiacenza.UbicazioneInfo.NumeroMagazzino = objWSResponse.ETabStockMaterial(WorkLoopIndex).Lgnum
                        WorkGiacenza.MagazzinoLogico = objWSResponse.ETabStockMaterial(WorkLoopIndex).Lgort
                        WorkGiacenza.UbicazioneInfo.Ubicazione = objWSResponse.ETabStockMaterial(WorkLoopIndex).Lgpla
                        WorkGiacenza.UbicazioneInfo.TipoMagazzino = objWSResponse.ETabStockMaterial(WorkLoopIndex).Lgtyp
                        WorkGiacenza.UbicazioneInfo.Divisione = objWSResponse.ETabStockMaterial(WorkLoopIndex).Werks
                        WorkGiacenza.UbicazioneInfo.CapacitaUdcUbicazione = objWSResponse.ETabStockMaterial(WorkLoopIndex).LagpLkapv
                        WorkGiacenza.CodiceMateriale = objWSResponse.ETabStockMaterial(WorkLoopIndex).Matnr
                        WorkGiacenza.Partita = objWSResponse.ETabStockMaterial(WorkLoopIndex).Charg
                        WorkGiacenza.DescrizioneMateriale = objWSResponse.ETabStockMaterial(WorkLoopIndex).Maktg
                        WorkGiacenza.UnitaDiMisuraBase = objWSResponse.ETabStockMaterial(WorkLoopIndex).Meins
                        WorkGiacenza.UnitaDiMisuraAcquisizione = objWSResponse.ETabStockMaterial(WorkLoopIndex).Vrkme
                        WorkGiacenza.QtaTotaleLquaDaPrelevare = objWSResponse.ETabStockMaterial(WorkLoopIndex).Ausme
                        WorkGiacenza.QtaTotaleLquaDaPrelUdMAcq = objWSResponse.ETabStockMaterial(WorkLoopIndex).AusmeCons
                        WorkGiacenza.QtaTotaleLquaDaImmagazzinare = objWSResponse.ETabStockMaterial(WorkLoopIndex).Einme
                        WorkGiacenza.QtaTotaleLquaDaImmaUdMAcq = objWSResponse.ETabStockMaterial(WorkLoopIndex).EinmeCons
                        WorkGiacenza.QtaTotaleLquaInStock = objWSResponse.ETabStockMaterial(WorkLoopIndex).Gesme
                        WorkGiacenza.QtaTotaleLquaInStockUdMAcq = objWSResponse.ETabStockMaterial(WorkLoopIndex).GesmeCons
                        WorkGiacenza.QuantitaInStockSfusi = objWSResponse.ETabStockMaterial(WorkLoopIndex).GesmePz
                        WorkGiacenza.QtaTotaleLquaDisponibile = objWSResponse.ETabStockMaterial(WorkLoopIndex).Verme
                        WorkGiacenza.QtaTotaleLquaDispoUdMAcq = objWSResponse.ETabStockMaterial(WorkLoopIndex).VermeCons
                        WorkGiacenza.QtaTotaleDispoSfusi = objWSResponse.ETabStockMaterial(WorkLoopIndex).VermePz

                        outDatiGiacenze(WorkLoopIndex) = WorkGiacenza
                    Next
                End If
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure

            Dim rfcFunction_ZWMS_UBI_SPECIAL As IRfcStructure

            
            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_CHECK_LGPLA")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse())
            rfcFunction.SetValue("I_LGPLA", inInfoRicercaUbicazione.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoRicercaUbicazione.TipoMagazzino)
            rfcFunction.SetValue("I_LGNUM", inInfoRicercaUbicazione.NumeroMagazzino)

            If (inInfoRicercaUbicazione.FlagCheckLocationInfo.FlagCHECK_LOC_OCCUPATION = True) Then
                rfcFunction.SetValue("I_CHECK_LOC_OCCUPATION", "X")
            End If

            If (inInfoRicercaUbicazione.FlagCheckLocationInfo.FlagCHECK_MIX_LOCATION = True) Then
                rfcFunction.SetValue("I_CHECK_MIX_LOCATION", "X")
                rfcFunction.SetValue("I_CHECK_MIX_MATERIAL", inInfoRicercaUbicazione.FlagCheckLocationInfo.FlagCHECK_MIX_MATERIAL_CODE)
                rfcFunction.SetValue("I_CHECK_MIX_CHARG", inInfoRicercaUbicazione.FlagCheckLocationInfo.FlagCHECK_MIX_CHARG)
            End If

            If (inInfoRicercaUbicazione.FlagCheckLocationInfo.Quantity > 0) Then
                rfcFunction.SetValue("I_QTA_TO_CONFIRM", inInfoRicercaUbicazione.FlagCheckLocationInfo.Quantity)
                rfcFunction.SetValue("I_MEINS", inInfoRicercaUbicazione.FlagCheckLocationInfo.UdMQuantity)
            End If


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                If (rfcFunction.GetObject("E_FOUNDROWS") > 0) And (rfcFunction.GetObject("E_Check_Ok").ToString = "Y") Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If

                outNrUDC = rfcFunction.GetElementMetadata("E_NUM_UDC").NucLength 'RITORNO NUMERO DI UDC

                'RITORNO DATI DELL'UBICAZIONE TROVATA
                outUbicazioneStruct.Divisione = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_WERKS")

                rfcRow = rfcFunction.GetObject("E_DATA") 'clsSapUtility.GetRFCParameterToString(rfcFunction, "E_DATA")

                outUbicazioneStruct.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                outUbicazioneStruct.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                outUbicazioneStruct.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")

                outUbicazioneStruct.UnitaMagazzino = ""

                If (rfcFunction.GetObject("E_GESTIONE_UM_ATTIVA") = "X") Then
                    outUbicazioneStruct.AbilitaUnitaMagazzino = True
                Else
                    outUbicazioneStruct.AbilitaUnitaMagazzino = False
                End If

                If (rfcFunction.GetObject("E_FINAL_LOCATION") = "X") Then
                    outUbicazioneStruct.FlagFinalWarehouseLocation = True
                Else
                    outUbicazioneStruct.FlagFinalWarehouseLocation = False
                End If
                If (rfcFunction.GetObject("E_LOC_DIFF_MATERIAL") = "X") Then
                    outUbicazioneStruct.FlagLocationWithDifferentMaterialCode = True
                Else
                    outUbicazioneStruct.FlagLocationWithDifferentMaterialCode = False
                End If
                If (rfcFunction.GetObject("E_LOC_DIFF_CHARG") = "X") Then
                    outUbicazioneStruct.FlagLocationWithDifferentBatch = True
                Else
                    outUbicazioneStruct.FlagLocationWithDifferentBatch = False
                End If
                If (rfcFunction.GetObject("E_LOC_ALLOWMXITEM") = "X") Then
                    outUbicazioneStruct.FlagLocationAllowMixedMaterialCode = True
                Else
                    outUbicazioneStruct.FlagLocationAllowMixedMaterialCode = False
                End If
                If (rfcFunction.GetObject("E_LOC_ALLOWMXBATCH") = "X") Then
                    outUbicazioneStruct.FlagLocationAllowMixedBatch = True
                Else
                    outUbicazioneStruct.FlagLocationAllowMixedBatch = False
                End If
                If (rfcFunction.GetObject("E_LOCATION_FULL") = "X") Then
                    outUbicazioneStruct.FlagLocationFull = True
                Else
                    outUbicazioneStruct.FlagLocationFull = False
                End If

                outUbicazioneStruct.NumeroUdcInUbicazione = clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_NUM_UDC")

                rfcTable = rfcFunction.GetTable("E_TAB_STOCK_MATERIAL")


                'GESTIONE FLAG PER RICONOSCERE SE UM E' IN LOCAZIONE STAGING DOOR
                rfcFunction_ZWMS_UBI_SPECIAL = rfcFunction.GetStructure("E_ZWMS_UBI_SPECIAL")

                'GESTIONE FLAG PER RICONOSCERE SE UM E' IN LOCAZIONE PARTICOLARI
                If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_DOOR") = "X") Then
                    outUbicazioneStruct.FlagLocationDoor = True
                Else
                    outUbicazioneStruct.FlagLocationDoor = False
                End If

                If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_EQUIPMENT") = "X") Then
                    outUbicazioneStruct.FlagLocationEquipment = True
                Else
                    outUbicazioneStruct.FlagLocationEquipment = False
                End If

                If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_OPERATOR") = "X") Then
                    outUbicazioneStruct.FlagLocationOperator = True
                Else
                    outUbicazioneStruct.FlagLocationOperator = False
                End If

                If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_STAG_DOOR") = "X") Then
                    outUbicazioneStruct.FlagLocationStagingDoor = True
                Else
                    outUbicazioneStruct.FlagLocationStagingDoor = False
                End If

                If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_WRAP") = "X") Then
                    outUbicazioneStruct.FlagLocationWrapping = True
                Else
                    outUbicazioneStruct.FlagLocationWrapping = False
                End If

                If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_P_D") = "X") Then
                    outUbicazioneStruct.FlagLocation_P_D = True
                Else
                    outUbicazioneStruct.FlagLocation_P_D = False
                End If



                'If (rfcTable.ElementCount > 0) Then
                If (rfcTable.RowCount > 0) Then

                    'ReDim outDatiGiacenze(rfcTable.ElementCount - 1)
                    ReDim outDatiGiacenze(rfcTable.RowCount - 1)

                    'For WorkLoopIndex = 0 To (rfcTable.ElementCount - 1)
                    For Each rfcRow In rfcTable

                        WorkGiacenza.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Letyp")
                        WorkGiacenza.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                        WorkGiacenza.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgort")
                        WorkGiacenza.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                        WorkGiacenza.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                        WorkGiacenza.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Werks")
                        WorkGiacenza.UbicazioneInfo.CapacitaUdcUbicazione = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Lagp_Lkapv")
                        WorkGiacenza.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "Matnr")
                        WorkGiacenza.Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "Charg")
                        WorkGiacenza.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "Maktg")
                        WorkGiacenza.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "Meins")
                        WorkGiacenza.UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Vrkme")
                        WorkGiacenza.QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Ausme")
                        WorkGiacenza.QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Ausme_Cons")
                        WorkGiacenza.QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Einme")
                        WorkGiacenza.QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Einme_Cons")
                        WorkGiacenza.QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme")
                        WorkGiacenza.QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme_Cons")
                        WorkGiacenza.QtaTotaleInStockInUdmPZ = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme_Pz")
                        WorkGiacenza.QtaTotaleInStockSfusi = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme_SF")
                        WorkGiacenza.QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme")
                        WorkGiacenza.QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme_Cons")
                        WorkGiacenza.QtaTotaleDispoInUdmPZ = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme_Pz")
                        WorkGiacenza.QtaTotaleDispoSfusi = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme_SF")

                        outDatiGiacenze(WorkLoopIndex) = WorkGiacenza

                    Next
                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1060, "", "Ubicazione non definita.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CHECK_LGPLA = RetCode 'caso di errore
            Else
                Call_ZWS_MB_CHECK_LGPLA = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CHECK_DOCMAT(ByVal inInfoRicercaDocMat As clsDataType.SapWmDocumentoMaterialeFull, ByRef outCheckOk As Boolean, ByRef outDocumentoMateriale As clsDataType.SapWmDocumentoMaterialeFull, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_CHECK_DOCMAT.ZWS_MB_CHECK_DOCMAT
        Dim stImportParams As New WS_MB_CHECK_DOCMAT.ZwmMbCheckDocmat
        Dim objWSResponse As New WS_MB_CHECK_DOCMAT.ZwmMbCheckDocmatResponse
        Dim SingolaPosizioneSAPRec As WS_MB_CHECK_DOCMAT.Mseg

        Dim Index As Long
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CHECK_DOCMAT = 1 'INIT AT ERROR

            If (Len(inInfoRicercaDocMat.NumeroDocumento) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1121, "", " CHECK DOCMAT. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1075, "", "NumeroDocumento") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoRicercaDocMat.AnnoEsercizio) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1121, "", " CHECK DOCMAT. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1076, "", "AnnoEsercizio") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IMblnr = inInfoRicercaDocMat.NumeroDocumento
            stImportParams.IMjahr = inInfoRicercaDocMat.AnnoEsercizio
            stImportParams.IZeile = inInfoRicercaDocMat.PosizioneDocumento

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_docmat/" & SapClient & "/zws_mb_check_docmat/zws_mb_check_docmat"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmMbCheckDocmat(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK
                'RITORNO DATI DELL'UBICAZIONE TROVATA
                outDocumentoMateriale.AnnoEsercizio = objWSResponse.EDataHeader.Mjahr
                outDocumentoMateriale.NumeroDocumento = objWSResponse.EDataHeader.Mblnr


                'SALVO LE POSIZIONI DOCUMENTO MATERIALE (RECUPERATE IN BASE AI FILTRI)
                Dim wkAppoggio As New StructGenericTableMSEG
                ReDim outDocumentoMateriale.PosizioniInfo(objWSResponse.EFoundrows - 1)
                For Index = 0 To objWSResponse.EFoundrows - 1
                    SingolaPosizioneSAPRec = objWSResponse.ETabPosizioni(Index)
                    wkAppoggio.MSEG_Rec = SingolaPosizioneSAPRec
                    RetCode = clsSapUtility.TrasfDocMatPosSapStruct(wkAppoggio, outDocumentoMateriale.PosizioniInfo(Index))
                Next

                If (Val(inInfoRicercaDocMat.PosizioneDocumento) > 0) Then 'SE HO PASSATO UNA POSIZIONE HA SENSO RITORNARLA ALTRIMENTI RAGIONO SU TUTTE LE POSIZIONI
                    outDocumentoMateriale.PosizioneInfo = outDocumentoMateriale.PosizioniInfo(0)
                    outDocumentoMateriale.PosizioneDocumento = outDocumentoMateriale.PosizioniInfo(0).PosizioneDocumento
                End If

            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1061, "", "Doc.Meteriale non definito.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CHECK_DOCMAT = RetCode
            Else
                Call_ZWS_MB_CHECK_DOCMAT = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_DOCMAT(ByVal inInfoRicercaDocMat As clsDataType.SapWmDocumentoMaterialeFull, ByRef outGetOk As Boolean, ByRef outDocumentoMateriale As clsDataType.SapWmDocumentoMaterialeFull, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_GET_DOCMAT.ZWS_MB_GET_DOCMAT
        Dim stImportParams As New WS_MB_GET_DOCMAT.ZwmMbGetDocmat
        Dim objWSResponse As New WS_MB_GET_DOCMAT.ZwmMbGetDocmatResponse
        Dim SingolaPosizioneSAPRec As WS_MB_GET_DOCMAT.ZmsegInfo
        Dim WorkSingolaDocMatPos As clsDataType.SapWmDocumentoMaterialePos
        Dim Index As Long
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_DOCMAT = 1 'INIT AT ERROR

            outGetOk = False

            If (Len(inInfoRicercaDocMat.NumeroDocumento) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1121, "", " CHECK DOCMAT. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1075, "", "NumeroDocumento") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoRicercaDocMat.AnnoEsercizio) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1121, "", " CHECK DOCMAT. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1076, "", "AnnoEsercizio") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            ''IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            'Dim ECheckOk As String = ""
            'Dim EDataHeader As WS_MB_GET_DOCMAT.Mkpf
            'Dim ETabPosizioni() As WS_MB_GET_DOCMAT.ZmsegInfo

            ''>>>> IMPOSTO LE CREDENZIALI DELLO USER
            'objNetworkCredential.UserName = UserRfcWs
            'objNetworkCredential.Password = PswUserRfcWs
            'objWS.Credentials = objNetworkCredential

            ''>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            'objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_docmat/" & SapClient & "/zws_mb_get_docmat/zws_mb_get_docmat"


            'Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            ''chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            'ECheckOk = objWS.ZwmMbGetDocmat(Nothing, Nothing, DefaultSapUserLanguage, inInfoRicercaDocMat.NumeroDocumento, inInfoRicercaDocMat.AnnoEsercizio, Nothing, inInfoRicercaDocMat.PosizioneDocumento, EDataHeader, WSRetErrorCode, WSRetErrorDescription, WSRetErrorSubrc, WSRetFoundRows, WSRetSuccess, ETabPosizioni)
            'Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            'If (WSRetSuccess = "Y") And (WSRetFoundRows > 0) And (ECheckOk = "Y") Then
            '    outGetOk = True 'UNICO CASO DI CHECK OK
            '    'RITORNO DATI DELL'UBICAZIONE TROVATA
            '    outDocumentoMateriale.AnnoEsercizio = EDataHeader.Mjahr
            '    outDocumentoMateriale.NumeroDocumento = EDataHeader.Mblnr


            '    'SALVO LE POSIZIONI DOCUMENTO MATERIALE (RECUPERATE IN BASE AI FILTRI)
            '    ReDim outDocumentoMateriale.PosizioniInfo(0) 'RESETTO VECCHI DATI
            '    ReDim outDocumentoMateriale.PosizioniInfo(WSRetFoundRows - 1)
            '    For Index = 0 To WSRetFoundRows - 1
            '        SingolaPosizioneSAPRec = ETabPosizioni(Index)
            '        clsSapUtility.ResetDocumentoMaterialePosStruct(WorkSingolaDocMatPos)
            '        'RECUPERO TUTTI I DATI DEL DOCUMENTO MATERIALE E QUELLI AGGIUNTI
            '        RetCode = TrasfDocMatZmsegInfoPosToSapStruct(SingolaPosizioneSAPRec, WorkSingolaDocMatPos)
            '        outDocumentoMateriale.PosizioniInfo(Index) = WorkSingolaDocMatPos
            '    Next

            '    If (Val(inInfoRicercaDocMat.PosizioneDocumento) > 0) Then 'SE HO PASSATO UNA POSIZIONE HA SENSO RITORNARLA ALTRIMENTI RAGIONO SU TUTTE LE POSIZIONI
            '        outDocumentoMateriale.PosizioneInfo = outDocumentoMateriale.PosizioniInfo(0)
            '        outDocumentoMateriale.PosizioneDocumento = outDocumentoMateriale.PosizioniInfo(0).PosizioneDocumento
            '    End If

            'End If


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IMblnr = inInfoRicercaDocMat.NumeroDocumento
            stImportParams.IMjahr = inInfoRicercaDocMat.AnnoEsercizio
            stImportParams.IZeile = inInfoRicercaDocMat.PosizioneDocumento

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_docmat/" & SapClient & "/zws_mb_get_docmat/zws_mb_get_docmat"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmMbGetDocmat(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                'RITORNO DATI DELL'UBICAZIONE TROVATA
                outDocumentoMateriale.AnnoEsercizio = objWSResponse.EDataHeader.Mjahr
                outDocumentoMateriale.NumeroDocumento = objWSResponse.EDataHeader.Mblnr


                'SALVO LE POSIZIONI DOCUMENTO MATERIALE (RECUPERATE IN BASE AI FILTRI)
                ReDim outDocumentoMateriale.PosizioniInfo(0) 'RESETTO VECCHI DATI
                ReDim outDocumentoMateriale.PosizioniInfo(objWSResponse.EFoundrows - 1)
                For Index = 0 To objWSResponse.EFoundrows - 1
                    SingolaPosizioneSAPRec = objWSResponse.ETabPosizioni(Index)
                    clsSapUtility.ResetDocumentoMaterialePosStruct(WorkSingolaDocMatPos)
                    'RECUPERO TUTTI I DATI DEL DOCUMENTO MATERIALE E QUELLI AGGIUNTI
                    RetCode = clsSapUtility.TrasfDocMatZmsegInfoPosToSapStruct(SingolaPosizioneSAPRec, WorkSingolaDocMatPos)
                    outDocumentoMateriale.PosizioniInfo(Index) = WorkSingolaDocMatPos
                Next

                If (Val(inInfoRicercaDocMat.PosizioneDocumento) > 0) Then 'SE HO PASSATO UNA POSIZIONE HA SENSO RITORNARLA ALTRIMENTI RAGIONO SU TUTTE LE POSIZIONI
                    outDocumentoMateriale.PosizioneInfo = outDocumentoMateriale.PosizioniInfo(0)
                    outDocumentoMateriale.PosizioneDocumento = outDocumentoMateriale.PosizioniInfo(0).PosizioneDocumento
                End If

            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1061, "", "Doc.Meteriale non definito.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_GET_DOCMAT = RetCode
            Else
                Call_ZWS_MB_GET_DOCMAT = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CHECK_ORDINE_VENDITA(ByVal inRicercaOrdineVendita As clsDataType.SapOrdineVendita, ByRef outCheckOk As Boolean, ByRef outOrdineVenditaTestata As clsDataType.SapOrdineVendita, ByRef outOrdineVenditaPosizioni() As clsDataType.SapOrdineVendita, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim Index As Long

        Dim objWS As New WS_MB_CHECK_ORDINE_VENDITA.ZWS_MB_CHECK_ORDINE_VENDITA
        Dim stImportParams As New WS_MB_CHECK_ORDINE_VENDITA.ZwmMbCheckOrdineVendita
        Dim objWSResponse As New WS_MB_CHECK_ORDINE_VENDITA.ZwmMbCheckOrdineVenditaResponse
        Dim SingolaPosizioneSAPRec As New StructGenericTableVBAP

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CHECK_ORDINE_VENDITA = 1 'INIT AT ERROR

            If (Len(inRicercaOrdineVendita.NumeroOrdineVendita) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1120, "", " CHECK ORD.VENDITA. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1077, "", "NumeroOrdineVendita") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IVbeln = inRicercaOrdineVendita.NumeroOrdineVendita
            stImportParams.IPosnr = inRicercaOrdineVendita.PosizioneOrdineVendita
            stImportParams.ILanguage = clsUser.SapWmsUser.LANGUAGE

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_ordine_vendita/" & SapClient & "/zws_mb_check_ordine_vendita/zws_mb_check_ordine_vendita"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmMbCheckOrdineVendita(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK
                'RITORNO DATI DEL DOCUMENTO TROVATO
                outOrdineVenditaTestata.NumeroOrdineVendita = objWSResponse.EDataHeader.Vbeln
                outOrdineVenditaTestata.PosizioneOrdineVendita = ""
                outOrdineVenditaTestata.TipoOrdineVendita = objWSResponse.EDataHeader.Auart


                'SALVO LE POSIZIONI DOCUMENTO MATERIALE (RECUPERATE IN BASE AI FILTRI)
                ReDim outOrdineVenditaPosizioni(objWSResponse.EFoundrows - 1)
                For Index = 0 To objWSResponse.EFoundrows - 1
                    SingolaPosizioneSAPRec.VBAP_Rec = objWSResponse.ETabPosizioni(Index)
                    RetCode = clsSapUtility.TrasfOrdineVenditaSapStruct(SingolaPosizioneSAPRec, outOrdineVenditaPosizioni(Index))
                Next

                If (Val(inRicercaOrdineVendita.PosizioneOrdineVendita) > 0) Then 'SE HO PASSATO UNA POSIZIONE RITORNO ANCHE I DATI SPECIFICI
                    ' ??? VEDERE SE SERVE IN FUTURO
                    'outDocumentoMateriale.PosizioneInfo = outDocumentoMateriale.PosizioniInfo(0)
                    'outDocumentoMateriale.PosizioneDocumento = outDocumentoMateriale.PosizioniInfo(0).PosizioneDocumento
                End If

            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1061, "", "Doc.Meteriale non definito.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CHECK_ORDINE_VENDITA = RetCode
            Else
                Call_ZWS_MB_CHECK_ORDINE_VENDITA = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CHECK_STOCK_GIACENZA(ByRef inInfoStock As clsDataType.SapWmGiacenza, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outMatnrOk As Boolean, ByRef outDatiGiacenza As clsDataType.SapWmGiacenza, ByRef outSapWmGiacenzeFree() As clsDataType.SapWmGiacenza, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean, ByRef outCatchErrorHappened As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim SingolaGiacenzaSAPRec As New StructGenericTableLQUA
        Dim objWS As New WS_MB_CHECK_STOCK_GIACENZA.ZWS_MB_CHECK_STOCK_GIACENZA
        Dim stImportParams As New WS_MB_CHECK_STOCK_GIACENZA.ZwmMbCheckStockGiacenza
        Dim objWSResponse As New WS_MB_CHECK_STOCK_GIACENZA.ZwmMbCheckStockGiacenzaResponse

        'Dim rfcSingolaGiacenzaSAPRec As New rfcStructGenericTableLQUA


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CHECK_STOCK_GIACENZA = 1 'INIT AT ERROR

            outCatchErrorHappened = False
            outCheckOk = False
            outMatnrOk = False

            If (Len(inInfoStock.CodiceMateriale) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1078, "", "CodiceMateriale") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoStock.UbicazioneInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoStock.UbicazioneInfo.TipoMagazzino) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then

 
            stImportParams.ILgpla = inInfoStock.UbicazioneInfo.Ubicazione
            stImportParams.ILgtyp = inInfoStock.UbicazioneInfo.TipoMagazzino
            stImportParams.ILgnum = inInfoStock.UbicazioneInfo.NumeroMagazzino
            stImportParams.ILenum = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino)
            stImportParams.IMatnr = inInfoStock.CodiceMateriale
            stImportParams.ICharg = inInfoStock.Partita
            If (inInfoStock.QtaJobRichiestaInUdmOriginale > 0) Then
                stImportParams.IQtaRichiesta = inInfoStock.QtaJobRichiestaInUdmOriginale
                stImportParams.IMeins = inInfoStock.UnitaDiMisuraBase
            End If
            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_stock_giacenza/" & SapClient & "/zws_mb_check_stock_giacenza/zws_mb_check_stock_giacenza"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbCheckStockGiacenza(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                If (clsUtility.IsStringValid(objWSResponse.EDataMara.Matnr, True) = True) Then
                    outMatnrOk = True
                End If
                If ((objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y")) Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If
                'RITORNO DATI DELLA GIACENZA TROVATA/E
                If (outDatiGiacenza.CodiceMateriale = "") Then
                    outDatiGiacenza.CodiceMateriale = clsSapUtility.FormattaStringaCodiceMateriale(objWSResponse.EDataMara.Matnr)
                End If
                If (outDatiGiacenza.Partita = "") Then
                    outDatiGiacenza.Partita = inInfoStock.Partita
                End If
                outDatiGiacenza.DescrizioneMateriale = UCase(objWSResponse.ETextMaktg)
                outDatiGiacenza.QtaTotaleLquaInStock = objWSResponse.EZwmStockInfoRec.QtaTotPresenteBase
                outDatiGiacenza.QtaTotaleLquaDisponibile = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileBase
                outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = objWSResponse.EZwmStockInfoRec.QtaTotDaImmagazBase
                outDatiGiacenza.QtaTotaleLquaDaPrelevare = objWSResponse.EZwmStockInfoRec.QtaTotDaPrelevareBase
                outDatiGiacenza.UnitaDiMisuraBase = objWSResponse.EZwmStockInfoRec.Meins
                outDatiGiacenza.QtaTotaleLquaInStockUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotPresenteCons
                outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileCons
                outDatiGiacenza.QtaTotaleLquaDaImmaUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDaImmagazCons
                outDatiGiacenza.QtaTotaleLquaDaPrelUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDaPrelevareCons
                outDatiGiacenza.UnitaDiMisuraAcquisizione = objWSResponse.EZwmStockInfoRec.Vrkme
                If (objWSResponse.ECheckPickAllSu = "X") Then
                    outDatiGiacenza.PickSUCompleto = True
                Else
                    outDatiGiacenza.PickSUCompleto = False
                End If
                If (outDatiGiacenza.UnitaDiMisuraAcquisizione = "") Then
                    outDatiGiacenza.UnitaDiMisuraAcquisizione = outDatiGiacenza.UnitaDiMisuraBase
                    If (outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = 0) Then
                        outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = outDatiGiacenza.QtaTotaleLquaDisponibile
                    End If
                End If

                'SE HO TROVATO LA GIACENZE LE RITORNO
                If (objWSResponse.EFoundrows > 0) Then
                    outDatiGiacenza.UbicazioneInfo.Divisione = objWSResponse.ELquaTabFree(0).Lqua.Werks
                    outDatiGiacenza.UbicazioneInfo.NumeroMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgnum
                    outDatiGiacenza.UbicazioneInfo.TipoMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgtyp
                    outDatiGiacenza.UbicazioneInfo.Ubicazione = objWSResponse.ELquaTabFree(0).Lqua.Lgpla
                    outDatiGiacenza.UbicazioneInfo.UnitaMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lenum
                    outDatiGiacenza.CdStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sobkz
                    outDatiGiacenza.NumeroStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sonum
                    outDatiGiacenza.TipoStock = objWSResponse.ELquaTabFree(0).Lqua.Bestq
                    outDatiGiacenza.NumeroFabbisognoDiTrasporto = objWSResponse.ELquaTabFree(0).Lqua.Tbnum
                    outDatiGiacenza.MagazzinoLogico = objWSResponse.ELquaTabFree(0).Lqua.Lgort
                    ReDim outSapWmGiacenzeFree(objWSResponse.EFoundrows - 1)
                    For Index = 0 To objWSResponse.EFoundrows - 1
                        SingolaGiacenzaSAPRec.LQUA_CHECK_Rec = objWSResponse.ELquaTabFree(Index).Lqua
                        RetCode = clsSapUtility.TrasfGiacenzaSapStruct(SingolaGiacenzaSAPRec, outSapWmGiacenzeFree(Index))
                    Next
                End If

                '>>> RITORNO DATI VARIANTE IMBALLO
                RetCode = clsSapUtility.ResetVarianteImballoStruct(outDatiGiacenza.VarianteImballo)
                RetCode = clsSapUtility.TrasfVarianteImballoSapStruct(objWSResponse.EVarianteImballo, outDatiGiacenza.VarianteImballo, inShowMessageBox)
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_CHECK_STOCK_GIACENZA")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_WERKS", inInfoStock.UbicazioneInfo.Divisione)
            rfcFunction.SetValue("I_LGPLA", inInfoStock.UbicazioneInfo.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoStock.UbicazioneInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LGNUM", inInfoStock.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_LENUM", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino))
            rfcFunction.SetValue("I_MATNR", inInfoStock.CodiceMateriale)
            rfcFunction.SetValue("I_CHARG", inInfoStock.Partita)
            rfcFunction.SetValue("I_MEINS", inInfoStock.UnitaDiMisuraBase)
            If (inInfoStock.QtaJobRichiestaInUdmOriginale >= 0) Then
                rfcFunction.SetValue("I_QTA_RICHIESTA", inInfoStock.QtaJobRichiestaInUdmOriginale)
            End If
            If (inInfoStock.QuantitaConfermataSfusiOperatore >= 0) Then
                rfcFunction.SetValue("I_QTA_RICHIESTA_SFUSI", inInfoStock.QuantitaConfermataSfusiOperatore)
            End If

            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outMatnrOk = True


                If (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_OK") = "Y") Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK


                    rfcTable = rfcFunction.GetTable("E_LQUA_TAB_FREE")
                    Dim Out_rfcStruct_LQUA As IRfcStructure = rfcTable.GetStructure("LQUA")
                    Dim Out_rfcStruct_E_DATA_MARA As IRfcStructure = rfcFunction.GetStructure("E_DATA_MARA")
                    Dim Out_rfcStruct_E_ZWM_STOCK_INFO_REC As IRfcStructure = rfcFunction.GetStructure("E_ZWM_STOCK_INFO_REC")

                    Dim Out_rfcStruct_E_VARIANTE_IMBALLO As IRfcStructure = rfcFunction.GetStructure("E_VARIANTE_IMBALLO")

                    'RITORNO DATI DELLA GIACENZA TROVATA/E
                    If (outDatiGiacenza.CodiceMateriale = "") Then
                        outDatiGiacenza.CodiceMateriale = clsSapUtility.FormattaStringaCodiceMateriale(Out_rfcStruct_E_DATA_MARA.Item("MATNR").GetString)
                    End If
                    If (outDatiGiacenza.Partita = "") Then
                        outDatiGiacenza.Partita = inInfoStock.Partita
                    End If
                    outDatiGiacenza.DescrizioneMateriale = UCase(rfcFunction.GetObject("E_TEXT_MAKTG"))
                    outDatiGiacenza.QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_PRESENTE_BASE")
                    outDatiGiacenza.QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DISPONIBILE_BASE")
                    outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_IMMAGAZ_BASE")
                    outDatiGiacenza.QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_PRELEVARE_BASE")
                    outDatiGiacenza.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "MEINS")
                    outDatiGiacenza.QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_PRESENTE_CONS")
                    outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DISPONIBILE_CONS")
                    outDatiGiacenza.QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_IMMAGAZ_CONS")
                    outDatiGiacenza.QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_PRELEVARE_CONS")
                    outDatiGiacenza.UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "VRKME")

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_PICK_ALL_SU") = "X") Then
                        outDatiGiacenza.PickSUCompleto = True
                    Else
                        outDatiGiacenza.PickSUCompleto = False
                    End If

                    If (outDatiGiacenza.UnitaDiMisuraAcquisizione = "") Then
                        outDatiGiacenza.UnitaDiMisuraAcquisizione = outDatiGiacenza.UnitaDiMisuraBase
                        If (outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = 0) Then
                            outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = outDatiGiacenza.QtaTotaleLquaDisponibile
                        End If
                    End If

                    If (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) Then

                        outDatiGiacenza.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "WERKS")
                        outDatiGiacenza.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LGNUM")
                        outDatiGiacenza.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LGTYP")
                        outDatiGiacenza.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LGPLA")
                        outDatiGiacenza.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LENUM")
                        outDatiGiacenza.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "SOBKZ")
                        outDatiGiacenza.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "SONUM")
                        outDatiGiacenza.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "BESTQ")
                        outDatiGiacenza.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_LQUA, "TBNUM")
                        outDatiGiacenza.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LGORT")

                        'ReDim outSapWmGiacenzeFree(rfcFunction.GetObject("E_Foundrows") - 1)
                        'For Index = 0 To rfcFunction.GetObject("E_Foundrows") - 1
                        '    SingolaGiacenzaSAPRec.LQUA_CHECK_Rec = objWSResponse.ELquaTabFree(Index).Lqua
                        '    RetCode = clsSapUtility.TrasfGiacenzaSapStruct(SingolaGiacenzaSAPRec, outSapWmGiacenzeFree(Index))
                        'Next

                        ReDim outSapWmGiacenzeFree(rfcFunction.GetObject("E_Foundrows") - 1)
                        For Index = 0 To rfcFunction.GetObject("E_Foundrows") - 1

                            outSapWmGiacenzeFree(Index).CodiceMateriale = rfcTable(0).GetStructure(0).Item("Matnr").GetString
                            outSapWmGiacenzeFree(Index).Partita = rfcTable(0).GetStructure(0).Item("Charg").GetString
                            outSapWmGiacenzeFree(Index).DescrizioneMateriale = ""
                            outSapWmGiacenzeFree(Index).QtaTotaleLquaInStock = rfcTable(0).GetStructure(0).Item("Gesme").GetDouble
                            outSapWmGiacenzeFree(Index).QtaTotaleLquaDisponibile = rfcTable(0).GetStructure(0).Item("Verme").GetDouble
                            outSapWmGiacenzeFree(Index).QtaTotaleLquaDaImmagazzinare = rfcTable(0).GetStructure(0).Item("Einme").GetDouble
                            outSapWmGiacenzeFree(Index).QtaTotaleLquaDaPrelevare = rfcTable(0).GetStructure(0).Item("Ausme").GetDouble
                            outSapWmGiacenzeFree(Index).UnitaDiMisuraBase = rfcTable(0).GetStructure(0).Item("Meins").GetString
                            outSapWmGiacenzeFree(Index).UbicazioneInfo.Divisione = rfcTable(0).GetStructure(0).Item("Werks").GetString
                            outSapWmGiacenzeFree(Index).UbicazioneInfo.NumeroMagazzino = rfcTable(0).GetStructure(0).Item("Lgnum").GetString
                            outSapWmGiacenzeFree(Index).UbicazioneInfo.TipoMagazzino = rfcTable(0).GetStructure(0).Item("Lgtyp").GetString
                            outSapWmGiacenzeFree(Index).UbicazioneInfo.Ubicazione = rfcTable(0).GetStructure(0).Item("Lgpla").GetString
                            outSapWmGiacenzeFree(Index).UbicazioneInfo.UnitaMagazzino = rfcTable(0).GetStructure(0).Item("Lenum").GetString
                            outSapWmGiacenzeFree(Index).CdStockSpeciale = rfcTable(0).GetStructure(0).Item("Sobkz").GetString
                            outSapWmGiacenzeFree(Index).NumeroStockSpeciale = rfcTable(0).GetStructure(0).Item("Sonum").GetString
                            outSapWmGiacenzeFree(Index).TipoStock = rfcTable(0).GetStructure(0).Item("Bestq").GetString
                            outSapWmGiacenzeFree(Index).NumeroFabbisognoDiTrasporto = rfcTable(0).GetStructure(0).Item("Tbnum").GetLong

                        Next


                        '>>> RITORNO DATI VARIANTE IMBALLO
                        RetCode = clsSapUtility.ResetSapVarianteImballoStruct(outDatiGiacenza.VarianteImballo)
                        RetCode = clsSapUtility.TrasfVarianteImballoSapStruct(Out_rfcStruct_E_VARIANTE_IMBALLO, outDatiGiacenza.VarianteImballo, inShowMessageBox)

                    End If

                End If

            End If

#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            outCatchErrorHappened = True '>>> SETTO FLAG DI CATH ERROR
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CHECK_STOCK_GIACENZA = RetCode 'caso di errore
            Else
                Call_ZWS_MB_CHECK_STOCK_GIACENZA = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_CHECK_STOCK_AND_GET_DEST(ByRef inInfoStock As clsDataType.SapWmGiacenza, ByVal inLingua As String, ByRef inDocMateriale As clsDataType.SapWmDocumentoMaterialePos, ByVal inEntrataMerceDaOdp As Boolean, ByRef outCheckOk As Boolean, ByRef outMatnrOk As Boolean, ByRef outDatiGiacenza As clsDataType.SapWmGiacenza, ByRef outSapWmGiacenzeFree() As clsDataType.SapWmGiacenza, ByRef outUbiDestFound As Boolean, ByRef outSapWmGiacenzeDestination() As clsDataType.SapWmGiacenza, ByRef outDescrUbicDestinazione As String, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean, ByRef outCatchErrorHappened As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim SingolaGiacenzaSAPRec As New StructGenericTableLQUA
        Dim objWS As New WS_CHECK_STOCK_AND_GET_DEST.ZWS_CHECK_STOCK_AND_GET_DEST
        Dim stImportParams As New WS_CHECK_STOCK_AND_GET_DEST.ZwmCheckStockAndGetDest
        Dim objWSResponse As New WS_CHECK_STOCK_AND_GET_DEST.ZwmCheckStockAndGetDestResponse
        Dim UserDestinationsRecord As New WS_CHECK_STOCK_AND_GET_DEST.ZwmStrateInputDest

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_STOCK_AND_GET_DEST = 1 'INIT AT ERROR

            outCatchErrorHappened = False

            If (Len(inInfoStock.CodiceMateriale) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1078, "", "CodiceMateriale") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoStock.UbicazioneInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoStock.UbicazioneInfo.TipoMagazzino) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoStock.UbicazioneInfo.Divisione) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1131, "", " (GET WM INPUT DEST). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1081, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If Not APPLICAZIONE_WIN32 = "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE (WEB SERVICES)
            stImportParams.ILgpla = inInfoStock.UbicazioneInfo.Ubicazione
            stImportParams.ILgtyp = inInfoStock.UbicazioneInfo.TipoMagazzino
            stImportParams.ILgnum = inInfoStock.UbicazioneInfo.NumeroMagazzino
            stImportParams.ILgpla = inInfoStock.UbicazioneInfo.Ubicazione
            stImportParams.ILenum = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino)
            stImportParams.IMatnr = inInfoStock.CodiceMateriale
            stImportParams.ICharg = inInfoStock.Partita
            'stImportParams.IEbeln = inDocMateriale.OrdineAcquistoNum
            'stImportParams.IEbelp = inDocMateriale.OrdineAcquistoPos

            'stImportParams.ILenum = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino)
            If (inInfoStock.QtaJobRichiestaInUdmOriginale > 0) Then
                stImportParams.IQtaRichiesta = inInfoStock.QtaJobRichiestaInUdmOriginale
                stImportParams.IMeins = inInfoStock.UnitaDiMisuraBase
            End If


            '>>> GESTIONE DELLO STOCK SPECIALE "E"
            If (clsUtility.IsStringValid(inDocMateriale.MaterialeInfo.CdStockSpeciale, True) = True) And (clsUtility.IsStringValid(inDocMateriale.MaterialeInfo.NumeroStockSpeciale, True) = True) Then
                stImportParams.ISonum = inDocMateriale.MaterialeInfo.NumeroStockSpeciale
                stImportParams.ISobkz = inDocMateriale.MaterialeInfo.CdStockSpeciale
            End If

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_check_stock_and_get_dest/" & SapClient & "/zws_check_stock_and_get_dest/zws_check_stock_and_get_dest"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmCheckStockAndGetDest(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                If (clsUtility.IsStringValid(objWSResponse.EDataMara.Matnr, True) = True) Then
                    outMatnrOk = True
                End If
                If ((objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y")) Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If
                'RITORNO DATI DELLA GIACENZA TROVATA/E
                If (outDatiGiacenza.CodiceMateriale = "") Then
                    outDatiGiacenza.CodiceMateriale = clsSapUtility.FormattaStringaCodiceMateriale(objWSResponse.EDataMara.Matnr)
                End If
                If (outDatiGiacenza.Partita = "") Then
                    outDatiGiacenza.Partita = inInfoStock.Partita
                End If
                outDatiGiacenza.DescrizioneMateriale = UCase(objWSResponse.ETextMakt.Maktx)
                outDatiGiacenza.QtaTotaleLquaInStock = objWSResponse.EZwmStockInfoRec.QtaTotPresenteBase
                outDatiGiacenza.QtaTotaleLquaDisponibile = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileBase
                outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = objWSResponse.EZwmStockInfoRec.QtaTotDaImmagazBase
                outDatiGiacenza.QtaTotaleLquaDaPrelevare = objWSResponse.EZwmStockInfoRec.QtaTotDaPrelevareBase
                outDatiGiacenza.UnitaDiMisuraBase = objWSResponse.EZwmStockInfoRec.Meins
                outDatiGiacenza.QtaTotaleLquaInStockUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotPresenteCons
                outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileCons
                outDatiGiacenza.QtaTotaleLquaDaImmaUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDaImmagazCons
                outDatiGiacenza.QtaTotaleLquaDaPrelUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDaPrelevareCons
                outDatiGiacenza.UnitaDiMisuraAcquisizione = objWSResponse.EZwmStockInfoRec.Vrkme
                If (objWSResponse.ECheckPickAllSu = "X") Then
                    outDatiGiacenza.PickSUCompleto = True
                Else
                    outDatiGiacenza.PickSUCompleto = False
                End If
                If (outDatiGiacenza.UnitaDiMisuraAcquisizione = "") Then
                    outDatiGiacenza.UnitaDiMisuraAcquisizione = outDatiGiacenza.UnitaDiMisuraBase
                    If (outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = 0) Then
                        outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = outDatiGiacenza.QtaTotaleLquaDisponibile
                    End If
                End If

                'SE HO TROVATO LA GIACENZE LE RITORNO
                If (Not objWSResponse.ELquaTabFree Is Nothing) Then
                    If (objWSResponse.EFoundrows > 0) Then
                        outDatiGiacenza.UbicazioneInfo.Divisione = objWSResponse.ELquaTabFree(0).Lqua.Werks
                        outDatiGiacenza.UbicazioneInfo.NumeroMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgnum
                        outDatiGiacenza.UbicazioneInfo.TipoMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgtyp
                        outDatiGiacenza.UbicazioneInfo.Ubicazione = objWSResponse.ELquaTabFree(0).Lqua.Lgpla
                        outDatiGiacenza.UbicazioneInfo.UnitaMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lenum
                        outDatiGiacenza.CdStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sobkz
                        outDatiGiacenza.NumeroStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sonum
                        outDatiGiacenza.TipoStock = objWSResponse.ELquaTabFree(0).Lqua.Bestq
                        outDatiGiacenza.NumeroFabbisognoDiTrasporto = objWSResponse.ELquaTabFree(0).Lqua.Tbnum
                        outDatiGiacenza.MagazzinoLogico = objWSResponse.ELquaTabFree(0).Lqua.Lgort
                        ReDim outSapWmGiacenzeFree(objWSResponse.EFoundrows - 1)
                        For Index = 0 To objWSResponse.EFoundrows - 1
                            SingolaGiacenzaSAPRec.LQUA_DEST_Rec = objWSResponse.ELquaTabFree(Index).Lqua
                            RetCode = clsSapUtility.TrasfGiacenzaSapStruct(SingolaGiacenzaSAPRec, outSapWmGiacenzeFree(Index))
                        Next
                    End If
                End If

                '>>> RITORNO DATI VARIANTE IMBALLO
                RetCode = clsSapUtility.ResetVarianteImballoStruct(outDatiGiacenza.VarianteImballo)
                RetCode = clsSapUtility.TrasfVarianteImballoSapStruct(objWSResponse.EVarianteImballo, outDatiGiacenza.VarianteImballo, inShowMessageBox)
            End If

            '******************************************************************************
            '>>> PARTE CHE ELABORA LA MIGLIORE DESTINAZIONE RITORNATA DALLA LOGICA (FATTA SOLO SE CHECK OK)
            '******************************************************************************
            outDescrUbicDestinazione = ""
            Dim NumDestinationFound As Long = 0
            If (objWSResponse.ESuccess = "Y") And (objWSResponse.ECheckOk = "Y") Then

                'PRENDO NUMERO DI DESTINAZIONI TROVATA
                If (Not objWSResponse.EDestinationTab Is Nothing) Then

                    NumDestinationFound = objWSResponse.EDestinationTab.Length
                    If (NumDestinationFound > 0) Then
                        outUbiDestFound = True 'UNICO CASO OK (DEVO AVERE ALMENO UNA SOLUZIONE)
                    End If
                    ReDim outSapWmGiacenzeDestination(NumDestinationFound - 1)
                    For Index = 0 To (NumDestinationFound - 1)
                        UserDestinationsRecord = objWSResponse.EDestinationTab(Index)
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.Divisione = UserDestinationsRecord.LquaDest.Werks
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.NumeroMagazzino = UserDestinationsRecord.LquaDest.Lgnum
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.TipoMagazzino = UserDestinationsRecord.LquaDest.Lgtyp
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.Ubicazione = UserDestinationsRecord.LquaDest.Lgpla
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.UnitaMagazzino = UserDestinationsRecord.LquaDest.Lenum

                        If (UserDestinationsRecord.LgtypInfo.t331.Lenvw = "X") Then
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.AbilitaUnitaMagazzino = True
                        Else
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.AbilitaUnitaMagazzino = False
                        End If
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.NumeroOrdineProduzione = UserDestinationsRecord.Aufnr
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrizioneCausale = UserDestinationsRecord.DescrCausale
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.NumDocumentoAcquisto = UserDestinationsRecord.Ebeln
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.PosizioneDocumentoAcquisto = UserDestinationsRecord.Ebelp
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.QtaRichiesta = UserDestinationsRecord.MatnrOdpReqQty
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UnitaDiMisuraBase = UserDestinationsRecord.Meins

                        If (UserDestinationsRecord.FoundMancanteOdp = "X") Then
                            '>>> NEL CASO DI MANCANTE PER ODP PUO' ANDARE DIRETTAMENTE IN PRODUZIONE O AL MAGAZZINO CESTE
                            Select Case outSapWmGiacenzeDestination(Index).UbicazioneInfo.TipoMagazzino
                                Case DefaultTipoMagAreaProduzione
                                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1094, "", "> Prod.(Manca)")
                                Case Else
                                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1095, "", "> Manca x OdP")
                            End Select
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundMancanteOdp = True
                        End If
                        If (UserDestinationsRecord.FoundMagProd = "X") Then
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1096, "", "> Mag.Prod.")
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundMagProd = True
                        End If
                        If (UserDestinationsRecord.FoundAreaProd = "X") Then
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1097, "", "> Produzione")
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundAreaProd = True
                        End If
                        If (UserDestinationsRecord.FoundMagGeneric = "X") Then
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1098, "", "> Mag.(InStock)")
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundMagGeneric = True
                        End If
                        If (UserDestinationsRecord.FoundMagEmpty = "X") Then
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1099, "", "> Mag.(Vuota)")
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundMagEmpty = True
                        End If
                        If (UserDestinationsRecord.FoundForcedDestination = "X") Then
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1100, "", "> Dest.Forzata")
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundForcedDestination = True
                        End If
                        If (UserDestinationsRecord.FoundMagProd = "X") And (UserDestinationsRecord.FoundAreaProd = "X") Then
                            outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1101, "", "> Mag.Prod & Prod.")
                        End If
                        If (Index = 0) Then
                            outDescrUbicDestinazione = outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione
                        End If
                        'IMPOSTO ANCHE UNA STRUTTURA PRINCIPALE USATA NEL DISACCANTONAMENTO
                        outSapWmGiacenzeDestination(Index).UbicazioneInfo = outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo
                    Next

                    'SE NON HO TROVATO UNA DESCRIZIONE DELLE SINGOLE DESTINAZIONE ALLORA VERIFICO I FLAG GLOBALI
                    If (clsUtility.IsStringValid(outDescrUbicDestinazione, True) = False) Then
                        If (objWSResponse.EFoundMagProd = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1102, "", "> Mag.Ceste")
                        End If
                        If (objWSResponse.EFoundAreaProd = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1097, "", "> Produzione")
                        End If
                        If (objWSResponse.EFoundMagGeneric = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1098, "", "> Mag.(InStock)")
                        End If
                        If (objWSResponse.EFoundMagEmpty = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1099, "", "> Mag.(Vuota)")
                        End If
                        If (objWSResponse.EFoundForcedDestination = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1100, "", "> Dest.Forzata")
                        End If
                        If (objWSResponse.EFoundMagProd = "X") And (objWSResponse.EFoundAreaProd = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1101, "", "> Mag.Prod & Prod.")
                        End If
                    End If

                End If

            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim index As Integer

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_CHECK_STOCK_AND_GET_DEST")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGPLA", inInfoStock.UbicazioneInfo.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoStock.UbicazioneInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LGNUM", inInfoStock.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_LENUM", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino))
            rfcFunction.SetValue("I_MATNR", inInfoStock.CodiceMateriale)
            rfcFunction.SetValue("I_CHARG", inInfoStock.Partita)

            If (inInfoStock.QtaJobRichiestaInUdmOriginale > 0) Then
                rfcFunction.SetValue("I_QTA_RICHIESTA", inInfoStock.QtaJobRichiestaInUdmOriginale)
                rfcFunction.SetValue("I_MEINS", inInfoStock.UnitaDiMisuraBase)
            End If

            '>>> GESTIONE DELLO STOCK SPECIALE "E"
            If (clsUtility.IsStringValid(inDocMateriale.MaterialeInfo.CdStockSpeciale, True) = True) And (clsUtility.IsStringValid(inDocMateriale.MaterialeInfo.NumeroStockSpeciale, True) = True) Then
                rfcFunction.SetValue("I_SONUM", inDocMateriale.MaterialeInfo.NumeroStockSpeciale)
                rfcFunction.SetValue("I_SOBKZ", inDocMateriale.MaterialeInfo.CdStockSpeciale)
            End If


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_LQUA_TAB_FREE")
            Dim Out_rfcStruct_E_LQUA_TAB_FREE As IRfcStructure = rfcTable.GetStructure("E_LQUA_TAB_FREE")
            Dim Out_rfcStruct_E_DATA_MARA As IRfcStructure = rfcFunction.GetStructure("E_DATA_MARA")
            Dim Out_rfcstruct_E_TEXT_MAKT As IRfcStructure = rfcFunction.GetStructure("E_TEXT_MAKT")
            Dim Out_rfcStruct_E_ZWM_STOCK_INFO_REC As IRfcStructure = rfcFunction.GetStructure("E_ZWM_STOCK_INFO_REC")
            Dim Out_rfcStruct_E_DESTINATION_TAB As IRfcStructure = rfcFunction.GetStructure("E_DESTINATION_TAB")
            Dim Out_rfcStruct_E_VARIANTE_IMBALLO As IRfcStructure = rfcFunction.GetStructure("E_VARIANTE_IMBALLO")
            Dim Out_rfcStruct_LGTYP_INFO As IRfcStructure = Out_rfcStruct_E_DESTINATION_TAB.GetStructure("LGTYP_INFO")
            Dim Out_rfcStruct_T331 As IRfcStructure = Out_rfcStruct_LGTYP_INFO.GetStructure("T331")
            Dim Out_rfcStruct_LQUA_DEST As IRfcStructure = Out_rfcStruct_E_DESTINATION_TAB.GetStructure("LQUA_DEST")


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                If (clsUtility.IsStringValid(Out_rfcStruct_E_DATA_MARA.Item("MATNR").GetString, True) = True) Then
                    outMatnrOk = True
                End If

                If ((rfcFunction.GetObject("E_Foundrows") > 0) And (rfcFunction.GetObject("E_Check_Ok").ToString = "Y")) Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If
                'RITORNO DATI DELLA GIACENZA TROVATA/E
                If (outDatiGiacenza.CodiceMateriale = "") Then
                    outDatiGiacenza.CodiceMateriale = clsSapUtility.FormattaStringaCodiceMateriale(Out_rfcStruct_E_DATA_MARA.Item("MATNR").GetString)
                End If
                If (outDatiGiacenza.Partita = "") Then
                    outDatiGiacenza.Partita = inInfoStock.Partita
                End If
                outDatiGiacenza.DescrizioneMateriale = UCase(clsSapUtility.GetRFCStructParamToString(Out_rfcstruct_E_TEXT_MAKT, "MAKTX"))
                outDatiGiacenza.QtaTotaleLquaInStock = clsSapUtility.GetRFCParameterToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_PRESENTE_BASE")
                outDatiGiacenza.QtaTotaleLquaDisponibile = clsSapUtility.GetRFCParameterToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DISPONIBILE_BASE")
                outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCParameterToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_IMMAGAZ_BASE")
                outDatiGiacenza.QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCParameterToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_PRELEVARE_BASE")
                outDatiGiacenza.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(Out_rfcstruct_E_TEXT_MAKT, "MEINS")
                outDatiGiacenza.QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCParameterToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_PRESENTE_CONS")
                outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCParameterToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DISPONIBILE_CONS")
                outDatiGiacenza.QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCParameterToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_IMMAGAZ_CONS")
                outDatiGiacenza.QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCParameterToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_PRELEVARE_CONS")
                outDatiGiacenza.UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCParameterToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "VRKME")
                If (rfcFunction.GetObject("E_CHECK_PICK_ALL_SU").ToString = "X") Then
                    outDatiGiacenza.PickSUCompleto = True
                Else
                    outDatiGiacenza.PickSUCompleto = False
                End If
                If (outDatiGiacenza.UnitaDiMisuraAcquisizione = "") Then
                    outDatiGiacenza.UnitaDiMisuraAcquisizione = outDatiGiacenza.UnitaDiMisuraBase
                    If (outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = 0) Then
                        outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = outDatiGiacenza.QtaTotaleLquaDisponibile
                    End If
                End If

                'SE HO TROVATO LA GIACENZE LE RITORNO
                If (Not Out_rfcStruct_E_LQUA_TAB_FREE Is Nothing) Then
                    If (rfcFunction.GetObject("E_Foundrows") > 0) Then
                        outDatiGiacenza.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Werks")
                        outDatiGiacenza.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Lgnum")
                        outDatiGiacenza.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Lgtyp")
                        outDatiGiacenza.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Lgpla")
                        outDatiGiacenza.UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Lenum"))
                        outDatiGiacenza.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Sobkz")
                        outDatiGiacenza.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Sonum")
                        outDatiGiacenza.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Bestq")
                        outDatiGiacenza.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Tbnum")
                        outDatiGiacenza.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_LQUA_TAB_FREE, "Tbnum")

                        ReDim outSapWmGiacenzeFree(rfcFunction.GetObject("E_Foundrows") - 1)
                        For index = 0 To rfcFunction.GetObject("E_Foundrows") - 1
                            SingolaGiacenzaSAPRec.LQUA_DEST_Rec = Out_rfcStruct_E_LQUA_TAB_FREE.Item("Lqua")
                            RetCode = clsSapUtility.TrasfGiacenzaSapStruct(SingolaGiacenzaSAPRec, outSapWmGiacenzeFree(index))
                        Next

                    End If
                End If

                '>>> RITORNO DATI VARIANTE IMBALLO
                RetCode = clsSapUtility.ResetSapVarianteImballoStruct(outDatiGiacenza.VarianteImballo)
                RetCode = clsSapUtility.TrasfVarianteImballoSapStruct(Out_rfcStruct_E_VARIANTE_IMBALLO, outDatiGiacenza.VarianteImballo, False)
            End If



            '******************************************************************************
            '>>> PARTE CHE ELABORA LA MIGLIORE DESTINAZIONE RITORNATA DALLA LOGICA (FATTA SOLO SE CHECK OK)
            '******************************************************************************
            outDescrUbicDestinazione = ""
            Dim NumDestinationFound As Long = 0
            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Check_Ok") = "Y") Then


                'PRENDO NUMERO DI DESTINAZIONI TROVATA
                If (Not Out_rfcStruct_E_DESTINATION_TAB Is Nothing) Then

                    NumDestinationFound = Out_rfcStruct_E_DESTINATION_TAB.ElementCount
                    If (NumDestinationFound > 0) Then
                        outUbiDestFound = True 'UNICO CASO OK (DEVO AVERE ALMENO UNA SOLUZIONE)
                    End If

                    ReDim outSapWmGiacenzeDestination(NumDestinationFound - 1)

                    For Each rfcRow In rfcTable

                        'UserDestinationsRecord = objWSResponse.EDestinationTab(Index)

                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "WERKS")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGNUM")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGTYP")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGPLA")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LENUM")

                        'If (UserDestinationsRecord.LgtypInfo.t331.Lenvw = "X") Then
                        If (Out_rfcStruct_T331.Item("LENVW").GetString = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.AbilitaUnitaMagazzino = True
                        Else
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.AbilitaUnitaMagazzino = False
                        End If
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.NumeroOrdineProduzione = clsSapUtility.GetRFCStructParamToString(rfcRow, "AUFNR")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrizioneCausale = clsSapUtility.GetRFCStructParamToString(rfcRow, "DESCR_CAUSALE")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.NumDocumentoAcquisto = clsSapUtility.GetRFCStructParamToString(rfcRow, "EBELN")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.PosizioneDocumentoAcquisto = clsSapUtility.GetRFCStructParamToString(rfcRow, "EBELP")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.QtaRichiesta = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR_ODP_REQ_QTY")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS")

                        'If (UserDestinationsRecord.FoundMancanteOdp = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MANCANTE_ODP") = "X") Then
                            '>>> NEL CASO DI MANCANTE PER ODP PUO' ANDARE DIRETTAMENTE IN PRODUZIONE O AL MAGAZZINO CESTE
                            Select Case outSapWmGiacenzeDestination(index).UbicazioneInfo.TipoMagazzino
                                Case DefaultTipoMagAreaProduzione
                                    outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1094, "", "> Prod.(Manca)")
                                Case Else
                                    outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1095, "", "> Manca x OdP")
                            End Select
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundMancanteOdp = True
                        End If
                        'If (UserDestinationsRecord.FoundMagProd = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_PROD") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1096, "", "> Mag.Prod.")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundMagProd = True
                        End If
                        'If (UserDestinationsRecord.FoundAreaProd = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_AREA_PROD") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1097, "", "> Produzione")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundAreaProd = True
                        End If
                        'If (UserDestinationsRecord.FoundMagGeneric = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_GENERIC") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1098, "", "> Mag.(InStock)")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundMagGeneric = True
                        End If
                        'If (UserDestinationsRecord.FoundMagEmpty = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_EMPTY") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1099, "", "> Mag.(Vuota)")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundMagEmpty = True
                        End If
                        'If (UserDestinationsRecord.FoundForcedDestination = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_FORCED_DESTINATION") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1100, "", "> Dest.Forzata")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundForcedDestination = True
                        End If
                        'If (UserDestinationsRecord.FoundMagProd = "X") And (UserDestinationsRecord.FoundAreaProd = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_PROD") = "X") And (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_PROD") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1101, "", "> Mag.Prod & Prod.")
                        End If
                        If (index = 0) Then
                            outDescrUbicDestinazione = outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione
                        End If
                        'IMPOSTO ANCHE UNA STRUTTURA PRINCIPALE USATA NEL DISACCANTONAMENTO
                        outSapWmGiacenzeDestination(index).UbicazioneInfo = outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo

                        index += 1

                    Next


                    'SE NON HO TROVATO UNA DESCRIZIONE DELLE SINGOLE DESTINAZIONE ALLORA VERIFICO I FLAG GLOBALI
                    If (clsUtility.IsStringValid(outDescrUbicDestinazione, True) = False) Then
                        'If (objWSResponse.EFoundMagProd = "X") Then
                        If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_MAG_PROD") = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1102, "", "> Mag.Ceste")
                        End If
                        'If (objWSResponse.EFoundAreaProd = "X") Then
                        If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_AREA_PROD") = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1097, "", "> Produzione")
                        End If
                        'If (objWSResponse.EFoundMagGeneric = "X") Then
                        If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_MAG_GENERIC") = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1098, "", "> Mag.(InStock)")
                        End If
                        'If (objWSResponse.EFoundMagEmpty = "X") Then
                        If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_MAG_EMPTY") = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1099, "", "> Mag.(Vuota)")
                        End If
                        'If (objWSResponse.EFoundForcedDestination = "X") Then
                        If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_FORCED_DESTINATION") = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1100, "", "> Dest.Forzata")
                        End If
                        'If (objWSResponse.EFoundMagProd = "X") And (objWSResponse.EFoundAreaProd = "X") Then
                        If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_MAG_PROD") = "X") And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_AREA_PROD") = "X") Then
                            outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1101, "", "> Mag.Prod & Prod.")
                        End If
                    End If

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            outCatchErrorHappened = True '>>> SETTO FLAG DI CATH ERROR
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_CHECK_STOCK_AND_GET_DEST = RetCode 'caso di errore
            Else
                Call_ZWS_CHECK_STOCK_AND_GET_DEST = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_CHECK_JOB_UDS(ByRef inInfoStock As clsDataType.SapWmGiacenza, ByVal inFlagNewPicking As Boolean, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outCheckNewUds As Boolean, ByRef outUDSInfo As clsDataType.SapUDSInfo, ByRef outUDSWeightInfo As clsDataType.UDS_WeightInfoStruct, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        'Dim objWS As New WS_MB_CHECK_LENUM_GIACENZA.ZWS_MB_CHECK_LENUM_GIACENZA
        'Dim stImportParams As New WS_MB_CHECK_LENUM_GIACENZA.ZwmMbCheckLenumGiacenza
        Dim objWSResponse As New WS_MB_CHECK_LENUM_GIACENZA.ZwmMbCheckLenumGiacenzaResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_JOB_UDS = 1 'INIT AT ERROR

            outCheckOk = False
            outCheckNewUds = False

            If (clsUtility.IsStringValid(inInfoStock.UbicazioneInfo.UnitaMagazzino, True) = False) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1475, "", " CHECK JOB UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (clsUtility.IsStringValid(inInfoStock.UbicazioneInfo.Divisione, True) = False) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1475, "", " CHECK JOB UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1081, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (clsUtility.IsStringValid(inInfoStock.UbicazioneInfo.NumeroMagazzino, True) = False) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1475, "", " CHECK JOB UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then

            ''**************************************************************************
            ''IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            'If (inCheckBlock = True) Then
            '    stImportParams.ICheckBlock = "X"
            'Else
            '    stImportParams.ICheckBlock = ""
            'End If
            'If (inCheckBestQ = True) Then
            '    stImportParams.ICheckBestq = "X"
            'Else
            '    stImportParams.ICheckBestq = ""
            'End If
            'If (inCheckOnProduction = True) Then
            '    stImportParams.ICheckOnProduction = "X"
            'Else
            '    stImportParams.ICheckOnProduction = ""
            'End If
            'stImportParams.ILgpla = inInfoStock.UbicazioneInfo.Ubicazione
            'stImportParams.ILgtyp = inInfoStock.UbicazioneInfo.TipoMagazzino
            'stImportParams.ILgnum = inInfoStock.UbicazioneInfo.NumeroMagazzino
            'stImportParams.ILgpla = inInfoStock.UbicazioneInfo.Ubicazione
            'stImportParams.ILenum = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino)
            'stImportParams.IMatnr = inInfoStock.CodiceMateriale
            'stImportParams.ICharg = inInfoStock.Partita
            'stImportParams.IQtaRichiesta = inInfoStock.QuantitaConfermataOperatore
            'stImportParams.IMeins = inInfoStock.UnitaDiMisuraAcquisizione
            'stImportParams.ILanguage = inLingua

            ''>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            'objNetworkCredential.UserName = UserRfcWs
            'objNetworkCredential.Password = PswUserRfcWs
            'objWS.Credentials = objNetworkCredential

            ''>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            'objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_lenum_giacenza/" & SapClient & "/zws_mb_check_lenum_giacenza/zws_mb_check_lenum_giacenza"


            'Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            ''chiamo function per eseguire CONTROLLO UBICAZIONE
            'objWSResponse = objWS.ZwmMbCheckLenumGiacenza(stImportParams)
            'Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            'If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
            '    outCheckOk = True 'UNICO CASO DI CHECK OK
            '    'RITORNO DATI DELLA GIACENZA TROVATA/E
            '    If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(objWSResponse.EDataMara.Matnr, True) = True) Then
            '        outDatiGiacenza.CodiceMateriale = objWSResponse.EDataMara.Matnr
            '    End If

            '    '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE
            '    If (outDatiGiacenza.Partita = "") Then
            '        If (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
            '            outDatiGiacenza.Partita = inInfoStock.Partita
            '        Else
            '            outDatiGiacenza.Partita = ""
            '        End If
            '    End If
            '    outDatiGiacenza.DescrizioneMateriale = objWSResponse.ETextMaktg
            '    outDatiGiacenza.QtaTotaleLquaInStock = objWSResponse.EZwmStockInfoRec.QtaTotPresenteBase
            '    outDatiGiacenza.QtaTotaleLquaDisponibile = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileBase
            '    outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = objWSResponse.EZwmStockInfoRec.QtaTotDaImmagazBase
            '    outDatiGiacenza.QtaTotaleLquaDaPrelevare = objWSResponse.EZwmStockInfoRec.QtaTotDaPrelevareBase
            '    outDatiGiacenza.QuantitaInUdMBase = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileBase
            '    outDatiGiacenza.UnitaDiMisuraBase = objWSResponse.EZwmStockInfoRec.Meins

            '    outDatiGiacenza.QtaTotaleLquaInStockUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotPresenteCons
            '    outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileCons
            '    outDatiGiacenza.QtaTotaleLquaDaImmaUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDaImmagazCons
            '    outDatiGiacenza.QtaTotaleLquaDaPrelUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDaPrelevareCons
            '    outDatiGiacenza.QuantitaInUdMAcquisizione = objWSResponse.EZwmStockInfoRec.QtaTotPresenteCons
            '    outDatiGiacenza.UnitaDiMisuraAcquisizione = objWSResponse.EZwmStockInfoRec.Vrkme
            '    If (objWSResponse.ECheckPickAllSu = "X") Then
            '        outDatiGiacenza.PickSUCompleto = True
            '    Else
            '        outDatiGiacenza.PickSUCompleto = False
            '    End If

            '    '>>> RITORNO DATI VARIANTE IMBALLO
            '    RetCode = clsSapUtility.ResetVarianteImballoStruct(outDatiGiacenza.VarianteImballo)
            '    RetCode = clsSapUtility.TrasfVarianteImballoSapStruct(objWSResponse.EVarianteImballo, outDatiGiacenza.VarianteImballo, False)
            '    If (objWSResponse.EFoundrows > 0) Then
            '        outDatiGiacenza.UbicazioneInfo.Divisione = objWSResponse.ELquaTabFree(0).Lqua.Werks
            '        outDatiGiacenza.UbicazioneInfo.NumeroMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgnum
            '        outDatiGiacenza.UbicazioneInfo.TipoMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgtyp
            '        outDatiGiacenza.UbicazioneInfo.Ubicazione = objWSResponse.ELquaTabFree(0).Lqua.Lgpla
            '        outDatiGiacenza.UbicazioneInfo.UnitaMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lenum
            '        outDatiGiacenza.UbicazioneInfo.TipoUnitaMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Letyp
            '        outDatiGiacenza.UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
            '        outDatiGiacenza.MagazzinoLogico = objWSResponse.ELquaTabFree(0).Lqua.Lgort

            '        '>>> SE NECESSARIO VALORIZZO IL CODICE MATERIALE
            '        If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(objWSResponse.ELquaTabFree(0).Lqua.Matnr, True) = True) Then
            '            outDatiGiacenza.CodiceMateriale = objWSResponse.ELquaTabFree(0).Lqua.Matnr
            '        End If

            '        '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE (SE NE HO UNA VALIDA PRENDO QUELLA
            '        If (clsUtility.IsStringValid(objWSResponse.ELquaTabFree(0).Lqua.Charg, True) = True) Then
            '            outDatiGiacenza.Partita = objWSResponse.ELquaTabFree(0).Lqua.Charg
            '        ElseIf (clsUtility.IsStringValid(objWSResponse.ELquaTabFree(0).Lqua.Charg, True) = False) And (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
            '            outDatiGiacenza.Partita = inInfoStock.Partita
            '        Else
            '            outDatiGiacenza.Partita = ""
            '        End If

            '        outDatiGiacenza.CdStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sobkz
            '        outDatiGiacenza.NumeroStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sonum
            '        outDatiGiacenza.TipoStock = objWSResponse.ELquaTabFree(0).Lqua.Bestq
            '        outDatiGiacenza.NumeroFabbisognoDiTrasporto = objWSResponse.ELquaTabFree(0).Lqua.Tbnum
            '    End If
            'End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            Dim LoopIndex As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_CHECK_JOB_UDS")

            If (inFlagNewPicking = True) Then
                rfcFunction.SetValue("I_FLAG_NEW_PICKING", "X")
            Else
                rfcFunction.SetValue("I_FLAG_NEW_PICKING", "")
            End If
            rfcFunction.SetValue("I_WERKS", inInfoStock.UbicazioneInfo.Divisione)
            rfcFunction.SetValue("I_LGPLA", inInfoStock.UbicazioneInfo.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoStock.UbicazioneInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LGNUM", inInfoStock.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_LENUM", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino))
            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_OK") = "Y") Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_NEW_UDS") = "Y") Then
                    outCheckNewUds = True 'SETTO FLAG DI NUOVO UDS
                End If

                'Dim Out_rfcStruct_E_ZWMS_UDS_MATNR_TAB As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_UDS_MATNR_TAB")

                rfcTable = rfcFunction.GetTable("E_ZWMS_UDS_MATNR_TAB")

                If (rfcTable.RowCount > 0) Then

                    Dim Out_rfcStruct_E_UDS_WEIGHT_INFO As IRfcStructure = rfcFunction.GetStructure("E_UDS_WEIGHT_INFO")
                    Dim Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_UDS_MAIN_INFO")

                    outUDSWeightInfo.PesoTotaleUDS_Kg = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_UDS_WEIGHT_INFO, "ZWMS_PESOMAT_EU")
                    outUDSWeightInfo.UdmPesoKg = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_UDS_WEIGHT_INFO, "GEWEI_EU")
                    outUDSWeightInfo.PesoTotaleUDS_Lb = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_UDS_WEIGHT_INFO, "ZWMS_PESOMAT_USA")
                    outUDSWeightInfo.UdmPesoLb = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_UDS_WEIGHT_INFO, "GEWEI_USA")

                    '>>> RITORNO LE INFORMAZIONI PRINCIPALI DELLA UDS
                    If (Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS") Is Nothing)) Then
                        'outUDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS")
                        outUDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS", 0)
                    End If
                    If (Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBSGRP") Is Nothing)) Then
                        outUDSInfo.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBSGRP")
                    End If

                    outUDSInfo.DescrizioneMateriale = UCase(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "MAKTG"))
                    outUDSInfo.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "ZQTA_PREL_BASE")
                    outUDSInfo.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "UDM_QTAPR_MEINS")
                    outUDSInfo.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "ZQTA_PREL_CONS")
                    outUDSInfo.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "UDM_QTAPR_CONS")
                    outUDSInfo.QtaPrelevataInUdMPezzo = 0
                    outUDSInfo.UdmQtaPrelevataInUdMPezzo = ""

                    outUDSInfo.PickSUCompleto = False

                    outUDSInfo.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "WERKS")
                    outUDSInfo.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "LGNUM")
                    outUDSInfo.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "LGTYP")
                    outUDSInfo.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "LGPLA")
                    outUDSInfo.UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "LENUM"))
                    outUDSInfo.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "LETYP")
                    outUDSInfo.UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                    outUDSInfo.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "LGORT")

                    '>>> SE NECESSARIO VALORIZZO IL CODICE MATERIALE
                    If (outUDSInfo.CodiceMateriale = "") And (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "MATNR"), True) = True) Then
                        outUDSInfo.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "MATNR")
                    End If

                    '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE (SE NE HO UNA VALIDA PRENDO QUELLA
                    If (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "CHARG"), True) = True) Then
                        outUDSInfo.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "CHARG")
                    End If


                    'outUDSInfo.NrTrasporto = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "TKNUM")
                    outUDSInfo.NrTrasporto = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "TKNUM", 0)

                    outUDSInfo.Consegna = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "NUM_CONS_VBELV")
                    outUDSInfo.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "SOBKZ")
                    outUDSInfo.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "SONUM")
                    outUDSInfo.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "BESTQ")
                    outUDSInfo.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_ZWMS_UDS_MAIN_INFO, "TBNUM")

                    outUDSInfo.TruckDayNr = ""
                    outUDSInfo.TrasfNumPallet = 0


                    'RITORNO I VALORI DEI SINGOLI MATERIALI/COMPONENTI DELLA UDS
                    ReDim outUDSInfo.Componenti(rfcTable.RowCount - 1)

                    For Each rfcRow In rfcTable

                        If (Not (clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS") Is Nothing)) Then
                            'outUDSInfo.Componenti(LoopIndex).NrWmsJobs = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                            outUDSInfo.Componenti(LoopIndex).NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZNR_WMS_JOBS", 0)
                        End If
                        If (Not (clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP") Is Nothing)) Then
                            outUDSInfo.Componenti(LoopIndex).CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                        End If

                        outUDSInfo.Componenti(LoopIndex).DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAKTG")
                        outUDSInfo.Componenti(LoopIndex).QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outUDSInfo.Componenti(LoopIndex).UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        outUDSInfo.Componenti(LoopIndex).QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outUDSInfo.Componenti(LoopIndex).UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                        outUDSInfo.Componenti(LoopIndex).QtaPrelevataInUdMPezzo = 0
                        outUDSInfo.Componenti(LoopIndex).UdmQtaPrelevataInUdMPezzo = ""

                        outUDSInfo.Componenti(LoopIndex).PickSUCompleto = False

                        '>>> RITORNO DATI VARIANTE IMBALLO
                        RetCode = clsSapUtility.ResetSapVarianteImballoStruct(outUDSInfo.Componenti(LoopIndex).VarianteImballo)

                        outUDSInfo.Componenti(LoopIndex).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        outUDSInfo.Componenti(LoopIndex).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        outUDSInfo.Componenti(LoopIndex).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                        outUDSInfo.Componenti(LoopIndex).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                        outUDSInfo.Componenti(LoopIndex).UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        outUDSInfo.Componenti(LoopIndex).UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                        outUDSInfo.Componenti(LoopIndex).UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                        outUDSInfo.Componenti(LoopIndex).MagazzinoLogico = ""

                        outUDSInfo.Componenti(LoopIndex).CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        outUDSInfo.Componenti(LoopIndex).Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")

                        outUDSInfo.Componenti(LoopIndex).CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(rfcRow, "SOBKZ")
                        outUDSInfo.Componenti(LoopIndex).NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(rfcRow, "SONUM")
                        outUDSInfo.Componenti(LoopIndex).TipoStock = clsSapUtility.GetRFCStructParamToString(rfcRow, "BESTQ")
                        outUDSInfo.Componenti(LoopIndex).NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TBNUM")

                        outUDSInfo.Componenti(LoopIndex).TruckDayNr = ""
                        outUDSInfo.Componenti(LoopIndex).TrasfNumPallet = 0

                        LoopIndex = LoopIndex + 1
                    Next
                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_CHECK_JOB_UDS = RetCode 'errore
            Else
                Call_ZWS_CHECK_JOB_UDS = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CHECK_LENUM_GIACENZA(ByRef inInfoStock As clsDataType.SapWmGiacenza, ByVal inCheckBlock As Boolean, ByVal inCheckBestQ As Boolean, ByVal inCheckOnProduction As Boolean, ByVal inCheckMixedItems As Boolean, ByVal inCheckProdError As Boolean, ByVal inCheckMixedItemsCodMateriale As String, ByVal inCheckMixedItemsPartita As String, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outDatiGiacenza As clsDataType.SapWmGiacenza, ByRef outSapWmGiacenzeFree() As clsDataType.SapWmGiacenza, ByRef outUM_OnFinalLocation As Boolean, ByRef outUM_DifferentMaterialCode As Boolean, ByRef outUM_DifferentMaterialBatch As Boolean, ByRef outFlagCheckLenum As clsDataType.FlagCheckLenum, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean, Optional ByRef outTabProdError() As String = Nothing) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_CHECK_LENUM_GIACENZA.ZWS_MB_CHECK_LENUM_GIACENZA
        Dim stImportParams As New WS_MB_CHECK_LENUM_GIACENZA.ZwmMbCheckLenumGiacenza
        Dim objWSResponse As New WS_MB_CHECK_LENUM_GIACENZA.ZwmMbCheckLenumGiacenzaResponse
        Dim ParCheckBestq As String = ""
        Dim ParCheckBlock As String = ""
        Dim ParCheckMaterialExist As String = ""
        Dim ParLenum As String = ""
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CHECK_LENUM_GIACENZA = 1 'INIT AT ERROR

            outUM_OnFinalLocation = False
            outUM_DifferentMaterialCode = False
            outUM_DifferentMaterialBatch = False


            If (Len(inInfoStock.UbicazioneInfo.UnitaMagazzino) <= 0) And (Len(inInfoStock.SKU) <= 0) And (Len(inInfoStock.CodiceMateriale) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1126, "", " CHECK LENUM. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then

            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            If (inCheckBlock = True) Then
                stImportParams.ICheckBlock = "X"
            Else
                stImportParams.ICheckBlock = ""
            End If
            If (inCheckBestQ = True) Then
                stImportParams.ICheckBestq = "X"
            Else
                stImportParams.ICheckBestq = ""
            End If
            If (inCheckOnProduction = True) Then
                stImportParams.ICheckOnProduction = "X"
            Else
                stImportParams.ICheckOnProduction = ""
            End If
            stImportParams.ILgpla = inInfoStock.UbicazioneInfo.Ubicazione
            stImportParams.ILgtyp = inInfoStock.UbicazioneInfo.TipoMagazzino
            stImportParams.ILgnum = inInfoStock.UbicazioneInfo.NumeroMagazzino
            stImportParams.ILgpla = inInfoStock.UbicazioneInfo.Ubicazione
            stImportParams.ILenum = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino)
            stImportParams.IMatnr = inInfoStock.CodiceMateriale
            stImportParams.ICharg = inInfoStock.Partita
            stImportParams.IQtaRichiesta = inInfoStock.QuantitaConfermataOperatore
            stImportParams.IMeins = inInfoStock.UnitaDiMisuraAcquisizione
            stImportParams.ILanguage = inLingua

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_lenum_giacenza/" & SapClient & "/zws_mb_check_lenum_giacenza/zws_mb_check_lenum_giacenza"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbCheckLenumGiacenza(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK
                'RITORNO DATI DELLA GIACENZA TROVATA/E
                If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(objWSResponse.EDataMara.Matnr, True) = True) Then
                    outDatiGiacenza.CodiceMateriale = objWSResponse.EDataMara.Matnr
                End If

                '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE
                If (outDatiGiacenza.Partita = "") Then
                    If (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
                        outDatiGiacenza.Partita = inInfoStock.Partita
                    Else
                        outDatiGiacenza.Partita = ""
                    End If
                End If
                outDatiGiacenza.DescrizioneMateriale = objWSResponse.ETextMaktg
                outDatiGiacenza.QtaTotaleLquaInStock = objWSResponse.EZwmStockInfoRec.QtaTotPresenteBase
                outDatiGiacenza.QtaTotaleLquaDisponibile = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileBase
                outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = objWSResponse.EZwmStockInfoRec.QtaTotDaImmagazBase
                outDatiGiacenza.QtaTotaleLquaDaPrelevare = objWSResponse.EZwmStockInfoRec.QtaTotDaPrelevareBase
                outDatiGiacenza.QuantitaInUdMBase = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileBase
                outDatiGiacenza.UnitaDiMisuraBase = objWSResponse.EZwmStockInfoRec.Meins

                outDatiGiacenza.QtaTotaleLquaInStockUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotPresenteCons
                outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDisponibileCons
                outDatiGiacenza.QtaTotaleLquaDaImmaUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDaImmagazCons
                outDatiGiacenza.QtaTotaleLquaDaPrelUdMAcq = objWSResponse.EZwmStockInfoRec.QtaTotDaPrelevareCons
                outDatiGiacenza.QuantitaInUdMAcquisizione = objWSResponse.EZwmStockInfoRec.QtaTotPresenteCons
                outDatiGiacenza.UnitaDiMisuraAcquisizione = objWSResponse.EZwmStockInfoRec.Vrkme
                If (objWSResponse.ECheckPickAllSu = "X") Then
                    outDatiGiacenza.PickSUCompleto = True
                Else
                    outDatiGiacenza.PickSUCompleto = False
                End If

                '>>> RITORNO DATI VARIANTE IMBALLO
                RetCode = clsSapUtility.ResetVarianteImballoStruct(outDatiGiacenza.VarianteImballo)
                RetCode = clsSapUtility.TrasfVarianteImballoSapStruct(objWSResponse.EVarianteImballo, outDatiGiacenza.VarianteImballo, False)
                If (objWSResponse.EFoundrows > 0) Then
                    outDatiGiacenza.UbicazioneInfo.Divisione = objWSResponse.ELquaTabFree(0).Lqua.Werks
                    outDatiGiacenza.UbicazioneInfo.NumeroMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgnum
                    outDatiGiacenza.UbicazioneInfo.TipoMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgtyp
                    outDatiGiacenza.UbicazioneInfo.Ubicazione = objWSResponse.ELquaTabFree(0).Lqua.Lgpla
                    outDatiGiacenza.UbicazioneInfo.UnitaMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lenum
                    outDatiGiacenza.UbicazioneInfo.TipoUnitaMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Letyp
                    outDatiGiacenza.UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                    outDatiGiacenza.MagazzinoLogico = objWSResponse.ELquaTabFree(0).Lqua.Lgort

                    '>>> SE NECESSARIO VALORIZZO IL CODICE MATERIALE
                    If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(objWSResponse.ELquaTabFree(0).Lqua.Matnr, True) = True) Then
                        outDatiGiacenza.CodiceMateriale = objWSResponse.ELquaTabFree(0).Lqua.Matnr
                    End If

                    '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE (SE NE HO UNA VALIDA PRENDO QUELLA
                    If (clsUtility.IsStringValid(objWSResponse.ELquaTabFree(0).Lqua.Charg, True) = True) Then
                        outDatiGiacenza.Partita = objWSResponse.ELquaTabFree(0).Lqua.Charg
                    ElseIf (clsUtility.IsStringValid(objWSResponse.ELquaTabFree(0).Lqua.Charg, True) = False) And (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
                        outDatiGiacenza.Partita = inInfoStock.Partita
                    Else
                        outDatiGiacenza.Partita = ""
                    End If

                    outDatiGiacenza.CdStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sobkz
                    outDatiGiacenza.NumeroStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sonum
                    outDatiGiacenza.TipoStock = objWSResponse.ELquaTabFree(0).Lqua.Bestq
                    outDatiGiacenza.NumeroFabbisognoDiTrasporto = objWSResponse.ELquaTabFree(0).Lqua.Tbnum
                End If
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure


            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_CHECK_LENUM_GIACENZA")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            If (inCheckBlock = True) Then
                rfcFunction.SetValue("I_CHECK_BLOCK", "X")
            Else
                rfcFunction.SetValue("I_CHECK_BLOCK", "")
            End If
            If (inCheckBestQ = True) Then
                rfcFunction.SetValue("I_CHECK_BESTQ", "X")
            Else
                rfcFunction.SetValue("I_CHECK_BESTQ", "")
            End If
            If (inCheckOnProduction = True) Then
                rfcFunction.SetValue("I_CHECK_ON_PRODUCTION", "X")
            Else
                rfcFunction.SetValue("I_CHECK_ON_PRODUCTION", "")
            End If
            If (inCheckMixedItems = True) Then
                rfcFunction.SetValue("I_CHECK_MIXED_ITEM", "X")
            Else
                rfcFunction.SetValue("I_CHECK_MIXED_ITEM", "")
            End If

            If (clsUtility.IsStringValid(inCheckMixedItemsCodMateriale, True) = True) Then
                rfcFunction.SetValue("I_CHECK_MIXED_MATNR", inCheckMixedItemsCodMateriale)
            Else
                rfcFunction.SetValue("I_CHECK_MIXED_MATNR", "")
            End If
            If (clsUtility.IsStringValid(inCheckMixedItemsPartita, True) = True) Then
                rfcFunction.SetValue("I_CHECK_MIXED_CHARG", inCheckMixedItemsPartita)
            Else
                rfcFunction.SetValue("I_CHECK_MIXED_CHARG", "")
            End If

            rfcFunction.SetValue("I_WERKS", inInfoStock.UbicazioneInfo.Divisione)
            rfcFunction.SetValue("I_LGPLA", inInfoStock.UbicazioneInfo.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoStock.UbicazioneInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LGNUM", inInfoStock.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_LENUM", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino))
            rfcFunction.SetValue("I_MATNR", inInfoStock.CodiceMateriale)
            rfcFunction.SetValue("I_CHARG", inInfoStock.Partita)
            rfcFunction.SetValue("I_QTA_RICHIESTA", inInfoStock.QuantitaConfermataOperatore)
            rfcFunction.SetValue("I_MEINS", inInfoStock.UnitaDiMisuraAcquisizione)

            rfcFunction.SetValue("I_SKU", inInfoStock.SKU)

            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                ' (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) And 
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_OK") = "Y") Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_UM_ON_FINAL_LOC") = "X") Then
                    outUM_OnFinalLocation = True
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_UM_DIFF_MATERIAL") = "X") Then
                    outUM_DifferentMaterialCode = True
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_UM_DIFF_CHARG") = "X") Then
                    outUM_DifferentMaterialBatch = True
                End If

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_UM_BLOCKED") = "X") Then
                    outFlagCheckLenum.Flag_UM_BLOCKED = True
                Else
                    outFlagCheckLenum.Flag_UM_BLOCKED = False
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_UM_SPECIAL_STOCK") = "X") Then
                    outFlagCheckLenum.Flag_UM_SPECIAL_STOCK = True
                Else
                    outFlagCheckLenum.Flag_UM_SPECIAL_STOCK = False
                End If

                If Not (IsNothing(outFlagCheckLenum)) Then
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_MB31") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_MB31 = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_MB31 = False
                    End If

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_ON_TRASFER") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_ON_TRASFER = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_ON_TRASFER = False
                    End If

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_OT1_DONE") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_OT1_DONE = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_OT1_DONE = False
                    End If

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_TRASFER_OK") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_TRASFER_OK = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_TRASFER_OK = False
                    End If

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_SET_CQ") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_SET_CQ = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_SET_CQ = False
                    End If

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_REJECT") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_REJECT = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_REJECT = False
                    End If

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_PUTAWAY") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_PUTAWAY = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_PUTAWAY = False
                    End If

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_SKIPUNLOAD") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_SKIPUNLOAD = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_SKIPUNLOAD = False
                    End If


                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_MODIFICA") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_MODIFICA = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_MODIFICA = False
                    End If

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_CANCELLAZIO") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_CANCELLAZIO = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_CANCELLAZIO = False
                    End If

                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_RISCELTA") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_RISCELTA = True
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_RISCELTA = False
                    End If


                    'Controllo il Flag cumulativo di errori per effettuare il Putaway da Produzione e desc. Errore
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_ERROR_PUTAWAY") = "X") Then
                        outFlagCheckLenum.FlagE_PRD_FLAG_ERROR_PUTAWAY = True
                        outFlagCheckLenum.StrE_PRD_FLAG_ERR_PUTAWAY_DESCR = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_PRD_FLAG_ERR_PUTAWAY_DESCR")
                    Else
                        outFlagCheckLenum.FlagE_PRD_FLAG_ERROR_PUTAWAY = False
                        outFlagCheckLenum.StrE_PRD_FLAG_ERR_PUTAWAY_DESCR = ""
                    End If


                End If



                'Check Struttura LQUA not is nothing, per soluzione casi di catch nei LOG
                Dim Out_rfcStruct_LQUA As IRfcStructure

                rfcTable = rfcFunction.GetTable("E_LQUA_TAB_FREE")
                If (Not rfcTable Is Nothing) Then
                    If (rfcTable.Count > 0) Then
                        Out_rfcStruct_LQUA = rfcTable.GetStructure("LQUA")
                    End If
                End If

                Dim Out_rfcStruct_E_DATA_MARA As IRfcStructure = rfcFunction.GetStructure("E_DATA_MARA")
                Dim Out_rfcStruct_E_ZWM_STOCK_INFO_REC As IRfcStructure = rfcFunction.GetStructure("E_ZWM_STOCK_INFO_REC")
                Dim Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_MOB_TRASF_INFO")

                Dim Out_rfcStruct_E_VARIANTE_IMBALLO As IRfcStructure = rfcFunction.GetStructure("E_VARIANTE_IMBALLO")



                If (EnableCheckProdError = True) Then
                    If (inCheckProdError = True) Then

                        'Tabella con eventuale elenco Errori di ODP Produzione e Materiale
                        Dim Out_rfcTable_E_TAB_MSN As IRfcTable

                        If Not (rfcFunction.GetTable("E_TAB_MSN") Is Nothing) Then
                            Out_rfcTable_E_TAB_MSN = rfcFunction.GetTable("E_TAB_MSN")

                            If (Out_rfcTable_E_TAB_MSN.RowCount > 0) Then

                                ReDim outTabProdError(Out_rfcTable_E_TAB_MSN.RowCount - 1)

                                Dim Index As Integer
                                Index = 0
                                For Each rfcRow In Out_rfcTable_E_TAB_MSN
                                    outTabProdError(Index) = Out_rfcTable_E_TAB_MSN(Index).Item("ZZLOG").GetValue  '  clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_TAB_MSN, "ZZLOG")
                                    Index = Index + 1
                                Next
                            End If

                        End If

                    End If
                End If


                'RITORNO DATI DELLA GIACENZA TROVATA/E
                If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_DATA_MARA, "MATNR"), True) = True) Then
                    outDatiGiacenza.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_DATA_MARA, "MATNR")
                End If

                '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE
                If (outDatiGiacenza.Partita = "") Then
                    If (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
                        outDatiGiacenza.Partita = inInfoStock.Partita
                    Else
                        outDatiGiacenza.Partita = ""
                    End If
                End If
                outDatiGiacenza.DescrizioneMateriale = UCase(clsSapUtility.GetRFCParameterToString(rfcFunction, "E_TEXT_MAKTG"))
                outDatiGiacenza.QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_PRESENTE_BASE")
                outDatiGiacenza.QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DISPONIBILE_BASE")
                outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_IMMAGAZ_BASE")
                outDatiGiacenza.QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_PRELEVARE_BASE")
                outDatiGiacenza.QuantitaInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_PRESENTE_BASE")
                outDatiGiacenza.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "MEINS")
                outDatiGiacenza.QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_PRESENTE_CONS")
                outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DISPONIBILE_CONS")
                outDatiGiacenza.QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_IMMAGAZ_CONS")
                outDatiGiacenza.QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DA_PRELEVARE_CONS")
                outDatiGiacenza.UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "VRKME")
                outDatiGiacenza.UnitaDiMisuraPezzo = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "MEINS_PZ")
                outDatiGiacenza.QtaTotaleInStockSfusi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_PRESENTE_PZ")
                outDatiGiacenza.QtaTotaleDispoSfusi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DISPONIBILE_PZ")
                outDatiGiacenza.QtaTotaleInStockInUdmPZ = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_PRESENTE_PZ")
                outDatiGiacenza.QtaTotaleDispoInUdmPZ = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "QTA_TOT_DISPONIBILE_PZ")

                outDatiGiacenza.ZZWAREHOUSE_CODE = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "ZZWAREHOUSE_CODE")
                outDatiGiacenza.ZZSTORAGE_CODE = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "ZZSTORAGE_CODE")

                outDatiGiacenza.ZFLAG_SKIPUNLOAD = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "ZFLAG_SKIPUNLOAD")
                outDatiGiacenza.ZSKIPUNLOAD_DESC = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "ZSKIPUNLOAD_DESC")



                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_PICK_ALL_SU") = "X") Then
                    outDatiGiacenza.PickSUCompleto = True
                Else
                    outDatiGiacenza.PickSUCompleto = False
                End If

                '>>> RITORNO DATI VARIANTE IMBALLO
                RetCode = clsSapUtility.ResetSapVarianteImballoStruct(outDatiGiacenza.VarianteImballo)
                RetCode = clsSapUtility.TrasfVarianteImballoSapStruct(Out_rfcStruct_E_VARIANTE_IMBALLO, outDatiGiacenza.VarianteImballo, False)
                If (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) Then
                    outDatiGiacenza.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Werks")
                    outDatiGiacenza.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Lgnum")
                    outDatiGiacenza.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Lgtyp")
                    outDatiGiacenza.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Lgpla")
                    outDatiGiacenza.UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Lenum"))
                    outDatiGiacenza.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Letyp")
                    outDatiGiacenza.UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                    outDatiGiacenza.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Lgort")

                    '>>> SE NECESSARIO VALORIZZO IL CODICE MATERIALE
                    If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_DATA_MARA, "MATNR"), True) = True) Then
                        outDatiGiacenza.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_DATA_MARA, "MATNR")
                    End If

                    '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE (SE NE HO UNA VALIDA PRENDO QUELLA
                    If (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "CHARG"), True) = True) Then
                        outDatiGiacenza.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "CHARG")
                    ElseIf (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "CHARG"), True) = False) And (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
                        outDatiGiacenza.Partita = inInfoStock.Partita
                    Else
                        outDatiGiacenza.Partita = ""
                    End If

                    outDatiGiacenza.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Sobkz")
                    outDatiGiacenza.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Sonum")
                    outDatiGiacenza.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Bestq")
                    outDatiGiacenza.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_LQUA, "Tbnum")
                End If

                'GESTIONE INFO DATI SCARICO NAVETTA
                If Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO, "ZNR_WMS_JOBS") Is Nothing) Then
                    'outDatiGiacenza.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO, "ZNR_WMS_JOBS")
                    outDatiGiacenza.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO, "ZNR_WMS_JOBS", 0)
                End If
                If Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO, "ZNR_WMS_JOBSGRP") Is Nothing) Then
                    outDatiGiacenza.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO, "ZNR_WMS_JOBSGRP")
                End If
                If Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO, "ZMWS_TRUCK_DAYNR") Is Nothing) Then
                    outDatiGiacenza.TruckDayNr = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO, "ZMWS_TRUCK_DAYNR")
                End If
                If Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO, "ZTRASF_NUM_PALLE") Is Nothing) Then
                    outDatiGiacenza.TrasfNumPallet = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_ZWMS_MOB_TRASF_INFO, "ZTRASF_NUM_PALLE")
                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CHECK_LENUM_GIACENZA = RetCode 'errore
            Else
                Call_ZWS_MB_CHECK_LENUM_GIACENZA = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CHECK_MULTIPLE_LENUM(ByRef inTabLenum() As String, ByRef inInfoStock As clsDataType.SapWmGiacenza, ByVal inCheckBlock As Boolean, ByVal inCheckBestQ As Boolean, ByVal inCheckMaterialExist As Boolean, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outCheckDifferentMaterial As Boolean, ByRef outCheckDifferentCharg As Boolean, ByRef outCheckDifferentQty As Boolean, ByRef outDatiGiacenza As clsDataType.SapWmGiacenza, ByRef outSapWmGiacenzeFree() As clsDataType.SapWmGiacenza, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_CHECK_MULTIPLE_LENUM.ZWS_MB_CHECK_MULTIPLE_LENUM
        Dim stImportParams As New WS_MB_CHECK_MULTIPLE_LENUM.ZwmMbCheckMultipleLenum
        Dim objWSResponse As New WS_MB_CHECK_MULTIPLE_LENUM.ZwmMbCheckMultipleLenumResponse
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CHECK_MULTIPLE_LENUM = 1 'INIT AT ERROR

            If (inTabLenum Is Nothing) Then
                RetCode = 100
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " CHECK MULTIPLE LENUM. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ TabLenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inTabLenum.Length <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1126, "", " CHECK LENUM. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            outCheckDifferentMaterial = False
            outCheckDifferentCharg = False


#If APPLICAZIONE_WIN32 <> "SI" Then


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            If (inCheckBlock = True) Then
                stImportParams.ICheckBlock = "X"
            Else
                stImportParams.ICheckBlock = ""
            End If
            If (inCheckBestQ = True) Then
                stImportParams.ICheckBestq = "X"
            Else
                stImportParams.ICheckBestq = ""
            End If


            'FORMATTO UNITA DI MAGAZZINO 
            Dim WorkIndex As Long = 0
            For WorkIndex = 0 To inTabLenum.Length - 1
                inTabLenum(WorkIndex) = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inTabLenum(WorkIndex))
            Next


            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_multiple_lenum/" & SapClient & "/zws_mb_check_multiple_lenum/zws_mb_check_multiple_lenum"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbCheckMultipleLenum(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ECheckMatnrWrong = "Y") Then
                outCheckDifferentMaterial = True
            End If
            If (objWSResponse.ECheckChargWrong = "Y") Then
                outCheckDifferentCharg = True
            End If
            If (objWSResponse.ECheckQtyDifferent = "Y") Then
                outCheckDifferentQty = True
            End If
            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK
                'RITORNO DATI DELLA GIACENZA TROVATA/E
                If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(objWSResponse.EDataMara.Matnr, True) = True) Then
                    outDatiGiacenza.CodiceMateriale = objWSResponse.EDataMara.Matnr
                End If


                '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE
                If (outDatiGiacenza.Partita = "") Then
                    If (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
                        outDatiGiacenza.Partita = inInfoStock.Partita
                    Else
                        outDatiGiacenza.Partita = ""
                    End If
                End If
                outDatiGiacenza.DescrizioneMateriale = objWSResponse.ETextMaktg
                outDatiGiacenza.UnitaDiMisuraBase = objWSResponse.EZwmStockInfoRec.Meins
                outDatiGiacenza.UnitaDiMisuraAcquisizione = objWSResponse.EZwmStockInfoRec.Vrkme


                '>>> RITORNO DATI VARIANTE IMBALLO
                RetCode = clsSapUtility.ResetVarianteImballoStruct(outDatiGiacenza.VarianteImballo)
                RetCode = clsSapUtility.TrasfVarianteImballoSapStruct(objWSResponse.EVarianteImballo, outDatiGiacenza.VarianteImballo, False)
                If (objWSResponse.EFoundrows > 0) Then

                    outDatiGiacenza.QtaTotaleLquaInStock = objWSResponse.ELquaTabFree(0).Lqua.Gesme
                    outDatiGiacenza.QtaTotaleLquaDisponibile = objWSResponse.ELquaTabFree(0).Lqua.Verme
                    outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = objWSResponse.ELquaTabFree(0).Lqua.Einme
                    outDatiGiacenza.QtaTotaleLquaDaPrelevare = objWSResponse.ELquaTabFree(0).Lqua.Ausme
                    outDatiGiacenza.QuantitaInUdMBase = objWSResponse.ELquaTabFree(0).Lqua.Gesme

                    outDatiGiacenza.QtaTotaleLquaInStockUdMAcq = objWSResponse.ELquaTabFree(0).ZwmStockInfo.QtaTotPresenteCons
                    outDatiGiacenza.QtaTotaleLquaDispoUdMAcq = objWSResponse.ELquaTabFree(0).ZwmStockInfo.QtaTotDisponibileCons
                    outDatiGiacenza.QtaTotaleLquaDaImmaUdMAcq = objWSResponse.ELquaTabFree(0).ZwmStockInfo.QtaTotDaImmagazCons
                    outDatiGiacenza.QtaTotaleLquaDaPrelUdMAcq = objWSResponse.ELquaTabFree(0).ZwmStockInfo.QtaTotDaPrelevareCons
                    outDatiGiacenza.QuantitaInUdMAcquisizione = objWSResponse.ELquaTabFree(0).ZwmStockInfo.QtaTotPresenteCons

                    outDatiGiacenza.UbicazioneInfo.Divisione = objWSResponse.ELquaTabFree(0).Lqua.Werks
                    outDatiGiacenza.UbicazioneInfo.NumeroMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgnum
                    outDatiGiacenza.UbicazioneInfo.TipoMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lgtyp
                    outDatiGiacenza.UbicazioneInfo.Ubicazione = objWSResponse.ELquaTabFree(0).Lqua.Lgpla
                    outDatiGiacenza.UbicazioneInfo.UnitaMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Lenum
                    outDatiGiacenza.UbicazioneInfo.TipoUnitaMagazzino = objWSResponse.ELquaTabFree(0).Lqua.Letyp
                    outDatiGiacenza.UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                    outDatiGiacenza.MagazzinoLogico = objWSResponse.ELquaTabFree(0).Lqua.Lgort

                    '>>> SE NECESSARIO VALORIZZO IL CODICE MATERIALE
                    If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(objWSResponse.ELquaTabFree(0).Lqua.Matnr, True) = True) Then
                        outDatiGiacenza.CodiceMateriale = objWSResponse.ELquaTabFree(0).Lqua.Matnr
                    End If

                    '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE (SE NE HO UNA VALIDA PRENDO QUELLA
                    If (clsUtility.IsStringValid(objWSResponse.ELquaTabFree(0).Lqua.Charg, True) = True) Then
                        outDatiGiacenza.Partita = objWSResponse.ELquaTabFree(0).Lqua.Charg
                    ElseIf (clsUtility.IsStringValid(objWSResponse.ELquaTabFree(0).Lqua.Charg, True) = False) And (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
                        outDatiGiacenza.Partita = inInfoStock.Partita
                    Else
                        outDatiGiacenza.Partita = ""
                    End If

                    outDatiGiacenza.CdStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sobkz
                    outDatiGiacenza.NumeroStockSpeciale = objWSResponse.ELquaTabFree(0).Lqua.Sonum
                    outDatiGiacenza.TipoStock = objWSResponse.ELquaTabFree(0).Lqua.Bestq
                    outDatiGiacenza.NumeroFabbisognoDiTrasporto = objWSResponse.ELquaTabFree(0).Lqua.Tbnum

                    'COPIO IL RIFERIMENTO DELLE PALLET CARD
                    ReDim outDatiGiacenza.MultipleUnitaMagazzino(objWSResponse.EFoundrows - 1)
                    For LoopIndex = 0 To (objWSResponse.EFoundrows - 1)
                        outDatiGiacenza.MultipleUnitaMagazzino(LoopIndex) = objWSResponse.ELquaTabFree(LoopIndex).Lqua.Lenum
                    Next
                End If
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_CHECK_MULTIPLE_LENUM")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            If (inCheckBlock = True) Then
                rfcFunction.SetValue("I_CHECK_BLOCK", "X")
            Else
                rfcFunction.SetValue("I_CHECK_BLOCK", "")
            End If
            If (inCheckBestQ = True) Then
                rfcFunction.SetValue("I_CHECK_BESTQ", "X")
            Else
                rfcFunction.SetValue("I_CHECK_BESTQ", "")
            End If

            'FORMATTO UNITA DI MAGAZZINO 
            Dim WorkIndex As Long = 0
            For WorkIndex = 0 To inTabLenum.Length - 1
                inTabLenum(WorkIndex) = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inTabLenum(WorkIndex))
            Next


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (rfcFunction.GetObject("E_CHECK_MATNR_WRONG").ToString = "Y") Then
                outCheckDifferentMaterial = True
            End If
            If (rfcFunction.GetObject("E_CHECK_CHARG_WRONG").ToString = "Y") Then
                outCheckDifferentMaterial = True
            End If
            If (rfcFunction.GetObject("E_CHECK_QTY_DIFFERENT").ToString = "Y") Then
                outCheckDifferentMaterial = True
            End If


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_OK") = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK
                'RITORNO DATI DELLA GIACENZA TROVATA/E

                rfcTable = rfcFunction.GetTable("E_LQUA_TAB_FREE")
                Dim Out_rfcStruct_LQUA As IRfcStructure = rfcTable.GetStructure("LQUA")
                Dim Out_rfcStruct_E_DATA_MARA As IRfcStructure = rfcFunction.GetStructure("E_DATA_MARA")
                Dim Out_rfcStruct_E_ZWM_STOCK_INFO_REC As IRfcStructure = rfcFunction.GetStructure("E_ZWM_STOCK_INFO_REC")

                Dim rfcTable_E_VARIANTE_IMBALLO As IRfcTable = rfcFunction.GetTable("E_VARIANTE_IMBALLO")


                If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_DATA_MARA, "MATNR"), True) = True) Then
                    outDatiGiacenza.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_DATA_MARA, "MATNR")
                End If


                '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE
                If (outDatiGiacenza.Partita = "") Then
                    If (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
                        outDatiGiacenza.Partita = inInfoStock.Partita
                    Else
                        outDatiGiacenza.Partita = ""
                    End If
                End If
                outDatiGiacenza.DescrizioneMateriale = UCase(clsSapUtility.GetRFCParameterToString(rfcFunction, "E_TEXT_MAKTG"))
                outDatiGiacenza.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "MEINS")
                outDatiGiacenza.UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWM_STOCK_INFO_REC, "VRKME")


                '>>> RITORNO DATI VARIANTE IMBALLO
                RetCode = clsSapUtility.ResetSapVarianteImballoStruct(outDatiGiacenza.VarianteImballo)
                RetCode = clsSapUtility.TrasfVarianteImballoSapStruct(objWSResponse.EVarianteImballo, outDatiGiacenza.VarianteImballo, False)


                If (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) Then

                    outDatiGiacenza.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "WERKS")
                    outDatiGiacenza.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LGNUM")
                    outDatiGiacenza.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LGTYP")
                    outDatiGiacenza.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LGPLA")
                    outDatiGiacenza.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LENUM")
                    outDatiGiacenza.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LETYP")
                    outDatiGiacenza.UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                    outDatiGiacenza.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "LGORT")


                    '>>> SE NECESSARIO VALORIZZO IL CODICE MATERIALE
                    If (outDatiGiacenza.CodiceMateriale = "") And (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "MATNR"), True) = True) Then
                        outDatiGiacenza.CodiceMateriale = clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "MATNR"), True)
                    End If

                    '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE (SE NE HO UNA VALIDA PRENDO QUELLA
                    If (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "CHARG"), True) = True) Then
                        outDatiGiacenza.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "CHARG")
                    ElseIf (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "CHARG"), True) = False) And (clsUtility.IsStringValid(inInfoStock.Partita, True) = True) Then
                        outDatiGiacenza.Partita = inInfoStock.Partita
                    Else
                        outDatiGiacenza.Partita = ""
                    End If

                    outDatiGiacenza.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Sobkz")
                    outDatiGiacenza.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Sonum")
                    outDatiGiacenza.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Bestq")
                    outDatiGiacenza.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA, "Tbnum")
                End If


            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1063, "", "Unità Magazzino non trovata.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CHECK_MULTIPLE_LENUM = RetCode 'errore
            Else
                Call_ZWS_MB_CHECK_MULTIPLE_LENUM = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CHECK_LENUM_WITH_LGPLA(ByRef inInfoStock As clsDataType.SapWmGiacenza, ByVal inLingua As String, ByRef outExecutionOk As Boolean, ByRef outCheckUbicazioneOk As Boolean, ByRef outCheckUnitaMagOk As Boolean, ByRef outCheckUMInUbicazioneOk As Boolean, ByRef outSapWmGiacenze() As clsDataType.SapWmGiacenza, ByRef outUbicazione As clsDataType.SapWmUbicazione, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim LoopIndex As Double

        Dim objWS As New WS_MB_CHECK_LENUM_WITH_LGPLA.ZWS_MB_CHECK_LENUM_WITH_LGPLA
        Dim stImportParams As New WS_MB_CHECK_LENUM_WITH_LGPLA.ZwmMbCheckLenumWithLgpla
        Dim objWSResponse As New WS_MB_CHECK_LENUM_WITH_LGPLA.ZwmMbCheckLenumWithLgplaResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CHECK_LENUM_WITH_LGPLA = 1 'INIT AT ERROR

            outExecutionOk = False
            outCheckUbicazioneOk = False
            outCheckUnitaMagOk = False
            outCheckUMInUbicazioneOk = False

            ReDim outSapWmGiacenze(0) 'INIT ARRAY
            RetCode += clsSapUtility.ResetUbicazioneStruct(outUbicazione)

            If (Len(inInfoStock.UbicazioneInfo.UnitaMagazzino) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1126, "", " CHECK LENUM. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.ILgpla = inInfoStock.UbicazioneInfo.Ubicazione
            stImportParams.ILgtyp = inInfoStock.UbicazioneInfo.TipoMagazzino
            stImportParams.ILgnum = inInfoStock.UbicazioneInfo.NumeroMagazzino
            stImportParams.ILenum = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino)
            stImportParams.ILanguage = inLingua

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_lenum_with_lgpla/" & SapClient & "/zws_mb_check_lenum_with_lgpla/zws_mb_check_lenum_with_lgpla"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbCheckLenumWithLgpla(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then

                outExecutionOk = True

                If (objWSResponse.ECheckLenumOk = "Y") Then
                    outCheckUnitaMagOk = True
                End If
                If (objWSResponse.ECheckLgplaOk = "Y") Then
                    outCheckUbicazioneOk = True
                    outUbicazione.NumeroMagazzino = objWSResponse.ELagp.Lgnum
                    outUbicazione.TipoMagazzino = objWSResponse.ELagp.Lgtyp
                    outUbicazione.Ubicazione = objWSResponse.ELagp.Lgpla
                End If
                If (objWSResponse.ECheckLenumWithLgplaOk = "Y") Then
                    outCheckUMInUbicazioneOk = True
                End If

                If (objWSResponse.EFoundrows > 0) Then
                    ReDim outSapWmGiacenze(objWSResponse.EFoundrows - 1)
                    For Index = 0 To objWSResponse.EFoundrows - 1
                        outSapWmGiacenze(Index).UbicazioneInfo.Divisione = objWSResponse.ELquaTab(Index).Werks
                        outSapWmGiacenze(Index).UbicazioneInfo.NumeroMagazzino = objWSResponse.ELquaTab(Index).Lgnum
                        outSapWmGiacenze(Index).UbicazioneInfo.TipoMagazzino = objWSResponse.ELquaTab(Index).Lgtyp
                        outSapWmGiacenze(Index).UbicazioneInfo.Ubicazione = objWSResponse.ELquaTab(Index).Lgpla
                        outSapWmGiacenze(Index).UbicazioneInfo.UnitaMagazzino = objWSResponse.ELquaTab(Index).Lenum
                        outSapWmGiacenze(Index).UbicazioneInfo.TipoUnitaMagazzino = objWSResponse.ELquaTab(Index).Letyp
                        If (objWSResponse.EGestioneUmAttiva = "X") Then
                            outSapWmGiacenze(Index).UbicazioneInfo.AbilitaUnitaMagazzino = True
                        Else
                            outSapWmGiacenze(Index).UbicazioneInfo.AbilitaUnitaMagazzino = False
                        End If
                        outSapWmGiacenze(Index).MagazzinoLogico = objWSResponse.ELquaTab(Index).Lgort
                        '>>> IMPOSTO DATI MATERIALE
                        outSapWmGiacenze(Index).CodiceMateriale = objWSResponse.ELquaTab(Index).Matnr
                        outSapWmGiacenze(Index).Partita = objWSResponse.ELquaTab(Index).Charg
                        outSapWmGiacenze(Index).UnitaDiMisuraBase = objWSResponse.ELquaTab(Index).Meins
                        outSapWmGiacenze(Index).CdStockSpeciale = objWSResponse.ELquaTab(Index).Sobkz
                        outSapWmGiacenze(Index).NumeroStockSpeciale = objWSResponse.ELquaTab(Index).Sonum
                        outSapWmGiacenze(Index).TipoStock = objWSResponse.ELquaTab(Index).Bestq
                        outSapWmGiacenze(Index).NumeroFabbisognoDiTrasporto = objWSResponse.ELquaTab(Index).Tbnum
                    Next
                End If
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_CHECK_LENUM_WITH_LGPLA")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            rfcFunction.SetValue("I_LENUM", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino))
            rfcFunction.SetValue("I_LGNUM", inInfoStock.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_LGPLA", inInfoStock.UbicazioneInfo.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoStock.UbicazioneInfo.TipoMagazzino)

            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            'If (inCheckOnProduction = True) Then
            '    rfcFunction.SetValue("I_CHECK_ON_PRODUCTION", "X")
            'Else
            '    rfcFunction.SetValue("I_CHECK_ON_PRODUCTION", "")
            'End If


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_SUCCESS") = "Y") Then

                outExecutionOk = True

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_LENUM_OK") = "Y") Then
                    outCheckUnitaMagOk = True
                End If

                Dim Out_rfcStruct_LAGP As IRfcStructure = rfcFunction.GetStructure("E_LAGP")

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_LGPLA_OK") = "Y") Then
                    outCheckUbicazioneOk = True
                    outUbicazione.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LAGP, "LGNUM")
                    outUbicazione.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LAGP, "LGTYP")
                    outUbicazione.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LAGP, "LGPLA")
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_LENUM_WITH_LGPLA_OK") = "Y") Then
                    outCheckUMInUbicazioneOk = True
                End If

                If (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_FOUNDROWS") > 0) Then


                    'Ricavo valori Tabella parametro LAGP
                    rfcTable = rfcFunction.GetTable("E_LQUA_TAB")


                    '>>> RITORNO DATI DELL'OT
                    If (Not rfcTable Is Nothing) Then
                        If (rfcTable.RowCount > 0) Then
                            LoopIndex = 0

                            ReDim outSapWmGiacenze(rfcTable.RowCount - 1)
                            For Each rfcRow In rfcTable

                                outSapWmGiacenze(LoopIndex).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                                outSapWmGiacenze(LoopIndex).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                                outSapWmGiacenze(LoopIndex).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToLong(rfcRow, "LGTYP")
                                outSapWmGiacenze(LoopIndex).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToLong(rfcRow, "LGPLA")
                                outSapWmGiacenze(LoopIndex).UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToLong(rfcRow, "LENUM")
                                outSapWmGiacenze(LoopIndex).UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToLong(rfcRow, "LETYP")

                                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_GESTIONE_UM_ATTIVA") = "X") Then
                                    outSapWmGiacenze(LoopIndex).UbicazioneInfo.AbilitaUnitaMagazzino = True
                                Else
                                    outSapWmGiacenze(LoopIndex).UbicazioneInfo.AbilitaUnitaMagazzino = False
                                End If

                                outSapWmGiacenze(LoopIndex).MagazzinoLogico = clsSapUtility.GetRFCStructParamToLong(rfcRow, "LGORT")

                                '>>> IMPOSTO DATI MATERIALE
                                outSapWmGiacenze(LoopIndex).CodiceMateriale = clsSapUtility.GetRFCStructParamToLong(rfcRow, "MATNR")
                                outSapWmGiacenze(LoopIndex).Partita = clsSapUtility.GetRFCStructParamToLong(rfcRow, "CHARG")
                                outSapWmGiacenze(LoopIndex).UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToLong(rfcRow, "MEINS")
                                outSapWmGiacenze(LoopIndex).CdStockSpeciale = clsSapUtility.GetRFCStructParamToLong(rfcRow, "SOBKZ")
                                outSapWmGiacenze(LoopIndex).NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToLong(rfcRow, "SONUM")
                                outSapWmGiacenze(LoopIndex).TipoStock = clsSapUtility.GetRFCStructParamToLong(rfcRow, "BESTQ")
                                outSapWmGiacenze(LoopIndex).NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TBNUM")

                                LoopIndex += 1
                            Next

                        End If
                    End If

                End If

            End If


#End If



            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1063, "", "Unità Magazzino non trovata.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CHECK_LENUM_WITH_LGPLA = RetCode 'errore
            Else
                Call_ZWS_MB_CHECK_LENUM_WITH_LGPLA = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_CHECK_UDC_JOBS_DEST_OK(ByRef inInfoStock As clsDataType.SapWmGiacenza, ByRef inWmsJob As clsDataType.SapWmWmsJob, ByVal inLingua As String, ByRef outCheckDestUdcOk As Boolean, ByRef outSapAnagraficaClienteJobCurrent As clsDataType.SapAnagraficaCliente, ByRef outSapAnagraficaClienteJobOthers As clsDataType.SapAnagraficaCliente, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim objWS As New WS_CHECK_UDC_JOBS_DEST_OK.ZWS_CHECK_UDC_JOBS_DEST_OK
        Dim stImportParams As New WS_CHECK_UDC_JOBS_DEST_OK.ZwmsCheckUdcJobsDestOk
        Dim objWSResponse As New WS_CHECK_UDC_JOBS_DEST_OK.ZwmsCheckUdcJobsDestOkResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_UDC_JOBS_DEST_OK = 1 'INIT AT ERROR

            outCheckDestUdcOk = False 'INIT
            RetCode = clsSapUtility.ResetSapAnagraficaClienteStruct(outSapAnagraficaClienteJobCurrent) 'INIT
            RetCode = clsSapUtility.ResetSapAnagraficaClienteStruct(outSapAnagraficaClienteJobOthers) 'INIT

            If (Len(inInfoStock.UbicazioneInfo.UnitaMagazzino) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1119, "", " CHECK UDC JOBS DEST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inWmsJob.NrWmsJobs) <= 0) Then
                RetCode = 210
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1119, "", " CHECK UDC JOBS DEST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1083, "", "NrWmsJobs") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inWmsJob.NrWmsJobs
            stImportParams.ILenum = inInfoStock.UbicazioneInfo.UnitaMagazzino
            stImportParams.IWerks = inInfoStock.UbicazioneInfo.Divisione
            stImportParams.ISpras = inLingua

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_check_udc_jobs_dest_ok/" & SapClient & "/zws_check_udc_jobs_dest_ok/zws_check_udc_jobs_dest_ok"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmsCheckUdcJobsDestOk(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                If (objWSResponse.ECheckDestUdcOk = "Y") Then
                    outCheckDestUdcOk = True 'UNICO CASO DI CHECK OK
                End If


                'RITORNO DATI DELLA DESTINAZIONE DELLA MISSIONE CORRENTE
                outSapAnagraficaClienteJobCurrent.CodiceCliente = objWSResponse.EKna1Current.Kunnr
                outSapAnagraficaClienteJobCurrent.CodicePaese = objWSResponse.EKna1Current.Land1
                outSapAnagraficaClienteJobCurrent.Nome1 = objWSResponse.EKna1Current.Name1
                outSapAnagraficaClienteJobCurrent.Nome2 = objWSResponse.EKna1Current.Name2
                outSapAnagraficaClienteJobCurrent.Localita = objWSResponse.EKna1Current.Ort01
                outSapAnagraficaClienteJobCurrent.CAP = objWSResponse.EKna1Current.Pstlz
                outSapAnagraficaClienteJobCurrent.Regione = objWSResponse.EKna1Current.Regio
                outSapAnagraficaClienteJobCurrent.CodiceIndirizzo = objWSResponse.EKna1Current.Adrnr
                outSapAnagraficaClienteJobCurrent.Telefono = objWSResponse.EKna1Current.Telf1

                'RITORNO DATI DELLA DESTINAZIONE DELLA MISSIONE CORRENTE
                outSapAnagraficaClienteJobOthers.CodiceCliente = objWSResponse.EKna1WrongDest.Kunnr
                outSapAnagraficaClienteJobOthers.CodicePaese = objWSResponse.EKna1WrongDest.Land1
                outSapAnagraficaClienteJobOthers.Nome1 = objWSResponse.EKna1WrongDest.Name1
                outSapAnagraficaClienteJobOthers.Nome2 = objWSResponse.EKna1WrongDest.Name2
                outSapAnagraficaClienteJobOthers.Localita = objWSResponse.EKna1WrongDest.Ort01
                outSapAnagraficaClienteJobOthers.CAP = objWSResponse.EKna1WrongDest.Pstlz
                outSapAnagraficaClienteJobOthers.Regione = objWSResponse.EKna1WrongDest.Regio
                outSapAnagraficaClienteJobOthers.CodiceIndirizzo = objWSResponse.EKna1WrongDest.Adrnr
                outSapAnagraficaClienteJobOthers.Telefono = objWSResponse.EKna1WrongDest.Telf1

            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckDestUdcOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1064, "", "Materiali nella UDC con DESTINAZIONE diversa.") & vbCrLf & clsAppTranslation.GetSingleParameterValue(348, "", "Verificare e riprovare")
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_CHECK_UDC_JOBS_DEST_OK = RetCode 'errore
            Else
                Call_ZWS_CHECK_UDC_JOBS_DEST_OK = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_CHECK_PICK_ALL_SU(ByRef inInfoStock As clsDataType.SapWmGiacenza, ByVal inQtyToPick As Double, ByVal inUdMQty As String, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outCheckPickAllSU As Boolean, ByRef outDatiGiacenza As clsDataType.SapWmGiacenza, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim objWS As New WS_CHECK_PICK_ALL_SU.ZWS_CHECK_PICK_ALL_SU
        Dim stImportParams As New WS_CHECK_PICK_ALL_SU.ZwmCheckPickAllSu
        Dim objWSResponse As New WS_CHECK_PICK_ALL_SU.ZwmCheckPickAllSuResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_PICK_ALL_SU = 1 'INIT AT ERROR

            outCheckOk = False
            outCheckPickAllSU = False

            If (Len(inInfoStock.UbicazioneInfo.UnitaMagazzino) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1118, "", " CHECK PICK ALL SU. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoStock.CodiceMateriale) <= 0) Then
                RetCode = 210
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1118, "", " CHECK PICK ALL SU. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1078, "", "CodiceMateriale") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inQtyToPick <= 0) Then
                RetCode = 220
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1118, "", " CHECK PICK ALL SU. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1084, "", "QtyToPick") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If Not APPLICAZIONE_WIN32 = "SI" Then


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.ILenum = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino)
            stImportParams.IMatnr = inInfoStock.CodiceMateriale
            stImportParams.IQtaToPick = inQtyToPick
            stImportParams.IMeins = inUdMQty
            stImportParams.ICharg = inInfoStock.Partita
            stImportParams.ILanguage = inLingua

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_check_pick_all_su/" & SapClient & "/zws_check_pick_all_su/zws_check_pick_all_su"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmCheckPickAllSu(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                'UNICO CASO IN CUI HO PRELEVATO TUTTA LA PALETTA
                If (objWSResponse.ECheckPickAll = "X") Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If
                If (objWSResponse.EFoundrows > 0) Then

                End If
            End If

#Else


            'SAP RFC
            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_CHECK_PICK_ALL_SU")


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LENUM", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inInfoStock.UbicazioneInfo.UnitaMagazzino))
            rfcFunction.SetValue("I_MATNR", inInfoStock.CodiceMateriale)
            rfcFunction.SetValue("I_QTA_TO_PICK", inQtyToPick)
            rfcFunction.SetValue("I_MEINS", inUdMQty)
            rfcFunction.SetValue("I_CHARG", inInfoStock.Partita)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outCheckOk = True 'FLAG ESECUZIONE OK
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_PICK_ALL") = "X") Then
                    outCheckPickAllSU = True
                End If
                If (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_FOUNDROWS") > 0) Then

                End If
            Else
                outCheckOk = False  'Errore nel trasferimento
            End If



#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(103, "", "Errore in esecuzione [CHECK_PICK_ALL_SU].Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(CHECK_PICK_ALL_SU)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_CHECK_PICK_ALL_SU = RetCode
            Else
                Call_ZWS_CHECK_PICK_ALL_SU = 0 'TUTTO OK
            End If
        End Try


    End Function

    Public Shared Function Call_ZWS_CHECK_JOBGROUP_OK_X_CLOSE(ByRef inNumeroJobsGroup As String, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outJobNotOk As clsDataType.SapWmWmsJob, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim objWS As New WS_CHECK_JOBGROUP_OK_X_CLOSE.ZWS_CHECK_JOBGROUP_OK_X_CLOSE
        Dim stImportParams As New WS_CHECK_JOBGROUP_OK_X_CLOSE.ZwmsCheckJobgroupOkXClose
        Dim objWSResponse As New WS_CHECK_JOBGROUP_OK_X_CLOSE.ZwmsCheckJobgroupOkXCloseResponse
        Dim RetFunctionSuccess As String = ""
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_JOBGROUP_OK_X_CLOSE = 1 'INIT AT ERROR

            outCheckOk = False

            If (clsUtility.IsStringValid(inNumeroJobsGroup, True) = False) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1124, "", " CHECKJBGRP_OK_X_CLOSE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1085, "", "NumeroJobsGroup") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then

            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobsgrp = inNumeroJobsGroup
            stImportParams.ISpras = inLingua

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_check_jobgroup_ok_x_close/" & SapClient & "/zws_check_jobgroup_ok_x_close/zws_check_jobgroup_ok_x_close"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmsCheckJobgroupOkXClose(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            RetFunctionSuccess = objWSResponse.ESuccess
            If (objWSResponse.ESuccess = "Y") Then
                'SE ARRIVO QUI HO L'ESECUZIONE DELLA FUNZIONE CORRETTA
                If (objWSResponse.ECheckOk = "X") Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_CHECK_JOBGROUP_OK_X_CLOSE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_Znr_Wms_Jobsgrp", inNumeroJobsGroup)
            rfcFunction.SetValue("I_Spras", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)

            RetFunctionSuccess = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success")
            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                'SE ARRIVO QUI HO L'ESECUZIONE DELLA FUNZIONE CORRETTA

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Check_Ok") = "X") Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (RetFunctionSuccess <> "Y") Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(104, "", "Errore in esecuzione [CHECKJBGRP_OK_X_CLOSE].Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_CHECK_JOBGROUP_OK_X_CLOSE = RetCode 'errore
            Else
                Call_ZWS_CHECK_JOBGROUP_OK_X_CLOSE = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_CHECK_JOBSGROUP_MATNR_OK(ByRef inNumeroJobsGroup As String, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outJobNotOk As clsDataType.SapWmWmsJob, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim objWS As New WS_CHECK_JOBSGROUP_MATNR_OK.ZWS_CHECK_JOBSGROUP_MATNR_OK
        Dim stImportParams As New WS_CHECK_JOBSGROUP_MATNR_OK.ZwmsCheckJobsgroupMatnrOk
        Dim objWSResponse As New WS_CHECK_JOBSGROUP_MATNR_OK.ZwmsCheckJobsgroupMatnrOkResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_JOBSGROUP_MATNR_OK = 1 'INIT AT ERROR

            If (clsUtility.IsStringValid(inNumeroJobsGroup, True) = False) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1125, "", " CHECKJBGRP_MATNR_OK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1085, "", "NumeroJobsGroup") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobsgrp = inNumeroJobsGroup
            stImportParams.ISpras = inLingua

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_check_jobsgroup_matnr_ok/" & SapClient & "/zws_check_jobsgroup_matnr_ok/zws_check_jobsgroup_matnr_ok"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmsCheckJobsgroupMatnrOk(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                'UNICO CASO IN CUI HO PRELEVATO TUTTA LA PALETTA
                If (objWSResponse.ECheckOk = "X") Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If
                If (objWSResponse.EFoundrows > 0) Then

                End If
            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (objWSResponse.ESuccess <> "Y") Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1065, "", "Errore in esecuzione [CHECKJBGRP_MATNR_OK].Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_CHECK_JOBSGROUP_MATNR_OK = RetCode 'errore
            Else
                Call_ZWS_CHECK_JOBSGROUP_MATNR_OK = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_JOB_STEPS_EXECUTED(ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByVal inQuantitaConfermataOperatore As Double, ByVal inQuantitaConfermataOperatoreSfusi As Double, ByVal inFlagStepEnded As Boolean, ByVal inInfoPrelievo As String, ByVal inLingua As String, ByRef outExecutionOk As Boolean, ByRef outSapWmOtInfo() As clsDataType.SapWmOtInfo, ByRef outZwmsJobsRec As clsDataType.SapWmWmsJob, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkString As String

        Dim objWS As New WS_JOB_STEPS_EXECUTED.ZWS_JOB_STEPS_EXECUTED
        Dim stImportParams As New WS_JOB_STEPS_EXECUTED.ZwmsJobStepsExecuted
        Dim objWSResponse As New WS_JOB_STEPS_EXECUTED.ZwmsJobStepsExecutedResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_JOB_STEPS_EXECUTED = 1 'INIT AT ERROR

            outExecutionOk = False 'INIT
            ReDim outSapWmOtInfo(0) 'INIT

            If (inSapWmWmsJob.NrWmsJobs <= 0) Then
                RetCode = 100
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1117, "", " STEP EXEC. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1083, "", "NrWmsJobs") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inSapWmWmsJob.IdWmsJobType) <= 0) Then
                RetCode = 110
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1117, "", " STEP EXEC. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1087, "", "IdWmsJobType") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inSapWmWmsJob.NrWmsJobs
            stImportParams.IIdJobsType = inSapWmWmsJob.IdWmsJobType
            stImportParams.IZwmsJobsStep = inSapWmWmsJob.CurrentStep
            If (inFlagStepEnded = True) Then
                stImportParams.IFlagStepEnded = "X"
            Else
                stImportParams.IFlagStepEnded = ""
            End If

            'DATI GIACENZA ORIGINE
            stImportParams.IMatnrOri = inSapWmWmsJob.MaterialeGiacenzaOrigine.CodiceMateriale
            stImportParams.IWerksOri = inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione
            stImportParams.ILgortOri = inSapWmWmsJob.MaterialeGiacenzaOrigine.MagazzinoLogico
            stImportParams.IChargOri = inSapWmWmsJob.MaterialeGiacenzaOrigine.Partita
            stImportParams.IMeinsOri = inSapWmWmsJob.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta
            stImportParams.IQtaPrelBase = String.Format(inQuantitaConfermataOperatore, "0.000")
            stImportParams.IQtaPrelBase = Replace(stImportParams.IQtaPrelBase, ",", ".")
            stImportParams.IUdmBase = inSapWmWmsJob.MaterialeGiacenzaOrigine.UnitaDiMisuraBase
            stImportParams.IBestq = inSapWmWmsJob.MaterialeGiacenzaOrigine.TipoStock
            stImportParams.ISobkz = inSapWmWmsJob.MaterialeGiacenzaOrigine.CdStockSpeciale
            stImportParams.ISonum = inSapWmWmsJob.MaterialeGiacenzaOrigine.NumeroStockSpeciale
            stImportParams.ILqnumOri = inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroQuantWmSap
            stImportParams.ILgnumOri = inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino
            stImportParams.ILgtypOri = inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino
            stImportParams.ILgplaOri = inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione
            stImportParams.ILenumOri = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino)
            stImportParams.ILetyp = inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoUnitaMagazzino

            'DATI GIACENZA DESTINAZIONE
            stImportParams.IMatnrDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.CodiceMateriale
            stImportParams.IWerksDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione
            stImportParams.ILgortDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.MagazzinoLogico
            stImportParams.IChargDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.Partita
            stImportParams.ILqnumDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroQuantWmSap
            stImportParams.ILgnumDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino
            stImportParams.ILgtypDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino
            stImportParams.ILgplaDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione
            stImportParams.ILenumDest = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino)

            stImportParams.IInfoPrelievo = inInfoPrelievo
            stImportParams.IUseridRf = clsUser.SapWmsUser.USERID

            stImportParams.ISpras = inLingua
            stImportParams.IGetZwmsJobsRec = "X"

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_job_steps_executed/" & SapClient & "/zws_job_steps_executed/zws_job_steps_executed"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'ESEGUO CHIAMATA WEB SERVICES
            objWSResponse = objWS.ZwmsJobStepsExecuted(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outExecutionOk = True

                outSapWmOtInfo(0).NumeroOrdineDiTrasferimento = objWSResponse.EOtInfo.Tanum

                outZwmsJobsRec.NrWmsJobs = objWSResponse.EZwmsJobsRec.ZnrWmsJobs
                outZwmsJobsRec.CodiceGruppoMissioni = objWSResponse.EZwmsJobsRec.ZnrWmsJobsgrp
                outZwmsJobsRec.CodiceRaggruppoEsecuzione = objWSResponse.EZwmsJobsRec.ZnrWmsGrpexec
                outZwmsJobsRec.IdWmsJobStatus = objWSResponse.EZwmsJobsRec.Idstatus
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione = objWSResponse.EZwmsJobsRec.WerksOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.MagazzinoLogico = objWSResponse.EZwmsJobsRec.LgortOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CodiceMateriale = objWSResponse.EZwmsJobsRec.MatnrOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.Partita = objWSResponse.EZwmsJobsRec.ChargOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.TipoStock = objWSResponse.EZwmsJobsRec.BestqOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CdStockSpeciale = objWSResponse.EZwmsJobsRec.SobkzOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.NumeroStockSpeciale = objWSResponse.EZwmsJobsRec.SonumOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino = objWSResponse.EZwmsJobsRec.LgnumOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino = objWSResponse.EZwmsJobsRec.LgtypOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione = objWSResponse.EZwmsJobsRec.LgplaOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino = objWSResponse.EZwmsJobsRec.LenumOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta = objWSResponse.EZwmsJobsRec.MeinsOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmOriginale = objWSResponse.EZwmsJobsRec.ZqtapkOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMBase = objWSResponse.EZwmsJobsRec.ZqtaPrelBase
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMBase = objWSResponse.EZwmsJobsRec.UdmQtaprMeins
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMConsegna = objWSResponse.EZwmsJobsRec.ZqtaPrelCons
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMConsegna = objWSResponse.EZwmsJobsRec.UdmQtaprCons

                '>>> DATI DESTINAZIONE
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione = objWSResponse.EZwmsJobsRec.WerksDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.MagazzinoLogico = objWSResponse.EZwmsJobsRec.LgortDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CodiceMateriale = objWSResponse.EZwmsJobsRec.MatnrDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.Partita = objWSResponse.EZwmsJobsRec.ChargDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.TipoStock = objWSResponse.EZwmsJobsRec.BestqDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CdStockSpeciale = objWSResponse.EZwmsJobsRec.SobkzDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.NumeroStockSpeciale = objWSResponse.EZwmsJobsRec.SonumDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino = objWSResponse.EZwmsJobsRec.LgnumDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino = objWSResponse.EZwmsJobsRec.LgtypDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione = objWSResponse.EZwmsJobsRec.LgplaDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino = objWSResponse.EZwmsJobsRec.LenumDest

                outZwmsJobsRec.Sequence = objWSResponse.EZwmsJobsRec.Sequence
                outZwmsJobsRec.CurrentStep = objWSResponse.EZwmsJobsRec.CurrentStep
                outZwmsJobsRec.NumeroStepTotali = objWSResponse.EZwmsJobsRec.NumStepsTotal
                outZwmsJobsRec.DataCreazione = objWSResponse.EZwmsJobsRec.DataCreazione
                outZwmsJobsRec.OraCreazione = objWSResponse.EZwmsJobsRec.OraCreazione
                outZwmsJobsRec.PickDbNumero = objWSResponse.EZwmsJobsRec.Znrpick
                outZwmsJobsRec.PickDbPosizione = objWSResponse.EZwmsJobsRec.Zpospk
                outZwmsJobsRec.NumeroOrdineVendita = objWSResponse.EZwmsJobsRec.Vbeln
                outZwmsJobsRec.NumeroPosizioneOrdineVendita = objWSResponse.EZwmsJobsRec.Posnr
                outZwmsJobsRec.ConsegnaNumero = objWSResponse.EZwmsJobsRec.NumConsVbelv
                outZwmsJobsRec.ConsegnaPosizione = objWSResponse.EZwmsJobsRec.PosConsPosnv
                outZwmsJobsRec.IdWmsJobType = objWSResponse.EZwmsJobsRec.IdJobsType
                outZwmsJobsRec.Priorita = objWSResponse.EZwmsJobsRec.Priorita

                WorkString = objWSResponse.EZwmsJobsRec.Urgente
                If (WorkString = "X") Then
                    outZwmsJobsRec.Urgente = True
                Else
                    outZwmsJobsRec.Urgente = False
                End If

                outZwmsJobsRec.FlagRilevanteWM = objWSResponse.EZwmsJobsRec.Zflawm
                WorkString = objWSResponse.EZwmsJobsRec.PalletInteri
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagPalletInteri = True
                Else
                    outZwmsJobsRec.FlagPalletInteri = False
                End If
                WorkString = objWSResponse.EZwmsJobsRec.ScatoleIntere
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagScatoleIntere = True
                Else
                    outZwmsJobsRec.FlagScatoleIntere = False
                End If
                outZwmsJobsRec.FlagPartitaTassativa = objWSResponse.EZwmsJobsRec.ChargTassativa
                outZwmsJobsRec.IdCarrellistaProposto = objWSResponse.EZwmsJobsRec.ZcarrProp
                outZwmsJobsRec.IdCarrellistaEsecuzione = objWSResponse.EZwmsJobsRec.ZcarrExec
                outZwmsJobsRec.TipoDocumento = objWSResponse.EZwmsJobsRec.Zdoc
                outZwmsJobsRec.Memo = objWSResponse.EZwmsJobsRec.Memo
                outZwmsJobsRec.DistintaDiCarico = objWSResponse.EZwmsJobsRec.ZzNdis
                outZwmsJobsRec.InfoPrelievo = objWSResponse.EZwmsJobsRec.InfoPrelievo

            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_JOB_STEPS_EXECUTED")


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inSapWmWmsJob.NrWmsJobs)
            rfcFunction.SetValue("I_ID_JOBS_TYPE", inSapWmWmsJob.IdWmsJobType)
            rfcFunction.SetValue("I_ZWMS_JOBS_STEP", inSapWmWmsJob.CurrentStep)

            If (inFlagStepEnded = True) Then
                rfcFunction.SetValue("I_FLAG_STEP_ENDED", "X")
            Else
                rfcFunction.SetValue("I_FLAG_STEP_ENDED", "")
            End If

            'DATI GIACENZA ORIGINE
            rfcFunction.SetValue("I_MATNR_ORI", inSapWmWmsJob.MaterialeGiacenzaOrigine.CodiceMateriale)
            rfcFunction.SetValue("I_WERKS_ORI", inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione)
            rfcFunction.SetValue("I_LGORT_ORI", inSapWmWmsJob.MaterialeGiacenzaOrigine.MagazzinoLogico)
            rfcFunction.SetValue("I_CHARG_ORI", inSapWmWmsJob.MaterialeGiacenzaOrigine.Partita)
            rfcFunction.SetValue("I_MEINS_ORI", inSapWmWmsJob.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta)
            rfcFunction.SetValue("I_QTA_PREL_BASE", inQuantitaConfermataOperatore)

            rfcFunction.SetValue("I_QTA_SFUSI", inQuantitaConfermataOperatoreSfusi)
            rfcFunction.SetValue("I_UDM_QTA_SFUSI", inSapWmWmsJob.MaterialeGiacenzaOrigine.UnitaDiMisuraPezzo)

            'rfcFunction.SetValue("I_QTA_PREL_BASE", Replace(stImportParams.IQtaPrelBase, ",", "."))
            rfcFunction.SetValue("I_UDM_BASE", inSapWmWmsJob.MaterialeGiacenzaOrigine.UnitaDiMisuraBase)

            rfcFunction.SetValue("I_BESTQ", inSapWmWmsJob.MaterialeGiacenzaOrigine.TipoStock)
            rfcFunction.SetValue("I_SOBKZ", inSapWmWmsJob.MaterialeGiacenzaOrigine.CdStockSpeciale)
            rfcFunction.SetValue("I_SONUM", inSapWmWmsJob.MaterialeGiacenzaOrigine.NumeroStockSpeciale)

            rfcFunction.SetValue("I_LQNUM_ORI", inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroQuantWmSap)
            rfcFunction.SetValue("I_LGNUM_ORI", inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_LGTYP_ORI", inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA_ORI", inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione)
            rfcFunction.SetValue("I_LENUM_ORI", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino))
            rfcFunction.SetValue("I_LETYP", inSapWmWmsJob.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoUnitaMagazzino)


            'DATI GIACENZA DESTINAZIONE
            rfcFunction.SetValue("I_MATNR_DEST", inSapWmWmsJob.MaterialeGiacenzaDestinazione.CodiceMateriale)
            rfcFunction.SetValue("I_WERKS_DEST", inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione)
            rfcFunction.SetValue("I_LGORT_DEST", inSapWmWmsJob.MaterialeGiacenzaDestinazione.MagazzinoLogico)
            rfcFunction.SetValue("I_CHARG_DEST", inSapWmWmsJob.MaterialeGiacenzaDestinazione.Partita)
            rfcFunction.SetValue("I_LQNUM_DEST", inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroQuantWmSap)
            rfcFunction.SetValue("I_LGNUM_DEST", inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_LGTYP_DEST", inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA_DEST", inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione)
            rfcFunction.SetValue("I_LENUM_DEST", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino))

            rfcFunction.SetValue("I_INFO_PRELIEVO", inInfoPrelievo)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_SPRAS", inLingua)
            rfcFunction.SetValue("I_GET_ZWMS_JOBS_STEPS_REC", "X")


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outExecutionOk = True


                Dim Out_E_ZWMS_JOBS_REC_TAB As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_REC")
                Dim Out_E_OT_INFO As IRfcStructure = rfcFunction.GetStructure("E_OT_INFO")


                If (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_E_OT_INFO, "TANUM"), True) = True) Then
                    outSapWmOtInfo(0).NumeroOrdineDiTrasferimento = clsSapUtility.GetRFCStructParamToString(Out_E_OT_INFO, "TANUM")
                End If


                'outZwmsJobsRec.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_JOBS")
                outZwmsJobsRec.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_JOBS", 0)
                outZwmsJobsRec.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_JOBSGRP")
                outZwmsJobsRec.CodiceRaggruppoEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_GRPEXEC")
                outZwmsJobsRec.IdWmsJobStatus = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "IDSTATUS")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "WERKS_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGORT_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MATNR_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.Partita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CHARG_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "BESTQ_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SOBKZ_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SONUM_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGNUM_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGTYP_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGPLA_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LENUM_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MEINS_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmOriginale = clsSapUtility.GetRFCStructParamToFloat(Out_E_ZWMS_JOBS_REC_TAB, "ZQTAPK_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_E_ZWMS_JOBS_REC_TAB, "ZQTA_PREL_BASE")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "UDM_QTAPR_MEINS")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_E_ZWMS_JOBS_REC_TAB, "ZQTA_PREL_CONS")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "UDM_QTAPR_CONS")

                '>>> DATI DESTINAZIONE
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "WERKS_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGORT_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MATNR_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.Partita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CHARG_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "BESTQ_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SOBKZ_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SONUM_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGNUM_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGTYP_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGPLA_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LENUM_DEST")

                outZwmsJobsRec.Sequence = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SEQUENCE")
                outZwmsJobsRec.CurrentStep = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CURRENT_STEP")
                outZwmsJobsRec.NumeroStepTotali = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "NUM_STEPS_TOTAL")

                If (CDate(Out_E_ZWMS_JOBS_REC_TAB.Item("DATA_CREAZIONE").GetString) > Date.MinValue) Then
                    outZwmsJobsRec.DataCreazione = Out_E_ZWMS_JOBS_REC_TAB.Item("DATA_CREAZIONE").GetString
                End If
                If (CDate(Out_E_ZWMS_JOBS_REC_TAB.Item("ORA_CREAZIONE").GetString) > Date.MinValue) Then
                    outZwmsJobsRec.OraCreazione = Out_E_ZWMS_JOBS_REC_TAB.Item("ORA_CREAZIONE").GetString
                End If

                outZwmsJobsRec.PickDbNumero = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNRPICK")
                outZwmsJobsRec.PickDbPosizione = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "ZPOSPK")
                outZwmsJobsRec.NumeroOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "VBELN")
                outZwmsJobsRec.NumeroPosizioneOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "POSNR")
                outZwmsJobsRec.ConsegnaNumero = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "NUM_CONS_VBELV")
                outZwmsJobsRec.ConsegnaPosizione = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "POS_CONS_POSNV")
                outZwmsJobsRec.IdWmsJobType = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ID_JOBS_TYPE")
                outZwmsJobsRec.Priorita = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "PRIORITA")

                WorkString = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "URGENTE")
                If (WorkString = "X") Then
                    outZwmsJobsRec.Urgente = True
                Else
                    outZwmsJobsRec.Urgente = False
                End If

                outZwmsJobsRec.FlagRilevanteWM = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZFLAWM")
                WorkString = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "PALLET_INTERI")
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagPalletInteri = True
                Else
                    outZwmsJobsRec.FlagPalletInteri = False
                End If
                WorkString = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SCATOLE_INTERE")
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagScatoleIntere = True
                Else
                    outZwmsJobsRec.FlagScatoleIntere = False
                End If
                outZwmsJobsRec.FlagPartitaTassativa = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CHARG_TASSATIVA")
                outZwmsJobsRec.IdCarrellistaProposto = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZCARR_PROP")
                outZwmsJobsRec.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZCARR_EXEC")
                outZwmsJobsRec.TipoDocumento = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZDOC")
                outZwmsJobsRec.Memo = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MEMO")
                outZwmsJobsRec.DistintaDiCarico = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZZ_NDIS")
                outZwmsJobsRec.InfoPrelievo = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "INFO_PRELIEVO")
            End If

#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1116, "", " OPERAZIONE.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                Else
                    outSapFunctionError.ERROR_DESCRIPTION = objWSResponse.EErrorDescription
                End If
                Call_ZWS_JOB_STEPS_EXECUTED = RetCode 'errore
            Else
                Call_ZWS_JOB_STEPS_EXECUTED = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_JOB_EM_STEPS_EXECUTED(ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByVal inGiacenzeConfermate() As clsDataType.SapWmGiacenza, ByVal inFlagStepEnded As Boolean, ByVal inCreateJobEnded As Boolean, ByVal inInfoPrelievo As String, ByVal inLingua As String, ByRef outExecutionOk As Boolean, ByRef outSapWmRetStepExecuted() As clsDataType.SapWmRetStepExecuted, ByRef outZwmsJobsRec As clsDataType.SapWmWmsJob, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkString As String

        Dim objWS As New WS_JOB_EM_STEPS_EXECUTED.ZWS_JOB_EM_STEPS_EXECUTED
        Dim stImportParams As New WS_JOB_EM_STEPS_EXECUTED.ZwmsJobEmStepsExecuted
        Dim objWSResponse As New WS_JOB_EM_STEPS_EXECUTED.ZwmsJobEmStepsExecutedResponse
        Dim WorkGiacenza As clsDataType.SapWmGiacenza
        Dim StepsExecutedMatInfo() As WS_JOB_EM_STEPS_EXECUTED.ZwmsStepsExecutedMatInfo
        Dim WorkStepsExecutedMatInfo As WS_JOB_EM_STEPS_EXECUTED.ZwmsStepsExecutedMatInfo
        Dim IndexLoop As Long = 0

        Dim rfcStepsExecutedMatInfo() As rfcZwmsStepsExecutedMatInfo

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_JOB_EM_STEPS_EXECUTED = 1 'INIT AT ERROR

            outExecutionOk = False 'INIT



            If (inSapWmWmsJob.NrWmsJobs <= 0) Then
                RetCode = 100
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1117, "", " STEP EXEC. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1083, "", "NrWmsJobs") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inSapWmWmsJob.IdWmsJobType) <= 0) Then
                RetCode = 110
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1117, "", " STEP EXEC. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1087, "", "IdWmsJobType") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (inGiacenzeConfermate.Length <= 0) Then
                RetCode = 120
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1117, "", " STEP EXEC. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1209, "", "inGiacenzeConfermate") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inSapWmWmsJob.NrWmsJobs
            stImportParams.IZwmsJobsStep = inSapWmWmsJob.CurrentStep

            If (inFlagStepEnded = True) Then
                stImportParams.IFlagStepEnded = "X"
            Else
                stImportParams.IFlagStepEnded = ""
            End If
            If (inCreateJobEnded = True) Then
                stImportParams.ICreateJobsEnded = "X"
            Else
                stImportParams.ICreateJobsEnded = ""
            End If

            ReDim StepsExecutedMatInfo(inGiacenzeConfermate.Length - 1)

            'DATI GIACENZA ORIGINE
            For Each WorkGiacenza In inGiacenzeConfermate
                WorkStepsExecutedMatInfo = New WS_JOB_EM_STEPS_EXECUTED.ZwmsStepsExecutedMatInfo
                WorkStepsExecutedMatInfo.MatnrOri = WorkGiacenza.CodiceMateriale
                WorkStepsExecutedMatInfo.WerksOri = WorkGiacenza.UbicazioneInfo.Divisione
                WorkStepsExecutedMatInfo.LgortOri = WorkGiacenza.MagazzinoLogico
                WorkStepsExecutedMatInfo.ChargOri = WorkGiacenza.Partita
                WorkStepsExecutedMatInfo.QtaExecuted = String.Format(WorkGiacenza.QuantitaConfermataOperatore, "0.000")
                'WorkStepsExecutedMatInfo.QtaExecuted = Replace(WorkStepsExecutedMatInfo.QtaExecuted, ",", ".")
                WorkStepsExecutedMatInfo.UdmQtaExecuted = WorkGiacenza.UnitaDiMisuraAcquisizione
                WorkStepsExecutedMatInfo.Bestq = WorkGiacenza.TipoStock
                WorkStepsExecutedMatInfo.Sobkz = WorkGiacenza.CdStockSpeciale
                WorkStepsExecutedMatInfo.Sonum = WorkGiacenza.NumeroStockSpeciale
                WorkStepsExecutedMatInfo.LqnumOri = WorkGiacenza.UbicazioneInfo.NumeroQuantWmSap
                WorkStepsExecutedMatInfo.LgnumOri = WorkGiacenza.UbicazioneInfo.NumeroMagazzino
                WorkStepsExecutedMatInfo.LgtypOri = WorkGiacenza.UbicazioneInfo.TipoMagazzino
                WorkStepsExecutedMatInfo.LgplaOri = WorkGiacenza.UbicazioneInfo.Ubicazione
                WorkStepsExecutedMatInfo.LenumOri = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(WorkGiacenza.UbicazioneInfo.UnitaMagazzino)
                WorkStepsExecutedMatInfo.Letyp = WorkGiacenza.UbicazioneInfo.TipoUnitaMagazzino

                'DATI GIACENZA DESTINAZIONE
                WorkStepsExecutedMatInfo.MatnrDest = WorkGiacenza.CodiceMateriale
                WorkStepsExecutedMatInfo.WerksDest = WorkGiacenza.UbicazioneInfo.Divisione
                WorkStepsExecutedMatInfo.LgortDest = WorkGiacenza.MagazzinoLogico
                WorkStepsExecutedMatInfo.ChargDest = WorkGiacenza.Partita
                WorkStepsExecutedMatInfo.LqnumDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroQuantWmSap
                WorkStepsExecutedMatInfo.LgnumDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino
                WorkStepsExecutedMatInfo.LgtypDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino
                WorkStepsExecutedMatInfo.LgplaDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione
                WorkStepsExecutedMatInfo.LenumDest = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino)

                StepsExecutedMatInfo(IndexLoop) = WorkStepsExecutedMatInfo
                IndexLoop = IndexLoop + 1
            Next

            'IMPOSTO I PARAMETRI DEI MATERIALI CONFERMATI
            stImportParams.IZwmsMatInfoTab = StepsExecutedMatInfo

            stImportParams.IInfoPrelievo = inInfoPrelievo
            stImportParams.IUseridRf = clsUser.SapWmsUser.USERID

            stImportParams.ISpras = inLingua
            stImportParams.IGetZwmsJobsRec = "X"

            '>>> IMPOSTO LE CREDENZIALI PER LA CHIAMATA DEL WS
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_job_em_steps_executed/" & SapClient & "/zws_job_em_steps_executed/zws_job_em_steps_executed"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'ESEGUO CHIAMATA WEB SERVICES
            objWSResponse = objWS.ZwmsJobEmStepsExecuted(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outExecutionOk = True

                If (objWSResponse.EZwmsRetStepsExecutedTab.Length > 0) Then
                    ReDim outSapWmRetStepExecuted(objWSResponse.EZwmsRetStepsExecutedTab.Length - 1)
                    outSapWmRetStepExecuted(0).NumeroOrdineDiTrasferimento = objWSResponse.EZwmsRetStepsExecutedTab(0).Tanum
                End If

                outZwmsJobsRec.NrWmsJobs = objWSResponse.EZwmsJobsRec.ZnrWmsJobs
                outZwmsJobsRec.CodiceGruppoMissioni = objWSResponse.EZwmsJobsRec.ZnrWmsJobsgrp
                outZwmsJobsRec.CodiceRaggruppoEsecuzione = objWSResponse.EZwmsJobsRec.ZnrWmsGrpexec
                outZwmsJobsRec.IdWmsJobStatus = objWSResponse.EZwmsJobsRec.Idstatus
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione = objWSResponse.EZwmsJobsRec.WerksOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.MagazzinoLogico = objWSResponse.EZwmsJobsRec.LgortOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CodiceMateriale = objWSResponse.EZwmsJobsRec.MatnrOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.Partita = objWSResponse.EZwmsJobsRec.ChargOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.TipoStock = objWSResponse.EZwmsJobsRec.BestqOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CdStockSpeciale = objWSResponse.EZwmsJobsRec.SobkzOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.NumeroStockSpeciale = objWSResponse.EZwmsJobsRec.SonumOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino = objWSResponse.EZwmsJobsRec.LgnumOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino = objWSResponse.EZwmsJobsRec.LgtypOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione = objWSResponse.EZwmsJobsRec.LgplaOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino = objWSResponse.EZwmsJobsRec.LenumOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta = objWSResponse.EZwmsJobsRec.MeinsOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmOriginale = objWSResponse.EZwmsJobsRec.ZqtapkOri
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMBase = objWSResponse.EZwmsJobsRec.ZqtaPrelBase
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMBase = objWSResponse.EZwmsJobsRec.UdmQtaprMeins
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMConsegna = objWSResponse.EZwmsJobsRec.ZqtaPrelCons
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMConsegna = objWSResponse.EZwmsJobsRec.UdmQtaprCons

                '>>> DATI DESTINAZIONE
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione = objWSResponse.EZwmsJobsRec.WerksDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.MagazzinoLogico = objWSResponse.EZwmsJobsRec.LgortDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CodiceMateriale = objWSResponse.EZwmsJobsRec.MatnrDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.Partita = objWSResponse.EZwmsJobsRec.ChargDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.TipoStock = objWSResponse.EZwmsJobsRec.BestqDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CdStockSpeciale = objWSResponse.EZwmsJobsRec.SobkzDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.NumeroStockSpeciale = objWSResponse.EZwmsJobsRec.SonumDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino = objWSResponse.EZwmsJobsRec.LgnumDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino = objWSResponse.EZwmsJobsRec.LgtypDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione = objWSResponse.EZwmsJobsRec.LgplaDest
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino = objWSResponse.EZwmsJobsRec.LenumDest

                outZwmsJobsRec.Sequence = objWSResponse.EZwmsJobsRec.Sequence
                outZwmsJobsRec.CurrentStep = objWSResponse.EZwmsJobsRec.CurrentStep
                outZwmsJobsRec.NumeroStepTotali = objWSResponse.EZwmsJobsRec.NumStepsTotal
                If (CDate(objWSResponse.EZwmsJobsRec.DataCreazione) > Date.MinValue) Then
                    outZwmsJobsRec.DataCreazione = objWSResponse.EZwmsJobsRec.DataCreazione
                End If
                If (CDate(objWSResponse.EZwmsJobsRec.OraCreazione) > Date.MinValue) Then
                    outZwmsJobsRec.OraCreazione = objWSResponse.EZwmsJobsRec.OraCreazione
                End If
                outZwmsJobsRec.PickDbNumero = objWSResponse.EZwmsJobsRec.Znrpick
                outZwmsJobsRec.PickDbPosizione = objWSResponse.EZwmsJobsRec.Zpospk
                outZwmsJobsRec.NumeroOrdineVendita = objWSResponse.EZwmsJobsRec.Vbeln
                outZwmsJobsRec.NumeroPosizioneOrdineVendita = objWSResponse.EZwmsJobsRec.Posnr
                outZwmsJobsRec.ConsegnaNumero = objWSResponse.EZwmsJobsRec.NumConsVbelv
                outZwmsJobsRec.ConsegnaPosizione = objWSResponse.EZwmsJobsRec.PosConsPosnv
                outZwmsJobsRec.IdWmsJobType = objWSResponse.EZwmsJobsRec.IdJobsType
                outZwmsJobsRec.Priorita = objWSResponse.EZwmsJobsRec.Priorita

                WorkString = objWSResponse.EZwmsJobsRec.Urgente
                If (WorkString = "X") Then
                    outZwmsJobsRec.Urgente = True
                Else
                    outZwmsJobsRec.Urgente = False
                End If

                outZwmsJobsRec.FlagRilevanteWM = objWSResponse.EZwmsJobsRec.Zflawm
                WorkString = objWSResponse.EZwmsJobsRec.PalletInteri
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagPalletInteri = True
                Else
                    outZwmsJobsRec.FlagPalletInteri = False
                End If
                WorkString = objWSResponse.EZwmsJobsRec.ScatoleIntere
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagScatoleIntere = True
                Else
                    outZwmsJobsRec.FlagScatoleIntere = False
                End If
                outZwmsJobsRec.FlagPartitaTassativa = objWSResponse.EZwmsJobsRec.ChargTassativa
                outZwmsJobsRec.IdCarrellistaProposto = objWSResponse.EZwmsJobsRec.ZcarrProp
                outZwmsJobsRec.IdCarrellistaEsecuzione = objWSResponse.EZwmsJobsRec.ZcarrExec
                outZwmsJobsRec.TipoDocumento = objWSResponse.EZwmsJobsRec.Zdoc
                outZwmsJobsRec.Memo = objWSResponse.EZwmsJobsRec.Memo
                outZwmsJobsRec.DistintaDiCarico = objWSResponse.EZwmsJobsRec.ZzNdis
                outZwmsJobsRec.InfoPrelievo = objWSResponse.EZwmsJobsRec.InfoPrelievo

            End If


#Else


            '**************************************************************************
            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_JOB_EM_STEPS_EXECUTED")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inSapWmWmsJob.NrWmsJobs)
            rfcFunction.SetValue("I_ZWMS_JOBS_STEP", inSapWmWmsJob.CurrentStep)


            If (inFlagStepEnded = True) Then
                rfcFunction.SetValue("I_FLAG_STEP_ENDED", "X")
            Else
                rfcFunction.SetValue("I_FLAG_STEP_ENDED", "")
            End If
            If (inCreateJobEnded = True) Then
                rfcFunction.SetValue("I_CREATE_JOBS_ENDED", "X")
            Else
                rfcFunction.SetValue("I_CREATE_JOBS_ENDED", "")
            End If


            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_ZWMS_MAT_INFO_TAB")
            Dim rfcWorkStepsExecutedMatInfo As rfcZwmsStepsExecutedMatInfo

            ReDim StepsExecutedMatInfo(inGiacenzeConfermate.Length - 1)


            'DATI GIACENZA ORIGINE
            For Each WorkGiacenza In inGiacenzeConfermate

                In_rfcTable.Append()

                rfcWorkStepsExecutedMatInfo.matnrOri = WorkGiacenza.CodiceMateriale
                rfcWorkStepsExecutedMatInfo.werksOri = WorkGiacenza.UbicazioneInfo.Divisione
                rfcWorkStepsExecutedMatInfo.lgortOri = WorkGiacenza.MagazzinoLogico
                rfcWorkStepsExecutedMatInfo.chargOri = WorkGiacenza.Partita
                rfcWorkStepsExecutedMatInfo.qtaExecuted = String.Format(WorkGiacenza.QuantitaConfermataOperatore, "0.000") 'QTA IN UDM CONSEGNA
                rfcWorkStepsExecutedMatInfo.udmQtaExecuted = WorkGiacenza.UnitaDiMisuraAcquisizione
                If (WorkGiacenza.QuantitaConfermataSfusiOperatore > 0) Then
                    rfcWorkStepsExecutedMatInfo.qtaExecutedSfusi = String.Format(WorkGiacenza.QuantitaConfermataSfusiOperatore, "0.000") 'QTA IN UDM CONSEGNA
                Else
                    rfcWorkStepsExecutedMatInfo.qtaExecutedSfusi = 0
                End If
                rfcWorkStepsExecutedMatInfo.bestq = WorkGiacenza.TipoStock
                rfcWorkStepsExecutedMatInfo.sobkz = WorkGiacenza.CdStockSpeciale
                rfcWorkStepsExecutedMatInfo.sonum = WorkGiacenza.NumeroStockSpeciale
                rfcWorkStepsExecutedMatInfo.lqnumOri = WorkGiacenza.UbicazioneInfo.NumeroQuantWmSap
                rfcWorkStepsExecutedMatInfo.lgnumOri = WorkGiacenza.UbicazioneInfo.NumeroMagazzino
                rfcWorkStepsExecutedMatInfo.lgtypOri = WorkGiacenza.UbicazioneInfo.TipoMagazzino
                rfcWorkStepsExecutedMatInfo.lgplaOri = WorkGiacenza.UbicazioneInfo.Ubicazione
                rfcWorkStepsExecutedMatInfo.lenumOri = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(WorkGiacenza.UbicazioneInfo.UnitaMagazzino)
                rfcWorkStepsExecutedMatInfo.letyp = WorkGiacenza.UbicazioneInfo.TipoUnitaMagazzino

                'DATI GIACENZA DESTINAZIONE
                rfcWorkStepsExecutedMatInfo.matnrDest = WorkGiacenza.CodiceMateriale
                rfcWorkStepsExecutedMatInfo.werksDest = WorkGiacenza.UbicazioneInfo.Divisione
                rfcWorkStepsExecutedMatInfo.lgortDest = WorkGiacenza.MagazzinoLogico
                rfcWorkStepsExecutedMatInfo.chargDest = WorkGiacenza.Partita
                rfcWorkStepsExecutedMatInfo.lqnumDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroQuantWmSap
                rfcWorkStepsExecutedMatInfo.lgnumDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino
                rfcWorkStepsExecutedMatInfo.lgtypDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino
                rfcWorkStepsExecutedMatInfo.lgplaDest = inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione
                rfcWorkStepsExecutedMatInfo.lenumDest = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inSapWmWmsJob.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino)


                In_rfcTable.SetValue("MATNR_ORI", rfcWorkStepsExecutedMatInfo.matnrOri)
                In_rfcTable.SetValue("WERKS_ORI", rfcWorkStepsExecutedMatInfo.werksOri)
                In_rfcTable.SetValue("LGORT_ORI", rfcWorkStepsExecutedMatInfo.lgortOri)
                In_rfcTable.SetValue("CHARG_ORI", rfcWorkStepsExecutedMatInfo.chargOri)
                In_rfcTable.SetValue("QTA_EXECUTED", rfcWorkStepsExecutedMatInfo.qtaExecuted)
                In_rfcTable.SetValue("UDM_QTA_EXECUTED", rfcWorkStepsExecutedMatInfo.udmQtaExecuted)
                In_rfcTable.SetValue("QTA_EXECUTED_SFUSI", rfcWorkStepsExecutedMatInfo.qtaExecutedSfusi)
                In_rfcTable.SetValue("BESTQ", rfcWorkStepsExecutedMatInfo.bestq)
                In_rfcTable.SetValue("SOBKZ", rfcWorkStepsExecutedMatInfo.sobkz)
                In_rfcTable.SetValue("SONUM", rfcWorkStepsExecutedMatInfo.sonum)
                In_rfcTable.SetValue("LQNUM_ORI", rfcWorkStepsExecutedMatInfo.lqnumOri)
                In_rfcTable.SetValue("LGNUM_ORI", rfcWorkStepsExecutedMatInfo.lgnumOri)
                In_rfcTable.SetValue("LGTYP_ORI", rfcWorkStepsExecutedMatInfo.lgtypOri)
                In_rfcTable.SetValue("LGPLA_ORI", rfcWorkStepsExecutedMatInfo.lgplaOri)
                In_rfcTable.SetValue("LENUM_ORI", rfcWorkStepsExecutedMatInfo.lenumOri)
                In_rfcTable.SetValue("LETYP", rfcWorkStepsExecutedMatInfo.letyp)

                In_rfcTable.SetValue("MATNR_DEST", rfcWorkStepsExecutedMatInfo.matnrDest)
                In_rfcTable.SetValue("WERKS_DEST", rfcWorkStepsExecutedMatInfo.werksDest)
                In_rfcTable.SetValue("LGORT_DEST", rfcWorkStepsExecutedMatInfo.lgortDest)
                In_rfcTable.SetValue("CHARG_DEST", rfcWorkStepsExecutedMatInfo.chargDest)
                In_rfcTable.SetValue("LQNUM_DEST", rfcWorkStepsExecutedMatInfo.lqnumDest)
                In_rfcTable.SetValue("LGNUM_DEST", rfcWorkStepsExecutedMatInfo.lgnumDest)
                In_rfcTable.SetValue("LGTYP_DEST", rfcWorkStepsExecutedMatInfo.lgtypDest)
                In_rfcTable.SetValue("LGPLA_DEST", rfcWorkStepsExecutedMatInfo.lgplaDest)
                In_rfcTable.SetValue("LENUM_DEST", rfcWorkStepsExecutedMatInfo.lenumDest)


                'rfcStepsExecutedMatInfo(IndexLoop) = rfcWorkStepsExecutedMatInfo
                IndexLoop = IndexLoop + 1

            Next


            rfcFunction.SetValue("I_INFO_PRELIEVO", inInfoPrelievo)

            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)

            rfcFunction.SetValue("I_SPRAS", inLingua)

            rfcFunction.SetValue("I_GET_ZWMS_JOBS_REC", "X")


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outExecutionOk = True


                Dim Out_E_ZWMS_JOBS_REC_TAB As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_REC")
                Dim Out_E_ZWMS_RET_STEPS_EXECUTED_TAB As IRfcTable = rfcFunction.GetTable("E_ZWMS_RET_STEPS_EXECUTED_TAB")


                'If (objWSResponse.EZwmsRetStepsExecutedTab.Length > 0) Then
                '    ReDim outSapWmRetStepExecuted(objWSResponse.EZwmsRetStepsExecutedTab.Length - 1)
                '    outSapWmRetStepExecuted(0).NumeroOrdineDiTrasferimento = objWSResponse.EZwmsRetStepsExecutedTab(0).Tanum
                'End If

                If (Out_E_ZWMS_RET_STEPS_EXECUTED_TAB.Count > 0) Then
                    ReDim outSapWmRetStepExecuted(Out_E_ZWMS_RET_STEPS_EXECUTED_TAB.Count - 1)
                    outSapWmRetStepExecuted(0).NumeroOrdineDiTrasferimento = Out_E_ZWMS_RET_STEPS_EXECUTED_TAB(0).Item("TANUM").GetString
                End If


                'outZwmsJobsRec.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_JOBS")
                outZwmsJobsRec.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_JOBS", 0)
                outZwmsJobsRec.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_JOBSGRP")
                outZwmsJobsRec.CodiceRaggruppoEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_GRPEXEC")
                outZwmsJobsRec.IdWmsJobStatus = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "IDSTATUS")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "WERKS_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGORT_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MATNR_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.Partita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CHARG_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "BESTQ_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SOBKZ_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SONUM_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGNUM_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGTYP_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGPLA_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LENUM_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MEINS_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmOriginale = clsSapUtility.GetRFCStructParamToFloat(Out_E_ZWMS_JOBS_REC_TAB, "ZQTAPK_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_E_ZWMS_JOBS_REC_TAB, "ZQTA_PREL_BASE")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "UDM_QTAPR_MEINS")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_E_ZWMS_JOBS_REC_TAB, "ZQTA_PREL_CONS")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "UDM_QTAPR_CONS")

                '>>> DATI DESTINAZIONE
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "WERKS_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGORT_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MATNR_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.Partita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CHARG_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "BESTQ_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SOBKZ_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SONUM_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGNUM_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGTYP_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGPLA_DEST")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LENUM_DEST")

                outZwmsJobsRec.Sequence = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SEQUENCE")
                outZwmsJobsRec.CurrentStep = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CURRENT_STEP")
                outZwmsJobsRec.NumeroStepTotali = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "NUM_STEPS_TOTAL")

                If (CDate(Out_E_ZWMS_JOBS_REC_TAB.Item("DATA_CREAZIONE").GetString) > Date.MinValue) Then
                    outZwmsJobsRec.DataCreazione = Out_E_ZWMS_JOBS_REC_TAB.Item("DATA_CREAZIONE").GetString
                End If
                If (CDate(Out_E_ZWMS_JOBS_REC_TAB.Item("ORA_CREAZIONE").GetString) > Date.MinValue) Then
                    outZwmsJobsRec.OraCreazione = Out_E_ZWMS_JOBS_REC_TAB.Item("ORA_CREAZIONE").GetString
                End If

                outZwmsJobsRec.PickDbNumero = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNRPICK")
                outZwmsJobsRec.PickDbPosizione = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "ZPOSPK")
                outZwmsJobsRec.NumeroOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "VBELN")
                outZwmsJobsRec.NumeroPosizioneOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "POSNR")
                outZwmsJobsRec.ConsegnaNumero = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "NUM_CONS_VBELV")
                outZwmsJobsRec.ConsegnaPosizione = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "POS_CONS_POSNV")
                outZwmsJobsRec.IdWmsJobType = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ID_JOBS_TYPE")
                outZwmsJobsRec.Priorita = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "PRIORITA")

                WorkString = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "URGENTE")
                If (WorkString = "X") Then
                    outZwmsJobsRec.Urgente = True
                Else
                    outZwmsJobsRec.Urgente = False
                End If

                outZwmsJobsRec.FlagRilevanteWM = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZFLAWM")
                WorkString = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "PALLET_INTERI")
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagPalletInteri = True
                Else
                    outZwmsJobsRec.FlagPalletInteri = False
                End If
                WorkString = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SCATOLE_INTERE")
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagScatoleIntere = True
                Else
                    outZwmsJobsRec.FlagScatoleIntere = False
                End If
                outZwmsJobsRec.FlagPartitaTassativa = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CHARG_TASSATIVA")
                outZwmsJobsRec.IdCarrellistaProposto = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZCARR_PROP")
                outZwmsJobsRec.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZCARR_EXEC")
                outZwmsJobsRec.TipoDocumento = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZDOC")
                outZwmsJobsRec.Memo = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MEMO")
                outZwmsJobsRec.DistintaDiCarico = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZZ_NDIS")
                outZwmsJobsRec.InfoPrelievo = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "INFO_PRELIEVO")


            End If



#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1116, "", " OPERAZIONE.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                Else
                    outSapFunctionError.ERROR_DESCRIPTION = objWSResponse.EErrorDescription
                End If
                Call_ZWS_JOB_EM_STEPS_EXECUTED = RetCode 'errore
            Else
                Call_ZWS_JOB_EM_STEPS_EXECUTED = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CHECK_MATERIAL_EXIST(ByRef inCodiceMateriale As String, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outDatiGiacenza As clsDataType.SapWmGiacenza, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_CHECK_MATERIAL_EXIST.ZWS_MB_CHECK_MATERIAL_EXIST
        Dim stImportParams As New WS_MB_CHECK_MATERIAL_EXIST.ZwmMbCheckMaterialExist
        Dim objWSResponse As New WS_MB_CHECK_MATERIAL_EXIST.ZwmMbCheckMaterialExistResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CHECK_MATERIAL_EXIST = 1 'INIT AT ERROR

            If (Len(inCodiceMateriale) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1126, "", " CHECK LENUM. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1078, "", "CodiceMateriale") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IMatnr = inCodiceMateriale
            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_material_exist/" & SapClient & "/zws_mb_check_material_exist/zws_mb_check_material_exist"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbCheckMaterialExist(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK
                'RITORNO DATI DELLA GIACENZA TROVATA/E
                outDatiGiacenza.CodiceMateriale = objWSResponse.EData.Matnr
                outDatiGiacenza.Partita = ""
                outDatiGiacenza.DescrizioneMateriale = objWSResponse.ETextMakt.Maktx
                outDatiGiacenza.QtaTotaleLquaInStock = 0
                outDatiGiacenza.QtaTotaleLquaDisponibile = 0
                outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = 0
                outDatiGiacenza.QtaTotaleLquaDaPrelevare = 0
                outDatiGiacenza.UnitaDiMisuraBase = objWSResponse.EData.Meins
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_CHECK_MATERIAL_EXIST")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_MATRN", inCodiceMateriale)
            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Check_Ok") = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK
                '    'RITORNO DATI DELLA GIACENZA TROVATA/E

                rfcRow = rfcFunction.GetStructure("E_DATA")

                outDatiGiacenza.CodiceMateriale = clsSapUtility.GetRFCParameterToString(rfcFunction, "Matnr") 'objWSResponse.EData.Matnr
                outDatiGiacenza.Partita = ""
                outDatiGiacenza.DescrizioneMateriale = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_TEXT_MAKT") 'objWSResponse.ETextMakt.Maktx
                outDatiGiacenza.QtaTotaleLquaInStock = 0
                outDatiGiacenza.QtaTotaleLquaDisponibile = 0
                outDatiGiacenza.QtaTotaleLquaDaImmagazzinare = 0
                outDatiGiacenza.QtaTotaleLquaDaPrelevare = 0
                outDatiGiacenza.UnitaDiMisuraBase = clsSapUtility.GetRFCParameterToString(rfcFunction, "Meins") 'objWSResponse.EData.Meins

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1066, "", "Materiale non codificato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CHECK_MATERIAL_EXIST = RetCode 'errore
            Else
                Call_ZWS_MB_CHECK_MATERIAL_EXIST = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CHECK_ODP(ByRef inOrdineProduzione As clsDataType.SapOrdineProduzione, ByVal inJestInact As String, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outOrdineProduzione As clsDataType.SapOrdineProduzione, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_CHECK_ODP.ZWS_MB_CHECK_ODP
        Dim stImportParams As New WS_MB_CHECK_ODP.ZwmMbCheckOdp
        Dim objWSResponse As New WS_MB_CHECK_ODP.ZwmMbCheckOdpResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CHECK_ODP = 1 'INIT AT ERROR

            If (Len(inOrdineProduzione.NumeroOrdineProduzione) <= 0) Then
                RetCode = 100
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1115, "", " CHECK ODP. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1088, "", "NumeroOrdineProduzione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IAufnr = inOrdineProduzione.NumeroOrdineProduzione
            stImportParams.IJestInact = inJestInact
            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_odp/" & SapClient & "/zws_mb_check_odp/zws_mb_check_odp"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbCheckOdp(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK
                'RITORNO DATI DELLA GIACENZA TROVATA/E
                outOrdineProduzione.NumeroOrdineProduzione = objWSResponse.EFoundAfko.Aufnr
                outOrdineProduzione.CodiceMateriale = objWSResponse.EFoundCaufvd.Matnr
                outOrdineProduzione.QuantitaDaProdurre = objWSResponse.EFoundAfko.Gamng
                outOrdineProduzione.QuantitaConsegnata = objWSResponse.EFoundCaufvd.Gwemg
                outOrdineProduzione.QuantitaScarto = objWSResponse.EFoundAfko.Gasmg
                outOrdineProduzione.UnitaDiMisura = objWSResponse.EFoundAfko.Gmein
                outOrdineProduzione.RifNumeroOrdineCliente = objWSResponse.EFoundCaufv.Kdauf
                outOrdineProduzione.RifPosizioneOrdineCliente = objWSResponse.EFoundCaufv.Kdpos
                outOrdineProduzione.DataAcquisizione = objWSResponse.EFoundCaufv.Erdat
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_CHECK_ODP")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_AUFNR", inOrdineProduzione.NumeroOrdineProduzione)
            rfcFunction.SetValue("I_JEST_INACT", inJestInact)
            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Check_Ok") = "Y") Then
                outCheckOk = True 'UNICO CASO DI LOGIN OK

                outOrdineProduzione.NumeroOrdineProduzione = rfcFunction.GetTable("E_FOUND_AFKO").GetElementMetadata("Aufnr").ToString
                outOrdineProduzione.CodiceMateriale = rfcFunction.GetTable("E_FOUND_CAUFVD").GetElementMetadata("Matnr").ToString
                outOrdineProduzione.QuantitaDaProdurre = rfcFunction.GetTable("E_FOUND_AFKO").GetElementMetadata("Gamng").ToString
                outOrdineProduzione.QuantitaConsegnata = rfcFunction.GetTable("E_FOUND_CAUFVD").GetElementMetadata("Gwemg").ToString
                outOrdineProduzione.QuantitaScarto = rfcFunction.GetTable("E_FOUND_AFKO").GetElementMetadata("Gasmg").ToString
                outOrdineProduzione.UnitaDiMisura = rfcFunction.GetTable("E_FOUND_AFKO").GetElementMetadata("Gmein").ToString
                outOrdineProduzione.RifNumeroOrdineCliente = rfcFunction.GetTable("E_FOUND_CAUFV").GetElementMetadata("Kdauf").ToString
                outOrdineProduzione.RifPosizioneOrdineCliente = rfcFunction.GetTable("E_FOUND_CAUFV").GetElementMetadata("Kdpos").ToString
                outOrdineProduzione.DataAcquisizione = rfcFunction.GetTable("E_FOUND_CAUFV").GetElementMetadata("Erdat").ToString

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1068, "", "OdP non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CHECK_ODP = RetCode 'CASO DI ERRORE
            Else
                Call_ZWS_MB_CHECK_ODP = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_CREA_UBICAZIONE(ByVal inInfoUbicazioneDaCreare As clsDataType.SapWmUbicazione, ByRef outCreazioneOk As Boolean, ByRef outUbicazioneStruct As clsDataType.SapWmUbicazione, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_CREA_UBICAZIONE.ZWS_MB_CREA_UBICAZIONE
        Dim stImportParams As New WS_MB_CREA_UBICAZIONE.ZwmMbCreaUbicazione
        Dim objWSResponse As New WS_MB_CREA_UBICAZIONE.ZwmMbCreaUbicazioneResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_CREA_UBICAZIONE = 1 'INIT AT ERROR

            If (Len(inInfoUbicazioneDaCreare.Ubicazione) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1114, "", " CREA UBICAZIONE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1089, "", "Ubicazione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoUbicazioneDaCreare.NumeroMagazzino) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1114, "", " CREA UBICAZIONE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoUbicazioneDaCreare.TipoMagazzino) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1114, "", " CREA UBICAZIONE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If Not APPLICAZIONE_WIN32 = "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.ILgpla = inInfoUbicazioneDaCreare.Ubicazione
            stImportParams.ILgtyp = inInfoUbicazioneDaCreare.TipoMagazzino
            stImportParams.ILgnum = inInfoUbicazioneDaCreare.NumeroMagazzino

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_crea_ubicazione/" & SapClient & "/zws_mb_crea_ubicazione/zws_mb_crea_ubicazione"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbCreaUbicazione(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECreazioneOk = "Y") Then
                outCreazioneOk = True 'UNICO CASO DI CHECK OK
                'RITORNO DATI DELL'UBICAZIONE TROVATA
                outUbicazioneStruct.Divisione = ""
                outUbicazioneStruct.Ubicazione = objWSResponse.EDataLagp.Lgpla
                outUbicazioneStruct.TipoMagazzino = objWSResponse.EDataLagp.Lgtyp
                outUbicazioneStruct.NumeroMagazzino = objWSResponse.EDataLagp.Lgnum
                outUbicazioneStruct.UnitaMagazzino = ""
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_CREA_UBICAZIONE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGPLA", inInfoUbicazioneDaCreare.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoUbicazioneDaCreare.TipoMagazzino)
            rfcFunction.SetValue("I_LGNUM", inInfoUbicazioneDaCreare.NumeroMagazzino)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_DATA_LAGP")

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CREAZIONE_OK") = "Y") Then
                outCreazioneOk = True 'UNICO CASO DI CHECK OK

                'RITORNO DATI DELL'UBICAZIONE TROVATA
                outUbicazioneStruct.Divisione = ""
                outUbicazioneStruct.Ubicazione = rfcTable.GetElementMetadata("LGPLA").ToString
                outUbicazioneStruct.TipoMagazzino = rfcTable.GetElementMetadata("LGTYP").ToString
                outUbicazioneStruct.NumeroMagazzino = rfcTable.GetElementMetadata("LGNUM").ToString
                outUbicazioneStruct.UnitaMagazzino = ""

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCreazioneOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1069, "", "Ubicazione non creata.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_CREA_UBICAZIONE = RetCode 'caso di errore
            Else
                Call_ZWS_MB_CREA_UBICAZIONE = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_WM_INPUT_DEST_BASIC(ByRef inMaterialeGiacenza As clsDataType.SapWmGiacenza, ByRef inUbicazioneInfo As clsDataType.SapWmUbicazione, ByRef inQtyToPick As Double, ByRef inUdmQtyToPick As String, ByRef inQtyToPickPz As Double, ByRef inDocMateriale As clsDataType.SapWmDocumentoMaterialePos, ByVal inEntrataMerceDaOdp As Boolean, ByRef outUbiDestFound As Boolean, ByRef outSapWmGiacenzeDestination() As clsDataType.SapWmGiacenza, ByRef outDescrUbicDestinazione As String, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim NumDestinationFound As Long = 0

        Dim objWS As New WS_MB_GET_WM_INPUT_DEST_BASIC.ZWS_MB_GET_WM_INPUT_DEST_BASIC
        Dim stImportParams As New WS_MB_GET_WM_INPUT_DEST_BASIC.ZwmMbGetWmInputDestBasic
        Dim objWSResponse As New WS_MB_GET_WM_INPUT_DEST_BASIC.ZwmMbGetWmInputDestBasicResponse
        Dim UserDestinationsRecord As WS_MB_GET_WM_INPUT_DEST_BASIC.ZwmStrateInputDest

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_WM_INPUT_DEST_BASIC = 1 'INIT AT ERROR

            outUbiDestFound = False

            If (Len(inMaterialeGiacenza.CodiceMateriale) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1131, "", " (GET WM INPUT DEST). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1078, "", "CodiceMateriale") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inUbicazioneInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1131, "", " (GET WM INPUT DEST). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inUbicazioneInfo.Divisione) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1131, "", " (GET WM INPUT DEST). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1081, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (inQtyToPick > 0) And (Len(inUdmQtyToPick) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1131, "", " (GET WM INPUT DEST). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1476, "", "UdmQtyToPick") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE (WEB SERVICES)
            stImportParams.ILgnum = inUbicazioneInfo.NumeroMagazzino
            stImportParams.IWerks = inUbicazioneInfo.Divisione
            stImportParams.IMatnr = inMaterialeGiacenza.CodiceMateriale
            stImportParams.ICharg = inMaterialeGiacenza.Partita
            stImportParams.IQtaToConfirm = inQtyToPick

            stImportParams.IMblnr = inDocMateriale.NumeroDocumento
            stImportParams.IMjahr = inDocMateriale.AnnoEsercizio
            stImportParams.IZeile = inDocMateriale.PosizioneDocumento

            stImportParams.IEbeln = inDocMateriale.OrdineAcquistoNum
            stImportParams.IEbelp = inDocMateriale.OrdineAcquistoPos

            stImportParams.ILgtypOrigine = inUbicazioneInfo.TipoMagazzino
            stImportParams.ILgplaOrigine = inUbicazioneInfo.Ubicazione

            If (inEntrataMerceDaOdp = True) Then
                stImportParams.IZemDaProd = "X"
            Else
                stImportParams.IZemDaProd = ""
            End If
            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_wm_input_dest_basic/" & SapClient & "/zws_mb_get_wm_input_dest_basic/zws_mb_get_wm_input_dest_basic"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbGetWmInputDestBasic(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outDescrUbicDestinazione = ""

                'PRENDO NUMERO DI DESTINAZIONI TROVATA
                NumDestinationFound = objWSResponse.EDestinationTab().Length
                If (NumDestinationFound > 0) Then
                    outUbiDestFound = True 'UNICO CASO OK (DEVO AVERE ALMENO UNA SOLUZIONE)
                End If
                ReDim outSapWmGiacenzeDestination(NumDestinationFound - 1)
                For Index = 0 To (NumDestinationFound - 1)
                    UserDestinationsRecord = objWSResponse.EDestinationTab(Index)
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.Divisione = UserDestinationsRecord.LquaDest.Werks
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.NumeroMagazzino = UserDestinationsRecord.LquaDest.Lgnum
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.TipoMagazzino = UserDestinationsRecord.LquaDest.Lgtyp
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.Ubicazione = UserDestinationsRecord.LquaDest.Lgpla
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.UnitaMagazzino = UserDestinationsRecord.LquaDest.Lenum

                    If (UserDestinationsRecord.LgtypInfo.t331.Lenvw = "X") Then
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.AbilitaUnitaMagazzino = True
                    Else
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo.AbilitaUnitaMagazzino = False
                    End If
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.NumeroOrdineProduzione = UserDestinationsRecord.Aufnr
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrizioneCausale = UserDestinationsRecord.DescrCausale
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.NumDocumentoAcquisto = UserDestinationsRecord.Ebeln
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.PosizioneDocumentoAcquisto = UserDestinationsRecord.Ebelp
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.QtaRichiesta = UserDestinationsRecord.MatnrOdpReqQty
                    outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UnitaDiMisuraBase = UserDestinationsRecord.Meins

                    If (UserDestinationsRecord.FoundMancanteOdp = "X") Then
                        '>>> NEL CASO DI MANCANTE PER ODP PUO' ANDARE DIRETTAMENTE IN PRODUZIONE O AL MAGAZZINO CESTE
                        Select Case outSapWmGiacenzeDestination(Index).UbicazioneInfo.TipoMagazzino
                            Case DefaultTipoMagAreaProduzione
                                outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1094, "", "> Prod.(Manca)")
                            Case Else
                                outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1095, "", "> Manca x OdP")
                        End Select
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundMancanteOdp = True
                    End If
                    If (UserDestinationsRecord.FoundMagProd = "X") Then
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1096, "", "> Mag.Prod.")
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundMagProd = True
                    End If
                    If (UserDestinationsRecord.FoundAreaProd = "X") Then
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1097, "", "> Produzione")
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundAreaProd = True
                    End If
                    If (UserDestinationsRecord.FoundMagGeneric = "X") Then
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1098, "", "> Mag.(InStock)")
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundMagGeneric = True
                    End If
                    If (UserDestinationsRecord.FoundMagEmpty = "X") Then
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1099, "", "> Mag.(Vuota)")
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundMagEmpty = True
                    End If
                    If (UserDestinationsRecord.FoundForcedDestination = "X") Then
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1100, "", "> Dest.Forzata")
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.FoundForcedDestination = True
                    End If
                    If (UserDestinationsRecord.FoundMagProd = "X") And (UserDestinationsRecord.FoundAreaProd = "X") Then
                        outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1101, "", "> Mag.Prod & Prod.")
                    End If
                    If (Index = 0) Then
                        outDescrUbicDestinazione = outSapWmGiacenzeDestination(Index).OdaInputDestInfo.DescrUbicDestinazione
                    End If
                    'IMPOSTO ANCHE UNA STRUTTURA PRINCIPALE USATA NEL DISACCANTONAMENTO
                    outSapWmGiacenzeDestination(Index).UbicazioneInfo = outSapWmGiacenzeDestination(Index).OdaInputDestInfo.UbicazioneInfo
                Next

                'SE NON HO TROVATO UNA DESCRIZIONE DELLE SINGOLE DESTINAZIONE ALLORA VERIFICO I FLAG GLOBALI
                If (clsUtility.IsStringValid(outDescrUbicDestinazione, True) = False) Then
                    If (objWSResponse.EFoundMagProd = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1102, "", "> Mag.Ceste")
                    End If
                    If (objWSResponse.EFoundAreaProd = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1097, "", "> Produzione")
                    End If
                    If (objWSResponse.EFoundMagGeneric = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1098, "", "> Mag.(InStock)")
                    End If
                    If (objWSResponse.EFoundMagEmpty = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1099, "", "> Mag.(Vuota)")
                    End If
                    If (objWSResponse.EFoundForcedDestination = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1100, "", "> Dest.Forzata")
                    End If
                    If (objWSResponse.EFoundMagProd = "X") And (objWSResponse.EFoundAreaProd = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1101, "", "> Mag.Prod & Prod.")
                    End If
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim index As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GET_WM_INPUT_DEST_BASIC")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE (WEB SERVICES)
            rfcFunction.SetValue("I_LGNUM", inUbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_WERKS", inUbicazioneInfo.Divisione)
            rfcFunction.SetValue("I_MATNR", inMaterialeGiacenza.CodiceMateriale)
            rfcFunction.SetValue("I_CHARG", inMaterialeGiacenza.Partita)
            rfcFunction.SetValue("I_QTA_TO_CONFIRM", inQtyToPick)

            rfcFunction.SetValue("I_QTA_SFUSI", inQtyToPickPz)


            rfcFunction.SetValue("I_MEINS", inUdmQtyToPick)
            rfcFunction.SetValue("I_MBLNR", inDocMateriale.NumeroDocumento)
            rfcFunction.SetValue("I_MJAHR", inDocMateriale.AnnoEsercizio)
            rfcFunction.SetValue("I_ZEILE", inDocMateriale.PosizioneDocumento)

            rfcFunction.SetValue("I_EBELN", inDocMateriale.OrdineAcquistoNum)
            rfcFunction.SetValue("I_EBELP", inDocMateriale.OrdineAcquistoPos)
            rfcFunction.SetValue("I_LGORT", inMaterialeGiacenza.MagazzinoLogico)
            rfcFunction.SetValue("I_LGTYP_ORIGINE", inUbicazioneInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA_ORIGINE", inUbicazioneInfo.Ubicazione)

            If (inEntrataMerceDaOdp = True) Then
                rfcFunction.SetValue("I_ZEM_DA_PROD", "X")
            Else
                rfcFunction.SetValue("I_ZEM_DA_PROD", "")
            End If


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                'If (rfcFunction.GetObject("E_Success").ToString = "Y") Then
                outDescrUbicDestinazione = ""

                rfcTable = rfcFunction.GetTable("E_DESTINATION_TAB")
                If (rfcTable.RowCount > 0) Then
                    outUbiDestFound = True 'UNICO CASO OK (DEVO AVERE ALMENO UNA SOLUZIONE)
                    Dim Out_rfcStruct_LQUA_DEST As IRfcStructure = rfcTable.GetStructure("LQUA_DEST")
                    Dim Out_rfcStruct_LGTYP_INFO As IRfcStructure = rfcTable.GetStructure("LGTYP_INFO")
                    Dim Out_rfcStruct_T331 As IRfcStructure = Out_rfcStruct_LGTYP_INFO.GetStructure("T331")

                    'PRENDO NUMERO DI DESTINAZIONI TROVATA
                    NumDestinationFound = rfcTable.RowCount
                    ReDim outSapWmGiacenzeDestination(NumDestinationFound - 1)

                    For Each rfcRow In rfcTable

                        'UserDestinationsRecord = objWSResponse.EDestinationTab(Index)

                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "WERKS")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGNUM")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGTYP")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGPLA")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LENUM")

                        'If (UserDestinationsRecord.LgtypInfo.t331.Lenvw = "X") Then
                        If (Out_rfcStruct_T331.Item("LENVW").GetString = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.AbilitaUnitaMagazzino = True
                        Else
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo.AbilitaUnitaMagazzino = False
                        End If
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.NumeroOrdineProduzione = clsSapUtility.GetRFCStructParamToString(rfcRow, "AUFNR")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrizioneCausale = clsSapUtility.GetRFCStructParamToString(rfcRow, "DESCR_CAUSALE")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.NumDocumentoAcquisto = clsSapUtility.GetRFCStructParamToString(rfcRow, "EBELN")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.PosizioneDocumentoAcquisto = clsSapUtility.GetRFCStructParamToString(rfcRow, "EBELP")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.QtaRichiesta = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "MATNR_ODP_REQ_QTY")
                        outSapWmGiacenzeDestination(index).OdaInputDestInfo.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS")

                        'If (UserDestinationsRecord.FoundMancanteOdp = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MANCANTE_ODP") = "X") Then
                            '>>> NEL CASO DI MANCANTE PER ODP PUO' ANDARE DIRETTAMENTE IN PRODUZIONE O AL MAGAZZINO CESTE
                            Select Case outSapWmGiacenzeDestination(index).UbicazioneInfo.TipoMagazzino
                                Case DefaultTipoMagAreaProduzione
                                    outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1094, "", "> Prod.(Manca)")
                                Case Else
                                    outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1095, "", "> Manca x OdP")
                            End Select
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundMancanteOdp = True
                        End If
                        'If (UserDestinationsRecord.FoundMagProd = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_PROD") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1096, "", "> Mag.Prod.")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundMagProd = True
                        End If
                        'If (UserDestinationsRecord.FoundAreaProd = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_AREA_PROD") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1097, "", "> Produzione")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundAreaProd = True
                        End If
                        'If (UserDestinationsRecord.FoundMagGeneric = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_GENERIC") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1098, "", "> Mag.(InStock)")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundMagGeneric = True
                        End If
                        'If (UserDestinationsRecord.FoundMagEmpty = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_EMPTY") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1099, "", "> Mag.(Vuota)")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundMagEmpty = True
                        End If
                        'If (UserDestinationsRecord.FoundForcedDestination = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_FORCED_DESTINATION") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1100, "", "> Dest.Forzata")
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.FoundForcedDestination = True
                        End If
                        'If (UserDestinationsRecord.FoundMagProd = "X") And (UserDestinationsRecord.FoundAreaProd = "X") Then
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_PROD") = "X") And (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_AREA_PROD") = "X") Then
                            outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1101, "", "> Mag.Prod & Prod.")
                        End If
                        If (index = 0) Then
                            outDescrUbicDestinazione = outSapWmGiacenzeDestination(index).OdaInputDestInfo.DescrUbicDestinazione
                        End If
                        'IMPOSTO ANCHE UNA STRUTTURA PRINCIPALE USATA NEL DISACCANTONAMENTO
                        outSapWmGiacenzeDestination(index).UbicazioneInfo = outSapWmGiacenzeDestination(index).OdaInputDestInfo.UbicazioneInfo

                        index += 1

                    Next
                End If

                'SE NON HO TROVATO UNA DESCRIZIONE DELLE SINGOLE DESTINAZIONE ALLORA VERIFICO I FLAG GLOBALI
                If (clsUtility.IsStringValid(outDescrUbicDestinazione, True) = False) Then

                    If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_PROD") = "X") Then
                        'If (rfcFunction.GetObject("E_FOUND_MAG_PROD").ToString = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1102, "", "> Mag.Ceste")
                    End If
                    'If (objWSResponse.EFoundAreaProd = "X") Then
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_AREA_PROD") = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1097, "", "> Produzione")
                    End If
                    'If (objWSResponse.EFoundMagGeneric = "X") Then
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_MAG_GENERIC") = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1098, "", "> Mag.(InStock)")
                    End If
                    'If (objWSResponse.EFoundMagEmpty = "X") Then
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_MAG_EMPTY") = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1099, "", "> Mag.(Vuota)")
                    End If
                    'If (objWSResponse.EFoundForcedDestination = "X") Then
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_FORCED_DESTINATION") = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1100, "", "> Dest.Forzata")
                    End If
                    'If (objWSResponse.EFoundMagProd = "X") And (objWSResponse.EFoundAreaProd = "X") Then
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_MAG_PROD") = "X") And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_AREA_PROD") = "X") Then
                        outDescrUbicDestinazione = clsAppTranslation.GetSingleParameterValue(1101, "", "> Mag.Prod & Prod.")
                    End If
                End If


            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outUbiDestFound = False) Then
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1070, "", "Ubicazione Destinazione non trovata.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                RetCode = 101
            Else
                Call_ZWS_MB_GET_WM_INPUT_DEST_BASIC = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_MB_GET_WM_OUT_ORI_BASIC(ByRef inMaterialeGiacenza As clsDataType.SapWmGiacenza, ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByRef inQtyToPick As Double, ByRef inUbicazioneOriInfo As clsDataType.SapWmUbicazione, ByRef inTaskLinesOnWork As clsDataType.SapTaskLinesSingle, ByRef inIdPickQueue As String, ByRef outPickLocationFound As Boolean, ByRef outOkQtyToPick As Boolean, ByRef outSapOriPickLocation() As clsDataType.SapWmGiacenza, ByRef outDescrUbicOriPick As String, ByRef outStockFoundInOtherWh As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim NumElementsFound As Long = 0

        Dim objWS As New WS_MB_GET_WM_OUT_ORI_BASIC.ZWS_MB_GET_WM_OUT_ORI_BASIC
        Dim stImportParams As New WS_MB_GET_WM_OUT_ORI_BASIC.ZwmMbGetWmOutOriBasic
        Dim objWSResponse As New WS_MB_GET_WM_OUT_ORI_BASIC.ZwmMbGetWmOutOriBasicResponse
        Dim OriPickLocationRecord As WS_MB_GET_WM_OUT_ORI_BASIC.ZwmStrateOutputOrigine
        Dim GetFullPalletSoution As Boolean = False
        Dim GetPartialPalletSoution As Boolean = False
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_WM_OUT_ORI_BASIC = 1 'INIT AT ERROR

            outPickLocationFound = False
            outOkQtyToPick = False
            outStockFoundInOtherWh = False
            outDescrUbicOriPick = ""

            If (Len(inMaterialeGiacenza.CodiceMateriale) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1078, "", "CodiceMateriale") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inMaterialeGiacenza.UbicazioneInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inMaterialeGiacenza.UbicazioneInfo.Divisione) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1081, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If Not APPLICAZIONE_WIN32 = "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE (WEB SERVICES)
            stImportParams.ILgnum = inMaterialeGiacenza.UbicazioneInfo.NumeroMagazzino
            stImportParams.IWerks = inMaterialeGiacenza.UbicazioneInfo.Divisione
            stImportParams.IMatnr = inMaterialeGiacenza.CodiceMateriale
            stImportParams.ICharg = inMaterialeGiacenza.Partita
            stImportParams.IBestq = inMaterialeGiacenza.TipoStock
            stImportParams.ISobkz = inMaterialeGiacenza.CdStockSpeciale
            stImportParams.IBestPickLogic = "1"
            stImportParams.IZnrWmsJobs = String.Format(inSapWmWmsJob.NrWmsJobs, "0000000000")

            stImportParams.IQtaToConfirm = inQtyToPick
            stImportParams.IMeins = inMaterialeGiacenza.UdmQtaJobRichiesta

            stImportParams.ILgtypOrigine = inUbicazioneOriInfo.TipoMagazzino

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_wm_out_ori_basic/" & SapClient & "/zws_mb_get_wm_out_ori_basic/zws_mb_get_wm_out_ori_basic"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function del WEB SERVICES
            objWSResponse = objWS.ZwmMbGetWmOutOriBasic(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                NumElementsFound = objWSResponse.EUbiPickTabAll().Length
                If (NumElementsFound > 0) Then
                    outPickLocationFound = True
                End If
                If (objWSResponse.EOkPickQta = "X") Then
                    outOkQtyToPick = True 'CASO HO IN MAG. TUTTA LA QTA DA PRELEVARE
                End If
                ReDim outSapOriPickLocation(NumElementsFound - 1)
                For Index = 0 To (NumElementsFound - 1)
                    OriPickLocationRecord = objWSResponse.EUbiPickTabAll(Index)
                    outSapOriPickLocation(Index).UbicazioneInfo.Divisione = OriPickLocationRecord.LquaDest.Werks
                    outSapOriPickLocation(Index).UbicazioneInfo.NumeroMagazzino = OriPickLocationRecord.LquaDest.Lgnum
                    outSapOriPickLocation(Index).UbicazioneInfo.TipoMagazzino = OriPickLocationRecord.LquaDest.Lgtyp
                    outSapOriPickLocation(Index).UbicazioneInfo.Ubicazione = OriPickLocationRecord.LquaDest.Lgpla
                    outSapOriPickLocation(Index).UbicazioneInfo.UnitaMagazzino = OriPickLocationRecord.LquaDest.Lenum

                    If (OriPickLocationRecord.GestioneUmAttiva = "X") Then
                        outSapOriPickLocation(Index).UbicazioneInfo.AbilitaUnitaMagazzino = True
                    Else
                        outSapOriPickLocation(Index).UbicazioneInfo.AbilitaUnitaMagazzino = False
                    End If

                    outSapOriPickLocation(Index).NumeroDocumentoVendita = OriPickLocationRecord.VbelnOdv
                    outSapOriPickLocation(Index).PosizioneDocumentoVendita = OriPickLocationRecord.PosnrOdv
                    outSapOriPickLocation(Index).NumeroConsegna = OriPickLocationRecord.VbelnCons
                    outSapOriPickLocation(Index).PosizioneConsegna = OriPickLocationRecord.PosnrCons
                    outSapOriPickLocation(Index).QtaTotaleLquaInStock = OriPickLocationRecord.LquaDest.Gesme
                    outSapOriPickLocation(Index).QtaTotaleLquaInStockUdMAcq = OriPickLocationRecord.GesmeCons
                    outSapOriPickLocation(Index).QtaTotaleLquaDisponibile = OriPickLocationRecord.LquaDest.Verme
                    outSapOriPickLocation(Index).QtaTotaleLquaDispoUdMAcq = OriPickLocationRecord.VermeCons
                    outSapOriPickLocation(Index).UnitaDiMisuraBase = OriPickLocationRecord.Meins
                    outSapOriPickLocation(Index).UnitaDiMisuraAcquisizione = OriPickLocationRecord.Vrkme

                    If (OriPickLocationRecord.FoundMagGeneric = "X") Then
                        outSapOriPickLocation(Index).PickOrigineInfo.DescrPickOrigine = "> Mag."
                        outSapOriPickLocation(Index).PickOrigineInfo.FoundMagGeneric = True
                    End If
                    If (OriPickLocationRecord.FoundAreaProd = "X") Then
                        outSapOriPickLocation(Index).PickOrigineInfo.DescrPickOrigine = clsAppTranslation.GetSingleParameterValue(106, "", "> Prod.(100)")
                        outSapOriPickLocation(Index).PickOrigineInfo.FoundAreaProd = True
                    End If
                    If (OriPickLocationRecord.FoundAreaEmOda = "X") Then
                        outSapOriPickLocation(Index).PickOrigineInfo.DescrPickOrigine = clsAppTranslation.GetSingleParameterValue(107, "", "> EM OdA")
                        outSapOriPickLocation(Index).PickOrigineInfo.FoundAreaEntrataMerceOdA = True
                    End If
                    If (OriPickLocationRecord.FoundAreaEmProd = "X") Then
                        outSapOriPickLocation(Index).PickOrigineInfo.DescrPickOrigine = clsAppTranslation.GetSingleParameterValue(108, "", "> EM Prod.")
                        outSapOriPickLocation(Index).PickOrigineInfo.FoundAreaEntrataMerceProd = True
                    End If
                    If (Index = 0) Then
                        outDescrUbicOriPick = outSapOriPickLocation(Index).PickOrigineInfo.DescrPickOrigine
                    End If
                Next

                'SE NON HO TROVATO UNA DESCRIZIONE DELLE SINGOLE DESTINAZIONE ALLORA VERIFICO I FLAG GLOBALI
                If (clsUtility.IsStringValid(outDescrUbicOriPick, True) = False) Then
                    If (objWSResponse.EFoundMagGeneric = "X") Then
                        outDescrUbicOriPick = clsAppTranslation.GetSingleParameterValue(105, "", ">  Mag.")
                    End If
                    If (objWSResponse.EFoundAreaProd = "X") Then
                        outDescrUbicOriPick = clsAppTranslation.GetSingleParameterValue(106, "", "> Prod.(100)")
                    End If
                    If (objWSResponse.EFoundAreaEmOda = "X") Then
                        outDescrUbicOriPick = clsAppTranslation.GetSingleParameterValue(107, "", "> EM OdA")
                    End If
                    If (objWSResponse.EFoundAreaEmProd = "X") Then
                        outDescrUbicOriPick = clsAppTranslation.GetSingleParameterValue(108, "", "> EM Prod.")
                    End If
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure


            Dim index As Integer = 0

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GET_WM_OUT_ORI_BASIC")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE (WEB SERVICES)
            rfcFunction.SetValue("I_LGNUM", inMaterialeGiacenza.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_WERKS", inMaterialeGiacenza.UbicazioneInfo.Divisione)
            rfcFunction.SetValue("I_MATNR", inMaterialeGiacenza.CodiceMateriale)
            rfcFunction.SetValue("I_CHARG", inMaterialeGiacenza.Partita)
            rfcFunction.SetValue("I_BESTQ", inMaterialeGiacenza.TipoStock)
            rfcFunction.SetValue("I_SOBKZ", inMaterialeGiacenza.CdStockSpeciale)
            rfcFunction.SetValue("I_ZNR_TASK_LINES", inTaskLinesOnWork.NrTaskLines)
            rfcFunction.SetValue("I_LGORT", inMaterialeGiacenza.MagazzinoLogico)

            'SE PASSATO UN ID TASK LINES VALIDO LO PASSO ALLA FUNCTION
            If (IsNothing(inTaskLinesOnWork) = False) Then
                rfcFunction.SetValue("I_ZNR_TASK_LINES", inTaskLinesOnWork.NrTaskLines)
                If (inTaskLinesOnWork.PickFullPartialType = clsTaskLines.cstTaskLinesPickType_FullPallet) Then
                    GetFullPalletSoution = True
                ElseIf (inTaskLinesOnWork.PickFullPartialType = clsTaskLines.cstTaskLinesPickType_PartialPallet) Then
                    GetPartialPalletSoution = True
                End If
            End If

            'SE PASSATO UN ID CODA VALIDO LO PASSO ALLA FUNCTION
            If (clsUtility.IsStringValid(inIdPickQueue, True) = True) Then
                rfcFunction.SetValue("I_ZID_PICK_QUEUE", inIdPickQueue)
            End If

            rfcFunction.SetValue("I_BEST_PICK_LOGIC", "1")
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", String.Format(inSapWmWmsJob.NrWmsJobs, "0000000000"))

            'ARROTONDO ALLA 3° CIFRA DECIMALE
            inQtyToPick = Math.Round(inQtyToPick, 3, MidpointRounding.AwayFromZero)

            rfcFunction.SetValue("I_QTA_TO_CONFIRM", inQtyToPick)
            rfcFunction.SetValue("I_MEINS", inMaterialeGiacenza.UdmQtaJobRichiesta)
            rfcFunction.SetValue("I_LGTYP_ORIGINE", inUbicazioneOriInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then


                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_STOCK_FOUND_IN_OTHER_WH") = "X") Then
                    outStockFoundInOtherWh = True
                End If

                Dim Out_rfcStruct_E_UBI_PICK_TAB As IRfcTable

                If (GetFullPalletSoution = True) Then
                    Out_rfcStruct_E_UBI_PICK_TAB = rfcFunction.GetTable("E_UBI_PICK_TAB_FULL")
                    If (Out_rfcStruct_E_UBI_PICK_TAB.RowCount <= 0) Then
                        Out_rfcStruct_E_UBI_PICK_TAB = Nothing
                    End If
                End If

                If (GetPartialPalletSoution = True) Then
                    Out_rfcStruct_E_UBI_PICK_TAB = rfcFunction.GetTable("E_UBI_PICK_TAB_PARTIAL")
                    If (Out_rfcStruct_E_UBI_PICK_TAB.RowCount <= 0) Then
                        Out_rfcStruct_E_UBI_PICK_TAB = Nothing
                    End If
                End If

                If (Out_rfcStruct_E_UBI_PICK_TAB Is Nothing) Then
                    '>>>> CASO NORMALE SENZA TASKLINES
                    Out_rfcStruct_E_UBI_PICK_TAB = rfcFunction.GetTable("E_UBI_PICK_TAB")
                End If

                NumElementsFound = Out_rfcStruct_E_UBI_PICK_TAB.RowCount
                If (NumElementsFound > 0) Then
                    outPickLocationFound = True
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Ok_Pick_Qta") = "X") Then
                    outOkQtyToPick = True 'CASO HO IN MAG. TUTTA LA QTA DA PRELEVARE
                End If
                ReDim outSapOriPickLocation(NumElementsFound - 1)

                Dim Out_rfcStruct_LQUA_DEST As IRfcStructure

                For Each rfcRow In Out_rfcStruct_E_UBI_PICK_TAB

                    'RITORNO I DATI  DELLA STRUTTUA 
                    Out_rfcStruct_LQUA_DEST = rfcRow.GetStructure("LQUA_DEST")

                    outSapOriPickLocation(index).OdaInputDestInfo.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "WERKS")
                    outSapOriPickLocation(index).OdaInputDestInfo.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGNUM")
                    outSapOriPickLocation(index).OdaInputDestInfo.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGTYP")
                    outSapOriPickLocation(index).OdaInputDestInfo.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGPLA")
                    outSapOriPickLocation(index).OdaInputDestInfo.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LENUM")

                    If (Out_rfcStruct_E_UBI_PICK_TAB(index).Item("GESTIONE_UM_ATTIVA").GetString = "X") Then
                        outSapOriPickLocation(index).UbicazioneInfo.AbilitaUnitaMagazzino = True
                    Else
                        outSapOriPickLocation(index).UbicazioneInfo.AbilitaUnitaMagazzino = False
                    End If
                    outSapOriPickLocation(index).NrWmsJobs = inSapWmWmsJob.NrWmsJobs
                    outSapOriPickLocation(index).NumeroDocumentoVendita = clsSapUtility.GetRFCStructParamToString(rfcRow, "VBELN_ODV")
                    outSapOriPickLocation(index).PosizioneDocumentoVendita = clsSapUtility.GetRFCStructParamToString(rfcRow, "POSNR_ODV")
                    outSapOriPickLocation(index).NumeroConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "VBELN_CONS")
                    outSapOriPickLocation(index).PosizioneConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "VPOSNR_CONS")
                    outSapOriPickLocation(index).QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VGESME")
                    outSapOriPickLocation(index).QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "GESME_CONS")
                    outSapOriPickLocation(index).QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME")
                    outSapOriPickLocation(index).QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "VERME_CONS")
                    outSapOriPickLocation(index).UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS")
                    outSapOriPickLocation(index).UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToString(rfcRow, "VRKME")
                    outSapOriPickLocation(index).UnitaDiMisuraPezzo = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_PZ")
                    outSapOriPickLocation(index).UnitaDiMisuraScatole = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_SC")
                    outSapOriPickLocation(index).UnitaDiMisuraPallet = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS_PAL")

                    'outSapOriPickLocation(index). = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_STOCK_PZ")
                    'outSapOriPickLocation(index).QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_STOCK_SC")
                    'outSapOriPickLocation(index).QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_STOCK_PAL")
                    outSapOriPickLocation(index).QtaTotaleLquaInStocFullPallet = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_STOCK_FULL")
                    outSapOriPickLocation(index).QtaTotaleLquaInStocPartialPallet = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_STOCK_PARTIA")
                    outSapOriPickLocation(index).QtaTotaleInStockSfusi = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_STOCK_SF")

                    outSapOriPickLocation(index).QtaTotaleLocationUdBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_BASE")
                    outSapOriPickLocation(index).QtaTotaleLocationUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_CONS")
                    outSapOriPickLocation(index).QtaTotaleLocationUdMSC = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_SC")
                    outSapOriPickLocation(index).QtaTotaleLocationFullPallet = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_FULL")
                    outSapOriPickLocation(index).QtaTotaleLocationPartialPallet = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_PARTIA")
                    outSapOriPickLocation(index).QtaTotaleLocationSfusi = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_SF")
                    outSapOriPickLocation(index).NumeroUDCLocation = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "NUM_LOC_UDC")

                    If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_MAG_GENERIC") = "X") Then
                        outSapOriPickLocation(index).PickOrigineInfo.DescrPickOrigine = clsAppTranslation.GetSingleParameterValue(1501, "", "> Mag.")
                        outSapOriPickLocation(index).PickOrigineInfo.FoundMagGeneric = True
                    End If
                    If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_AREA_PROD") = "X") Then
                        outSapOriPickLocation(index).PickOrigineInfo.DescrPickOrigine = clsAppTranslation.GetSingleParameterValue(106, "", "> Prod.(100)")
                        outSapOriPickLocation(index).PickOrigineInfo.FoundAreaProd = True
                    End If
                    If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_AREA_EM_ODA") = "X") Then
                        outSapOriPickLocation(index).PickOrigineInfo.DescrPickOrigine = clsAppTranslation.GetSingleParameterValue(107, "", "> EM OdA")
                        outSapOriPickLocation(index).PickOrigineInfo.FoundAreaEntrataMerceOdA = True
                    End If
                    If (clsSapUtility.GetRFCStructParamToString(rfcRow, "FOUND_AREA_EM_PROD") = "X") Then
                        outSapOriPickLocation(index).PickOrigineInfo.DescrPickOrigine = clsAppTranslation.GetSingleParameterValue(108, "", "> EM Prod.")
                        outSapOriPickLocation(index).PickOrigineInfo.FoundAreaEntrataMerceProd = True
                    End If
                    If (index = 0) Then
                        outDescrUbicOriPick = outSapOriPickLocation(index).PickOrigineInfo.DescrPickOrigine
                    End If

                    index += 1

                Next


                'SE NON HO TROVATO UNA DESCRIZIONE DELLE SINGOLE DESTINAZIONE ALLORA VERIFICO I FLAG GLOBALI
                If (clsUtility.IsStringValid(outDescrUbicOriPick, True) = False) Then
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_MAG_GENERIC") = "X") Then
                        outDescrUbicOriPick = clsAppTranslation.GetSingleParameterValue(105, "", ">  Mag.")
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_AREA_PROD") = "X") Then
                        outDescrUbicOriPick = clsAppTranslation.GetSingleParameterValue(106, "", "> Prod.(100)")
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_AREA_EM_ODA") = "X") Then
                        outDescrUbicOriPick = clsAppTranslation.GetSingleParameterValue(107, "", "> EM OdA")
                    End If
                    If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_AREA_EM_PROD") = "X") Then
                        outDescrUbicOriPick = clsAppTranslation.GetSingleParameterValue(108, "", "> EM Prod.")
                    End If
                End If


            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outPickLocationFound = False) Then
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1071, "", "Ubicazione Prelievo non trovata.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                RetCode = 101
                Call_ZWS_MB_GET_WM_OUT_ORI_BASIC = RetCode
            Else
                Call_ZWS_MB_GET_WM_OUT_ORI_BASIC = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_WM_OUT_DEST_BASIC(ByRef inMaterialeGiacenza As clsDataType.SapWmGiacenza, ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByRef inQtyToPick As Double, ByRef inUbicazioneOriInfo As clsDataType.SapWmUbicazione, ByRef outPickDestLocationFound As Boolean, ByRef outSapDestPickLocation() As clsDataType.SapWmGiacenza, ByRef outDescrUbicDestPick As String, ByRef outFoundAreaPD As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim NumElementsFound As Long = 0

        Dim objWS As New WS_MB_GET_WM_OUT_DEST_BASIC.ZWS_MB_GET_WM_OUT_DEST_BASIC
        Dim stImportParams As New WS_MB_GET_WM_OUT_DEST_BASIC.ZwmMbGetWmOutDestBasic
        Dim objWSResponse As New WS_MB_GET_WM_OUT_DEST_BASIC.ZwmMbGetWmOutDestBasicResponse
        Dim DestPickLocationRecord As WS_MB_GET_WM_OUT_DEST_BASIC.ZwmStrateOutputDest

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_WM_OUT_DEST_BASIC = 1 'INIT AT ERROR

            outPickDestLocationFound = False
            outFoundAreaPD = False
            outDescrUbicDestPick = ""

            If (Len(inMaterialeGiacenza.CodiceMateriale) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1078, "", "CodiceMateriale") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inMaterialeGiacenza.UbicazioneInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inMaterialeGiacenza.UbicazioneInfo.Divisione) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1081, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE (WEB SERVICES)
            stImportParams.ILgnum = inMaterialeGiacenza.UbicazioneInfo.NumeroMagazzino
            stImportParams.IWerks = inMaterialeGiacenza.UbicazioneInfo.Divisione
            stImportParams.IMatnr = inMaterialeGiacenza.CodiceMateriale
            stImportParams.ICharg = inMaterialeGiacenza.Partita
            stImportParams.IBestq = inMaterialeGiacenza.TipoStock
            stImportParams.ISobkz = inMaterialeGiacenza.CdStockSpeciale

            stImportParams.IQtaToConfirm = inQtyToPick
            stImportParams.IMeins = inMaterialeGiacenza.UdmQtaJobRichiesta

            stImportParams.IZnrWmsJobs = inSapWmWmsJob.NrWmsJobs
            stImportParams.IIdJobsType = inSapWmWmsJob.IdWmsJobType
            stImportParams.ILgtypOrigine = inUbicazioneOriInfo.TipoMagazzino

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_wm_out_dest_basic/" & SapClient & "/zws_mb_get_wm_out_dest_basic/zws_mb_get_wm_out_dest_basic"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function del WEB SERVICES
            objWSResponse = objWS.ZwmMbGetWmOutDestBasic(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                NumElementsFound = objWSResponse.EDestinationTab().Length
                If (NumElementsFound > 0) Then
                    outPickDestLocationFound = True
                End If
                ReDim outSapDestPickLocation(NumElementsFound - 1)
                For Index = 0 To (NumElementsFound - 1)
                    DestPickLocationRecord = objWSResponse.EDestinationTab(Index)
                    outSapDestPickLocation(Index).UbicazioneInfo.Divisione = DestPickLocationRecord.LquaDest.Werks
                    outSapDestPickLocation(Index).UbicazioneInfo.NumeroMagazzino = DestPickLocationRecord.LquaDest.Lgnum
                    outSapDestPickLocation(Index).UbicazioneInfo.TipoMagazzino = DestPickLocationRecord.LquaDest.Lgtyp
                    outSapDestPickLocation(Index).UbicazioneInfo.Ubicazione = DestPickLocationRecord.LquaDest.Lgpla
                    outSapDestPickLocation(Index).UbicazioneInfo.UnitaMagazzino = DestPickLocationRecord.LquaDest.Lenum

                    If (DestPickLocationRecord.GestioneUmAttiva = "X") Then
                        outSapDestPickLocation(Index).UbicazioneInfo.AbilitaUnitaMagazzino = True
                    Else
                        outSapDestPickLocation(Index).UbicazioneInfo.AbilitaUnitaMagazzino = False
                    End If

                    If (DestPickLocationRecord.EFoundAreaPronto = "X") Then
                        outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = clsAppTranslation.GetSingleParameterValue(1110, "", "> Pronto")
                        outSapDestPickLocation(Index).PickDestinazioneInfo.FoundAreaPronto = True
                    End If
                    If (DestPickLocationRecord.EFoundAreaProd = "X") Then
                        outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = clsAppTranslation.GetSingleParameterValue(1111, "", "> Area Prod.")
                        outSapDestPickLocation(Index).PickDestinazioneInfo.FoundAreaProd = True
                    End If
                    If (DestPickLocationRecord.EFoundAreaCtLavoro = "X") Then
                        outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = clsAppTranslation.GetSingleParameterValue(1112, "", "> Ct.Lavoro")
                        outSapDestPickLocation(Index).PickDestinazioneInfo.FoundAreaContoLavoro = True
                    End If
                    If (DestPickLocationRecord.EFoundArea916 = "X") Then
                        outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = "> 916"
                        outSapDestPickLocation(Index).PickDestinazioneInfo.FoundArea916 = True
                    End If
                    If (DestPickLocationRecord.EFoundMagProd = "X") Then
                        outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = clsAppTranslation.GetSingleParameterValue(1096, "", "> Mag.Prod.")
                        outSapDestPickLocation(Index).PickDestinazioneInfo.FoundMagProduzione = True
                    End If
                    If (Index = 0) Then
                        outDescrUbicDestPick = outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione
                    End If
                Next
            End If


#Else
            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim Index As Long = 0
            Dim Out_rfcStruct_E_DESTINATION_TAB As IRfcTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GET_WM_OUT_DEST_BASIC")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGNUM", inMaterialeGiacenza.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_WERKS", inMaterialeGiacenza.UbicazioneInfo.Divisione)
            rfcFunction.SetValue("I_MATNR", inMaterialeGiacenza.CodiceMateriale)
            rfcFunction.SetValue("I_CHARG", inMaterialeGiacenza.Partita)
            rfcFunction.SetValue("I_BESTQ", inMaterialeGiacenza.TipoStock)
            rfcFunction.SetValue("I_SOBKZ", inMaterialeGiacenza.CdStockSpeciale)
            rfcFunction.SetValue("I_QTA_TO_CONFIRM", inQtyToPick)
            rfcFunction.SetValue("I_MEINS", inMaterialeGiacenza.UdmQtaJobRichiesta)
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inSapWmWmsJob.NrWmsJobs)
            rfcFunction.SetValue("I_ID_JOBS_TYPE", inSapWmWmsJob.IdWmsJobType)
            rfcFunction.SetValue("I_LGTYP_ORIGINE", inUbicazioneOriInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                If (Out_rfcStruct_E_DESTINATION_TAB Is Nothing) Then
                    '>>>> RECUPERO DATI TABELLA CON DESTINAZIONI TROVATE
                    Out_rfcStruct_E_DESTINATION_TAB = rfcFunction.GetTable("E_DESTINATION_TAB")
                End If

                '>>> RITORNO IL FLAG DI ELABORAZIONE DELLA PD
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_FOUND_AREA_PD") = "X") Then
                    outFoundAreaPD = True
                Else
                    outFoundAreaPD = False
                End If

                If (Out_rfcStruct_E_DESTINATION_TAB.RowCount > 0) Then
                    outPickDestLocationFound = True

                    Dim Out_rfcStruct_LQUA_DEST As IRfcStructure


                    ReDim outSapDestPickLocation(rfcTable.RowCount - 1)

                    Index = 0
                    For Each rfcRow In rfcTable

                        'RITORNO I DATI  DELLA STRUTTUA 
                        Out_rfcStruct_LQUA_DEST = rfcRow.GetStructure("LQUA_DEST")

                        outSapDestPickLocation(Index).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "WERKS")
                        outSapDestPickLocation(Index).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGNUM")
                        outSapDestPickLocation(Index).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGTYP")
                        outSapDestPickLocation(Index).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGPLA")
                        outSapDestPickLocation(Index).UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LENUM")

                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "GESTIONE_UM_ATTIVA") = "X") Then
                            outSapDestPickLocation(Index).UbicazioneInfo.AbilitaUnitaMagazzino = True
                        Else
                            outSapDestPickLocation(Index).UbicazioneInfo.AbilitaUnitaMagazzino = False
                        End If

                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "E_FOUND_AREA_PRONTO") = "X") Then
                            outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = clsAppTranslation.GetSingleParameterValue(1110, "", "> Pronto")
                            outSapDestPickLocation(Index).PickDestinazioneInfo.FoundAreaPronto = True
                        End If
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "E_FOUND_AREA_PROD") = "X") Then
                            outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = clsAppTranslation.GetSingleParameterValue(1111, "", "> Area Prod.")
                            outSapDestPickLocation(Index).PickDestinazioneInfo.FoundAreaProd = True
                        End If
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "E_FOUND_AREA_CT_LAVORO") = "X") Then
                            outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = clsAppTranslation.GetSingleParameterValue(1112, "", "> Ct.Lavoro")
                            outSapDestPickLocation(Index).PickDestinazioneInfo.FoundAreaContoLavoro = True
                        End If
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "E_FOUND_AREA_916") = "X") Then
                            outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = "> 916"
                            outSapDestPickLocation(Index).PickDestinazioneInfo.FoundArea916 = True
                        End If
                        If (clsSapUtility.GetRFCStructParamToString(rfcRow, "E_FOUND_MAG_PROD") = "X") Then
                            outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione = clsAppTranslation.GetSingleParameterValue(1096, "", "> Mag.Prod.")
                            outSapDestPickLocation(Index).PickDestinazioneInfo.FoundMagProduzione = True
                        End If
                        If (Index = 0) Then
                            outDescrUbicDestPick = outSapDestPickLocation(Index).PickDestinazioneInfo.DescrPickDestinazione
                        End If
                        Index = Index + 1
                    Next
                End If
            End If


#End If


                '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outPickDestLocationFound = False) Then
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1072, "", "Ubicazione Destinazione Prelievo non trovata.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                RetCode = 101
                Call_ZWS_MB_GET_WM_OUT_DEST_BASIC = RetCode
            Else
                Call_ZWS_MB_GET_WM_OUT_DEST_BASIC = 0 'TUTTO OK
            End If
        End Try

    End Function
    Public Shared Function Call_ZWM_MB_GET_DEST_PD_FROM_LOC(ByRef inUbicazioneOriInfo As clsDataType.SapWmUbicazione, ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByRef outPickDestLocationFound As Boolean, ByRef outSapDestPDLocation As clsDataType.SapWmUbicazione, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim NumElementsFound As Long = 0

        Dim objWS As New WS_MB_GET_WM_OUT_DEST_BASIC.ZWS_MB_GET_WM_OUT_DEST_BASIC
        Dim stImportParams As New WS_MB_GET_WM_OUT_DEST_BASIC.ZwmMbGetWmOutDestBasic
        Dim objWSResponse As New WS_MB_GET_WM_OUT_DEST_BASIC.ZwmMbGetWmOutDestBasicResponse
        Dim DestPickLocationRecord As WS_MB_GET_WM_OUT_DEST_BASIC.ZwmStrateOutputDest

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWM_MB_GET_DEST_PD_FROM_LOC = 1 'INIT AT ERROR

            outPickDestLocationFound = False
            RetCode = clsSapUtility.ResetUbicazioneStruct(outSapDestPDLocation)

            If (Len(inUbicazioneOriInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inUbicazioneOriInfo.Divisione) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1081, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inUbicazioneOriInfo.TipoMagazzino) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inUbicazioneOriInfo.Ubicazione) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(4, "", "Ubicazione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inSapWmWmsJob.NrWmsJobs <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1132, "", " (GET WM OUT ORI). ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1083, "", "NrWmsJobs") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then

#Else
            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim WorkNumFoundRows As Long = 0


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GET_DEST_PD_FROM_LOC")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGNUM", inUbicazioneOriInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_WERKS", inUbicazioneOriInfo.Divisione)
            rfcFunction.SetValue("I_LGTYP_PICK", inUbicazioneOriInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA_PICK", inUbicazioneOriInfo.Ubicazione)
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inSapWmWmsJob.NrWmsJobs)
            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                WorkNumFoundRows = clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_FOUNDROWS")

                Dim Out_rfcStruct_LQUA_DEST As IRfcStructure

                If (WorkNumFoundRows > 0) Then

                    outPickDestLocationFound = True

                    'RITORNO I DATI  DELLA STRUTTUA 
                    Out_rfcStruct_LQUA_DEST = rfcFunction.GetStructure("E_DESTINATION_PD")

                    outSapDestPDLocation.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "WERKS")
                    outSapDestPDLocation.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGNUM")
                    outSapDestPDLocation.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGTYP")
                    outSapDestPDLocation.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LGPLA")
                    outSapDestPDLocation.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_LQUA_DEST, "LENUM")

                End If

            End If
#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            Call_ZWM_MB_GET_DEST_PD_FROM_LOC = 0 'TUTTO OK
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_LGTYP_LIST(ByVal inNumMagazzino As String, ByVal inTipoMagazzino As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New StrctSapLgtypInfo

        Dim objWS As New WS_MB_GET_LGTYP_LIST.ZWS_MB_GET_LGTYP_LIST
        Dim stImportParams As New WS_MB_GET_LGTYP_LIST.ZwmMbGetLgtypList
        Dim objWSResponse As New WS_MB_GET_LGTYP_LIST.ZwmMbGetLgtypListResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_LGTYP_LIST = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inNumMagazzino) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ NumMagazzino] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inTipoMagazzino) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.ILgnum = inNumMagazzino
            stImportParams.ILgtyp = inTipoMagazzino
            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_lgtyp_list/" & SapClient & "/zws_mb_get_lgtyp_list/zws_mb_get_lgtyp_list"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmMbGetLgtypList(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.ELgtypInfo.Length > 0) Then
                    For Index = 0 To objWSResponse.ELgtypInfo.Length - 1
                        SingoloRec.SapLgtypInfo_Rec = objWSResponse.ELgtypInfo(Index)
                        If (Len(SingoloRec.SapLgtypInfo_Rec.Lgtyp) > 0) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("Lgtyp") = SingoloRec.SapLgtypInfo_Rec.Lgtyp
                            WorkRow.Item("Lgnum") = SingoloRec.SapLgtypInfo_Rec.Lgnum
                            WorkRow.Item("LTYPT") = SingoloRec.SapLgtypInfo_Rec.T301t.Ltypt
                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GET_LGTYP_LIST")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGNUM", inNumMagazzino)
            rfcFunction.SetValue("I_LGTYP", inTipoMagazzino)
            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_LGTYP_INFO")
                'Dim Out_rfcStruct_T301T As IRfcStructure = rfcTable.GetStructure("T301T")

                If (rfcTable.RowCount > 0) Then

                    For Each rfcRow In rfcTable
                        If (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp"), True) = True) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("Lgtyp") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                            WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                            WorkRow.Item("Ltypt") = rfcRow.GetStructure("T301T")("Ltypt").GetString
                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_GET_LGTYP_LIST = RetCode
            Else
                Call_ZWS_MB_GET_LGTYP_LIST = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_FORKLIFT(ByVal inNrMagazzino As String, ByVal inDivisione As String, ByVal inUserId As String, ByVal inProfId As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outDataTableWH As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New StrctSapLgtypInfo

        Dim objWS As New WS_GET_FORKLIFT.ZWS_GET_FORKLIFT
        Dim stImportParams As New WS_GET_FORKLIFT.ZwmsGetForklift
        Dim objWSResponse As New WS_GET_FORKLIFT.ZwmsGetForkliftResponse


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_FORKLIFT = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inNrMagazzino) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ NumMagazzino] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            'If (Len(inProfId) <= 0) Then
            '    RetCode = 11
            '    outSapFunctionError.ERROR_CODE = RetCode
            '    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
            '    If (inShowMessageBox = True) Then
            '        MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
            '    End If
            '    Exit Function
            'End If

#If APPLICAZIONE_WIN32 <> "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.ILgnum = inNrMagazzino
            stImportParams.IWerks = inDivisione
            stImportParams.IUserid = inUserId
            stImportParams.IProfid = inProfId
            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_forklift/" & SapClient & "/zws_get_forklift/zws_get_forklift"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            objWSResponse = objWS.ZwmsGetForklift(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.EZwmsForkliftTab.Length > 0) Then
                    For Index = 0 To objWSResponse.EZwmsForkliftTab.Length - 1
                        WorkRow = outDataTable.NewRow()
                        WorkRow.Item("ZID_WMS_FORKLIFT") = objWSResponse.EZwmsForkliftTab(Index).ZidWmsForklift
                        WorkRow.Item("ZDESCR_WMS_FORKLIFT") = objWSResponse.EZwmsForkliftTab(Index).ZdescrWmsForklift
                        WorkRow.Item("ZFORKLIFT_MAX_PESO") = objWSResponse.EZwmsForkliftTab(Index).ZforkliftMaxPeso
                        WorkRow.Item("Gewei") = objWSResponse.EZwmsForkliftTab(Index).Gewei
                        WorkRow.Item("Lgtyp") = objWSResponse.EZwmsForkliftTab(Index).Lgtyp
                        WorkRow.Item("Lgnum") = objWSResponse.EZwmsForkliftTab(Index).Lgnum
                        WorkRow.Item("Lgpla") = objWSResponse.EZwmsForkliftTab(Index).Lgpla
                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                    Next
                End If

                If (objWSResponse.EZwmsForkliftWhTab.Length > 0) Then
                    For Index = 0 To objWSResponse.EZwmsForkliftWhTab.Length - 1
                        WorkRow = outDataTableWH.NewRow()
                        WorkRow.Item("ZID_WMS_FORKLIFT") = objWSResponse.EZwmsForkliftWhTab(Index).ZidWmsForklift
                        WorkRow.Item("Lgtyp") = objWSResponse.EZwmsForkliftWhTab(Index).Lgtyp
                        WorkRow.Item("Lgnum") = objWSResponse.EZwmsForkliftWhTab(Index).Lgnum
                        WorkRow.Item("Lgpla") = objWSResponse.EZwmsForkliftWhTab(Index).Lgpla
                        outDataTableWH.Rows.Add(WorkRow) 'aggiungo la riga
                    Next
                End If
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            'Dim SAPRfcDestination As SAP.Middleware.Connector.RfcDestination
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_FORKLIFT")

            rfcFunction.SetValue("I_WERKS", inDivisione)
            rfcFunction.SetValue("I_LGNUM", inNrMagazzino)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_ZWMS_FORKLIFT_TAB")


            For Each rfcRow In rfcTable

                WorkRow = outDataTable.NewRow()

                For i = 0 To rfcTable.RowCount

                    WorkRow.Item("ZID_WMS_FORKLIFT") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZID_WMS_FORKLIFT")
                    WorkRow.Item("ZDESCR_WMS_FORKLIFT") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZDESCR_WMS_FORKLIFT")
                    WorkRow.Item("ZFORKLIFT_MAX_PESO") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZFORKLIFT_MAX_PESO")
                    WorkRow.Item("Gewei") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Gewei")
                    WorkRow.Item("Lgtyp") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                    WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                    WorkRow.Item("Lgpla") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                    WorkRow.Item("ZNUM_UDS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNUM_UDS")

                Next

                outDataTable.Rows.Add(WorkRow)

            Next


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_FORKLIFT = RetCode
            Else
                Call_ZWS_GET_FORKLIFT = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_GET_USERS_PROF_LGTYP(ByVal inUserId As String, ByVal inGetAll As Boolean, ByVal inOperation_Type As clsDataType.Operation_Type, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        'Dim SingoloRec As New StrctSapLgtypInfo
        Dim GetAll As String
        Dim Operation_Type As String

        Dim objWS As New WS_GET_USERS_PROF_LGTYP.ZWS_GET_USERS_PROF_LGTYP
        Dim stImportParams As New WS_GET_USERS_PROF_LGTYP.ZwmsGetUsersProfLgtyp1
        Dim objWSResponse As New WS_GET_USERS_PROF_LGTYP.ZwmsGetUsersProfLgtypResponse


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_USERS_PROF_LGTYP = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


            If (Len(inUserId) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            Select Case inOperation_Type
                Case clsDataType.Operation_Type.Operation_Type_Inbound
                    Operation_Type = "E"
                Case clsDataType.Operation_Type.Operation_Type_Inbound
                    Operation_Type = "A"
                Case Else
                    Operation_Type = ""
            End Select

            If inGetAll Then
                GetAll = "X"
            Else
                GetAll = ""
            End If



#If APPLICAZIONE_WIN32 <> "SI" Then


            stImportParams.IUserid = inUserId
            stImportParams.IGetAll = GetAll
            stImportParams.IKzear = Operation_Type
            stImportParams.ILanguage = clsUser.SapWmsUser.LANGUAGE

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_users_prof_lgtyp/" & SapClient & "/zws_get_users_prof_lgtyp/zws_get_users_prof_lgtyp"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            objWSResponse = objWS.ZwmsGetUsersProfLgtyp(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.EZwmsProfLgtypTab.Length > 0) Then
                    For Index = 0 To objWSResponse.EZwmsProfLgtypTab.Length - 1
                        WorkRow = outDataTable.NewRow()
                        WorkRow.Item("Profid") = objWSResponse.EZwmsProfLgtypTab(Index).Profid
                        WorkRow.Item("Lgnum") = objWSResponse.EZwmsProfLgtypTab(Index).Lgnum
                        WorkRow.Item("Lgtyp") = objWSResponse.EZwmsProfLgtypTab(Index).Lgtyp
                        WorkRow.Item("Ltypt") = objWSResponse.EZwmsProfLgtypTab(Index).Ltypt
                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                    Next
                End If
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_USERS_PROF_LGTYP")


            stImportParams.IUserid = inUserId
            stImportParams.IGetAll = GetAll
            stImportParams.IKzear = Operation_Type
            stImportParams.ILanguage = clsUser.SapWmsUser.LANGUAGE


            rfcFunction.SetValue("I_USERID", inUserId)
            rfcFunction.SetValue("I_GET_ALL", GetAll)
            rfcFunction.SetValue("I_KZEAR", Operation_Type)
            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_ZWMS_PROF_LGTYP_TAB")


            For Each rfcRow In rfcTable

                WorkRow = outDataTable.NewRow()

                For i = 0 To rfcTable.RowCount

                    WorkRow.Item("Profid") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Profid")
                    WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                    WorkRow.Item("Lgtyp") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                    WorkRow.Item("Ltypt") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Ltypt")

                Next

                outDataTable.Rows.Add(WorkRow)

            Next



#End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_USERS_PROF_LGTYP = RetCode
            Else
                Call_ZWS_GET_USERS_PROF_LGTYP = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_GET_ZWMS_PICK_QUEUES_ALL(ByVal inLingua As String, ByVal inEscludeEmptyQueue As Boolean, ByVal inGetOnlyOpenJobs As Boolean, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        'Dim SingoloRec As New StrctSapLgtypInfo
        Dim GetAll As String
        Dim Operation_Type As String
        Dim EscludeEmptyQueue As String = ""
        Dim GetOnlyOpenJobs As String = ""
        Dim objWS As New WS_GET_USERS_PROF_LGTYP.ZWS_GET_USERS_PROF_LGTYP
        Dim stImportParams As New WS_GET_USERS_PROF_LGTYP.ZwmsGetUsersProfLgtyp1
        Dim objWSResponse As New WS_GET_USERS_PROF_LGTYP.ZwmsGetUsersProfLgtypResponse


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_ZWMS_PICK_QUEUES_ALL = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)



#If Not APPLICAZIONE_WIN32 <> "SI" Then

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_GET_ZWMS_PICK_QUEUES_ALL")


            inLingua = clsUser.SapWmsUser.LANGUAGE


            If (inEscludeEmptyQueue = True) Then
                EscludeEmptyQueue = "X"
            Else
                EscludeEmptyQueue = ""
            End If

            If (inGetOnlyOpenJobs = True) Then
                GetOnlyOpenJobs = "X"
            Else
                GetOnlyOpenJobs = ""
            End If


            rfcFunction.SetValue("I_LGNUM", clsUser.GetUserNumeroMagazzinoToUse)
            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse)
            rfcFunction.SetValue("I_ESCLUDE_EMPTY_QUEUES", EscludeEmptyQueue)
            rfcFunction.SetValue("I_GET_ONLY_OPEN_JOBS", GetOnlyOpenJobs)
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_ZWMS_PICK_QUEUES_TAB")

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                For Each rfcRow In rfcTable
                    WorkRow = outDataTable.NewRow
                    WorkRow.Item("ZID_PICK_QUEUE") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZID_PICK_QUEUE")
                    WorkRow.Item("ZPICK_QUEUE_DESC") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZPICK_QUEUE_DESC")
                    WorkRow.Item("ZOPEN_FREE_NUM") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZOPEN_FREE_NUM")
                    WorkRow.Item("ZOPEN_ST_NUM") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZOPEN_ST_NUM")
                    WorkRow.Item("ZOPEN_RSV_NUM") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZOPEN_RSV_NUM")
                    WorkRow.Item("ZTOTAL_WMSLINES") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZTOTAL_WMSLINES")
                    WorkRow.Item("ZTOTAL_WMS_KG") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZTOTAL_WMS_KG")
                    WorkRow.Item("ZTOTAL_WMS_LB") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZTOTAL_WMS_LB")
                    outDataTable.Rows.Add(WorkRow)
                Next
            End If


#End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_ZWMS_PICK_QUEUES_ALL = RetCode
            Else
                Call_ZWS_GET_ZWMS_PICK_QUEUES_ALL = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_GET_MONITOR_QUEUES(ByVal inLingua As String, ByVal inPickQueuesFilter As String, ByVal inEscludeEmptyQueues As Boolean, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim GetAll As String
        Dim Operation_Type As String
        Dim wkEscludeEmptyQueues As String

        Dim objWS As New WS_GET_USERS_PROF_LGTYP.ZWS_GET_USERS_PROF_LGTYP
        Dim stImportParams As New WS_GET_USERS_PROF_LGTYP.ZwmsGetUsersProfLgtyp1
        Dim objWSResponse As New WS_GET_USERS_PROF_LGTYP.ZwmsGetUsersProfLgtypResponse


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_MONITOR_QUEUES = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)



#If Not APPLICAZIONE_WIN32 <> "SI" Then

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_MONITOR_QUEUES")


            'Escludi Code vuote
            If inEscludeEmptyQueues Then
                wkEscludeEmptyQueues = "X"
            Else
                wkEscludeEmptyQueues = ""
            End If


            inLingua = clsUser.SapWmsUser.LANGUAGE

            'rfcFunction.SetValue("I_PICK_QUEUES_FILTER", inPickQueuesFilter)   Il filtro viene gestito nella function in SAP ?
            rfcFunction.SetValue("I_WERKS", clsUser.SapWmsUser.WERKS)
            rfcFunction.SetValue("I_LGNUM", clsUser.SapWmsUser.LGNUM)
            rfcFunction.SetValue("I_ESCLUDE_EMPTY_QUEUES", wkEscludeEmptyQueues)
            rfcFunction.SetValue("I_SPRAS", clsUser.SapWmsUser.LANGUAGE)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_QUEUES_MONITOR_TAB")


            For Each rfcRow In rfcTable

                WorkRow = outDataTable.NewRow()

                For i = 0 To rfcTable.RowCount

                    WorkRow.Item("ZID_PICK_QUEUE") = rfcRow.GetString(rfcTable.GetElementMetadata("ZID_PICK_QUEUE").Name)
                    WorkRow.Item("ZPICK_QUEUE_DESC") = rfcRow.GetString(rfcTable.GetElementMetadata("ZPICK_QUEUE_DESC").Name)
                    WorkRow.Item("ZOPEN_ST_NUM") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZOPEN_ST_NUM").Name), 0)
                    WorkRow.Item("ZOPEN_ST_PER") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZOPEN_ST_PER").Name), 0)
                    WorkRow.Item("ZOPEN_ST_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZOPEN_ST_KG").Name), 0)
                    WorkRow.Item("ZOPEN_ST_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZOPEN_ST_LB").Name), 0)
                    WorkRow.Item("ZPICKED_ST_NUM") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZPICKED_ST_NUM").Name), 0)
                    WorkRow.Item("ZPICKED_ST_PER") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZPICKED_ST_PER").Name), 0)
                    WorkRow.Item("ZPICKED_ST_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZPICKED_ST_KG").Name), 0)
                    WorkRow.Item("ZPICKED_ST_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZPICKED_ST_LB").Name), 0)
                    WorkRow.Item("ZSTAGED_ST_NUM") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZSTAGED_ST_NUM").Name), 0)
                    WorkRow.Item("ZSTAGED_ST_PER") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZSTAGED_ST_PER").Name), 0)
                    WorkRow.Item("ZSTAGED_ST_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZSTAGED_ST_KG").Name), 0)
                    WorkRow.Item("ZSTAGED_ST_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZSTAGED_ST_LB").Name), 0)
                    WorkRow.Item("ZLOADED_ST_NUM") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZLOADED_ST_NUM").Name), 0)
                    WorkRow.Item("ZLOADED_ST_PER") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZLOADED_ST_PER").Name), 0)
                    WorkRow.Item("ZLOADED_ST_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZLOADED_ST_KG").Name), 0)
                    WorkRow.Item("ZLOADED_ST_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZLOADED_ST_LB").Name), 0)
                    WorkRow.Item("ZTOTAL_WMSLINES") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZTOTAL_WMSLINES").Name), 0)
                    WorkRow.Item("ZTOTAL_WMS_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZTOTAL_WMS_KG").Name), 0)
                    WorkRow.Item("ZTOTAL_WMS_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZTOTAL_WMS_LB").Name), 0)


                    'Valorizzo lo stato della coda delle missioni
                    If rfcRow.GetString(rfcTable.GetElementMetadata("ZOPEN_ST_NUM").Name) = 0 And _
                        rfcRow.GetString(rfcTable.GetElementMetadata("ZPICKED_ST_NUM").Name) = 0 And _
                        rfcRow.GetString(rfcTable.GetElementMetadata("ZSTAGED_ST_NUM").Name) = 0 And _
                        rfcRow.GetString(rfcTable.GetElementMetadata("ZLOADED_ST_NUM").Name) = 0 Then

                        WorkRow.Item("ZStatus") = "-"

                    ElseIf rfcRow.GetString(rfcTable.GetElementMetadata("ZOPEN_ST_NUM").Name) > 0 And _
                            rfcRow.GetString(rfcTable.GetElementMetadata("ZPICKED_ST_NUM").Name) = 0 And _
                            rfcRow.GetString(rfcTable.GetElementMetadata("ZSTAGED_ST_NUM").Name) = 0 And _
                            rfcRow.GetString(rfcTable.GetElementMetadata("ZLOADED_ST_NUM").Name) = 0 Then

                        WorkRow.Item("ZStatus") = "W"

                    ElseIf rfcRow.GetString(rfcTable.GetElementMetadata("ZOPEN_ST_NUM").Name) = 0 And _
                            rfcRow.GetString(rfcTable.GetElementMetadata("ZPICKED_ST_NUM").Name) = 0 And _
                            rfcRow.GetString(rfcTable.GetElementMetadata("ZSTAGED_ST_NUM").Name) = 0 And _
                            rfcRow.GetString(rfcTable.GetElementMetadata("ZLOADED_ST_NUM").Name) > 0 Then

                        WorkRow.Item("ZStatus") = "*"

                    Else

                        WorkRow.Item("ZStatus") = ""

                    End If

                Next

                outDataTable.Rows.Add(WorkRow)

            Next



#End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_MONITOR_QUEUES = RetCode
            Else
                Call_ZWS_GET_MONITOR_QUEUES = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_GET_MONITOR_JOBS(ByVal inLingua As String, ByVal inPickQueuesFilter As String, ByVal inEscludeEmptyQueues As Boolean, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim GetAll As String
        Dim Operation_Type As String
        Dim wkEscludeEmptyQueues As String

        Dim objWS As New WS_GET_USERS_PROF_LGTYP.ZWS_GET_USERS_PROF_LGTYP
        Dim stImportParams As New WS_GET_USERS_PROF_LGTYP.ZwmsGetUsersProfLgtyp1
        Dim objWSResponse As New WS_GET_USERS_PROF_LGTYP.ZwmsGetUsersProfLgtypResponse


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_MONITOR_JOBS = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


#If Not APPLICAZIONE_WIN32 <> "SI" Then

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_MONITOR_JOBS")

            'Escludi Code vuote
            If inEscludeEmptyQueues Then
                wkEscludeEmptyQueues = "X"
            Else
                wkEscludeEmptyQueues = ""
            End If


            inLingua = clsUser.SapWmsUser.LANGUAGE

            rfcFunction.SetValue("I_LGNUM", clsUser.SapWmsUser.LGNUM)
            'rfcFunction.SetValue("I_JOBS_TYPE_FILTER", inPickQueuesFilter)     Il filtro viene gestito nella function in SAP ?
            rfcFunction.SetValue("I_ESCLUDE_EMPTY_JOBTYPE", wkEscludeEmptyQueues)
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_JOBS_MONITOR_TAB")


            For Each rfcRow In rfcTable

                WorkRow = outDataTable.NewRow()

                For i = 0 To rfcTable.RowCount

                    WorkRow.Item("ZID_JOBS_TYPE") = rfcRow.GetString(rfcTable.GetElementMetadata("ZID_JOBS_TYPE").Name)
                    WorkRow.Item("ZDESCR_JOBS_TYPE") = rfcRow.GetString(rfcTable.GetElementMetadata("ZDESCR_JOBS_TYPE").Name)


                    WorkRow.Item("ZOPEN_ST_NUM") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZOPEN_ST_NUM").Name), 0)
                    WorkRow.Item("ZOPEN_ST_PER") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZOPEN_ST_PER").Name), 0)
                    WorkRow.Item("ZOPEN_ST_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZOPEN_ST_KG").Name), 0)
                    WorkRow.Item("ZOPEN_ST_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZOPEN_ST_LB").Name), 0)
                    WorkRow.Item("ZPICKED_ST_NUM") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZPICKED_ST_NUM").Name), 0)
                    WorkRow.Item("ZPICKED_ST_PER") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZPICKED_ST_PER").Name), 0)
                    WorkRow.Item("ZPICKED_ST_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZPICKED_ST_KG").Name), 0)
                    WorkRow.Item("ZPICKED_ST_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZPICKED_ST_LB").Name), 0)
                    WorkRow.Item("ZSTAGED_ST_NUM") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZSTAGED_ST_NUM").Name), 0)
                    WorkRow.Item("ZSTAGED_ST_PER") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZSTAGED_ST_PER").Name), 0)
                    WorkRow.Item("ZSTAGED_ST_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZSTAGED_ST_KG").Name), 0)
                    WorkRow.Item("ZSTAGED_ST_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZSTAGED_ST_LB").Name), 0)
                    WorkRow.Item("ZLOADED_ST_NUM") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZLOADED_ST_NUM").Name), 0)
                    WorkRow.Item("ZLOADED_ST_PER") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZLOADED_ST_PER").Name), 0)
                    WorkRow.Item("ZLOADED_ST_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZLOADED_ST_KG").Name), 0)
                    WorkRow.Item("ZLOADED_ST_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZLOADED_ST_LB").Name), 0)
                    WorkRow.Item("ZTOTAL_WMSLINES") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZTOTAL_WMSLINES").Name), 0)
                    WorkRow.Item("ZTOTAL_WMS_KG") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZTOTAL_WMS_KG").Name), 0)
                    WorkRow.Item("ZTOTAL_WMS_LB") = Math.Round(rfcRow.GetFloat(rfcTable.GetElementMetadata("ZTOTAL_WMS_LB").Name), 0)

                Next

                outDataTable.Rows.Add(WorkRow)

            Next


#End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_MONITOR_JOBS = RetCode
            Else
                Call_ZWS_GET_MONITOR_JOBS = 0 'TUTTO OK
            End If
        End Try

    End Function
    Public Shared Function Call_ZWS_GET_UBI_SPUNTA(ByVal inNrMagazzino As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0

        Dim objWS As New WS_GET_UBI_SPUNTA.ZWS_GET_UBI_SPUNTA
        Dim stImportParams As New WS_GET_UBI_SPUNTA.ZwmsGetUbiSpunta
        Dim objWSResponse As New WS_GET_UBI_SPUNTA.ZwmsGetUbiSpuntaResponse


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_UBI_SPUNTA = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


            If (Len(inNrMagazzino) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.ILgnum = inNrMagazzino


            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_ubi_spunta/" & SapClient & "/zws_get_ubi_spunta/zws_get_ubi_spunta"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            objWSResponse = objWS.ZwmsGetUbiSpunta(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.EZwmsUbiSpuntaTab.Length > 0) Then
                    For Index = 0 To objWSResponse.EZwmsUbiSpuntaTab.Length - 1
                        WorkRow = outDataTable.NewRow()
                        WorkRow.Item("Lgnum") = objWSResponse.EZwmsUbiSpuntaTab(Index).Lgnum
                        WorkRow.Item("Lgpla") = objWSResponse.EZwmsUbiSpuntaTab(Index).Lgpla
                        WorkRow.Item("Lgtyp") = objWSResponse.EZwmsUbiSpuntaTab(Index).Lgtyp
                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                    Next
                End If
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_UBI_SPUNTA")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGNUM", inNrMagazzino)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcFunction.GetObject("E_Foundrows") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_ZWMS_UBI_SPUNTA_TAB")


                'If (rfcTable.ElementCount > 0) Then
                If (rfcTable.RowCount > 0) Then

                    For Each rfcRow In rfcTable

                        WorkRow = outDataTable.NewRow()

                        WorkRow.Item("Lgtyp") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                        WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                        WorkRow.Item("Lgpla") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                        WorkRow.Item("ZWMSUBI_DESCR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMSUBI_DESCR")
                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                    Next
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_UBI_SPUNTA = RetCode
            Else
                Call_ZWS_GET_UBI_SPUNTA = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_GET_JOBS_LIST(ByVal inDivisione As String, ByVal inNumeroMagazzino As String, ByVal inJobIdList() As String, ByVal inFilterSapWmWmsJob As clsDataType.SapWmWmsJob, ByVal inShowOnlyActive As Boolean, ByVal inAccorpaMatnr_Charg As Boolean, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New WS_GET_JOBS_LIST.ZwmsJobsMobile

        Dim objWS As New WS_GET_JOBS_LIST.ZWS_GET_JOBS_LIST
        Dim stImportParams As New WS_GET_JOBS_LIST.ZwmsGetJobsList
        Dim objWSResponse As New WS_GET_JOBS_LIST.ZwmsGetJobsListResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_JOBS_LIST = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


            If (Len(inDivisione) <= 0) And (Len(inNumeroMagazzino) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1109, "", " JOBS_GROUP_LIST. Parametri [Divisione]e[NumeroMagazzino] non validi.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZwmsJobsFilter = New WS_GET_JOBS_LIST.ZwmsJobs
            stImportParams.IZwmsJobsFilter.IdJobsType = inFilterSapWmWmsJob.IdWmsJobType  '>>> FILTRO TIPO DI JOB
            stImportParams.IZwmsJobsFilter.ZnrWmsJobsgrp = inFilterSapWmWmsJob.CodiceGruppoMissioni '>>> FILTRO GRUPPO MISSIONI
            stImportParams.IZwmsJobsFilter.ZnrWmsJobs = inFilterSapWmWmsJob.NrWmsJobs  '>>> FILTRO MISSIONE
            stImportParams.IZwmsJobsFilter.LgnumOri = inNumeroMagazzino
            stImportParams.IZwmsJobsFilter.WerksOri = inDivisione
            stImportParams.IZwmsJobsFilter.ZcarrProp = inFilterSapWmWmsJob.IdCarrellistaProposto
            stImportParams.IZwmsJobsFilter.ZcarrExec = inFilterSapWmWmsJob.IdCarrellistaEsecuzione
            stImportParams.IZwmsJobsFilter.OraCreazione = "00:00:00"
            stImportParams.IZwmsJobsFilter.OraFine = "00:00:00"
            stImportParams.IZwmsJobsFilter.OraStart = "00:00:00"
            If (inShowOnlyActive = True) Then
                stImportParams.IShowOnlyActive = "X"
            Else
                stImportParams.IShowOnlyActive = " "
            End If
            If (inAccorpaMatnr_Charg = True) Then
                stImportParams.IAccorpaMatnrCharg = "X"
            Else
                stImportParams.IAccorpaMatnrCharg = " "
            End If
            stImportParams.ISpras = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_jobs_list/" & SapClient & "/zws_get_jobs_list/zws_get_jobs_list"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsGetJobsList(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.EZwmsJobsTab.Length > 0) Then
                    For Index = 0 To objWSResponse.EZwmsJobsTab.Length - 1
                        SingoloRec = objWSResponse.EZwmsJobsTab(Index)
                        If (clsUtility.IsStringValid(SingoloRec.ZwmsJobsRec.ZwmsJobs.ZnrWmsJobs, True) = True) Then
                            WorkRow = outDataTable.NewRow()
                            '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                            If (SingoloRec.ZwmsJobsRec.ZwmsJobs.Idstatus >= clsWmsJob.cstIdJobStatus_Verificato) Then
                                WorkRow.Item("GRID_EXECUTED") = "*"
                            ElseIf (SingoloRec.ZwmsJobsRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Cancellato) Then
                                WorkRow.Item("GRID_EXECUTED") = "D"
                            ElseIf (SingoloRec.ZwmsJobsRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Sospeso) Then
                                WorkRow.Item("GRID_EXECUTED") = "S"
                            Else
                                WorkRow.Item("GRID_EXECUTED") = ""
                            End If
                            WorkRow.Item("ZNR_WMS_JOBS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZnrWmsJobs
                            WorkRow.Item("ZNR_WMS_JOBSGRP") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZnrWmsJobsgrp
                            WorkRow.Item("ZNR_WMS_GRPEXEC") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZnrWmsGrpexec
                            WorkRow.Item("IDSTATUS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Idstatus
                            WorkRow.Item("STATUS") = SingoloRec.ZwmsJobsRec.Status
                            WorkRow.Item("STATUS_DESCR") = SingoloRec.ZwmsJobsRec.StatusDescr
                            WorkRow.Item("MAKTG") = SingoloRec.ZwmsJobsRec.Maktg
                            WorkRow.Item("WERKS_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.WerksOri
                            WorkRow.Item("LGORT_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgortOri
                            WorkRow.Item("MATNR_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.MatnrOri
                            WorkRow.Item("CHARG_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ChargOri
                            WorkRow.Item("BESTQ_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.BestqOri
                            WorkRow.Item("SOBKZ_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.SobkzOri
                            WorkRow.Item("SONUM_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.SonumOri
                            WorkRow.Item("LGNUM_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgnumOri
                            WorkRow.Item("LGTYP_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgtypOri
                            WorkRow.Item("LGPLA_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgplaOri
                            WorkRow.Item("LENUM_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LenumOri
                            WorkRow.Item("MEINS_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.MeinsOri
                            WorkRow.Item("ZQTAPK_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkOri
                            WorkRow.Item("ZQTAPK_ORI_PZ") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkOriPz
                            WorkRow.Item("ZQTAPK_ORI_SC") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkOriSc
                            WorkRow.Item("ZQTAPK_ORI_PL") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkOriPl
                            WorkRow.Item("ZQTAPK_SFUSI_PZ") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkSfusiPz
                            WorkRow.Item("ZQTA_PREL_BASE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtaPrelBase
                            WorkRow.Item("UDM_QTAPR_MEINS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.UdmQtaprMeins
                            WorkRow.Item("ZQTA_PREL_CONS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtaPrelCons
                            WorkRow.Item("UDM_QTAPR_CONS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.UdmQtaprCons
                            WorkRow.Item("ZQTA_PREL_PZ") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtaPrelPz
                            WorkRow.Item("UDM_QTAPR_PZ") = SingoloRec.ZwmsJobsRec.ZwmsJobs.UdmQtaprPz
                            WorkRow.Item("WERKS_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.WerksDest
                            WorkRow.Item("LGORT_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgortDest
                            WorkRow.Item("MATNR_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.MatnrDest
                            WorkRow.Item("CHARG_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ChargDest
                            WorkRow.Item("BESTQ_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.BestqDest
                            WorkRow.Item("SOBKZ_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.SobkzDest
                            WorkRow.Item("SONUM_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.SonumDest
                            WorkRow.Item("LGNUM_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgnumDest
                            WorkRow.Item("LGTYP_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgtypDest
                            WorkRow.Item("LGPLA_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgplaDest
                            WorkRow.Item("LENUM_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LenumDest
                            WorkRow.Item("SEQUENCE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Sequence
                            WorkRow.Item("CURRENT_STEP") = SingoloRec.ZwmsJobsRec.ZwmsJobs.CurrentStep
                            WorkRow.Item("NUM_STEPS_TOTAL") = SingoloRec.ZwmsJobsRec.ZwmsJobs.NumStepsTotal
                            WorkRow.Item("DATA_CREAZIONE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.DataCreazione
                            WorkRow.Item("ORA_CREAZIONE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.OraCreazione
                            WorkRow.Item("ZNRPICK") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Znrpick
                            WorkRow.Item("ZPOSPK") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Zpospk
                            WorkRow.Item("VBELN") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Vbeln
                            WorkRow.Item("POSNR") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Posnr
                            WorkRow.Item("NUM_CONS_VBELV") = SingoloRec.ZwmsJobsRec.ZwmsJobs.NumConsVbelv
                            WorkRow.Item("POS_CONS_POSNV") = SingoloRec.ZwmsJobsRec.ZwmsJobs.PosConsPosnv
                            WorkRow.Item("ID_JOBS_TYPE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.IdJobsType
                            WorkRow.Item("DESCR_JOBS_TYPE") = SingoloRec.ZwmsJobsRec.ZwmsJobsType.DescrJobsType
                            WorkRow.Item("JOBS_TYPE_KZEAR") = SingoloRec.ZwmsJobsRec.ZwmsJobsType.Kzear
                            WorkRow.Item("PRIORITA") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Priorita
                            WorkRow.Item("URGENTE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Urgente
                            WorkRow.Item("ZFLAWM") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Zflawm
                            WorkRow.Item("PALLET_INTERI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.PalletInteri
                            WorkRow.Item("SCATOLE_INTERE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ScatoleIntere
                            WorkRow.Item("CHARG_TASSATIVA") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ChargTassativa
                            WorkRow.Item("ZCARR_PROP") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZcarrProp
                            WorkRow.Item("ZCARR_EXEC") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZcarrExec
                            WorkRow.Item("ZDOC") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Zdoc
                            WorkRow.Item("MEMO") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Memo
                            WorkRow.Item("ZZ_NDIS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZzNdis
                            WorkRow.Item("INFO_PRELIEVO") = SingoloRec.ZwmsJobsRec.ZwmsJobs.InfoPrelievo

                            WorkRow.Item("IMBALLO") = SingoloRec.ZwmsJobsRec.VarianteImballo.Imballo
                            WorkRow.Item("PZ_X_SC") = SingoloRec.ZwmsJobsRec.VarianteImballo.PzXSc
                            WorkRow.Item("SC_X_PAL") = SingoloRec.ZwmsJobsRec.VarianteImballo.ScXPal
                            WorkRow.Item("M2_X_PAL") = SingoloRec.ZwmsJobsRec.VarianteImballo.M2XPal

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer
            Dim Table As New DataTable
            Dim LoopIndex As Long = 0
            Dim WorkJobId As String

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_JOBS_LIST")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            Dim In_rfcTable As IRfcStructure = rfcFunction.GetStructure("I_ZWMS_JOBS_FILTER")

            In_rfcTable.SetValue("ID_JOBS_TYPE", inFilterSapWmWmsJob.IdWmsJobType)  '>>> FILTRO TIPO DI JOB
            In_rfcTable.SetValue("ZNR_WMS_JOBSGRP", inFilterSapWmWmsJob.CodiceGruppoMissioni) '>>> FILTRO GRUPPO MISSIONI
            In_rfcTable.SetValue("ZNR_WMS_JOBS", inFilterSapWmWmsJob.NrWmsJobs)  '>>> FILTRO MISSIONE
            In_rfcTable.SetValue("Lgnum_Ori", inNumeroMagazzino)
            In_rfcTable.SetValue("Werks_Ori", inDivisione)
            In_rfcTable.SetValue("Zcarr_Prop", inFilterSapWmWmsJob.IdCarrellistaProposto)
            In_rfcTable.SetValue("Zcarr_Exec", inFilterSapWmWmsJob.IdCarrellistaEsecuzione)
            In_rfcTable.SetValue("ORA_CREAZIONE", "00:00:00")
            In_rfcTable.SetValue("Ora_Fine", "00:00:00")
            In_rfcTable.SetValue("Ora_Start", "00:00:00")

            'SE PASSATA UNA LISTA DI JOB NUMBER DA RECUPERARE ( ESEMPIO LISTA JOBS DELLA CODA )
            Dim In_rfcParamTableJobId As IRfcTable = rfcFunction.GetTable("I_ZNR_WMS_JOBS_TAB")
            If (Not inJobIdList Is Nothing) Then
                If (inJobIdList.Count > 0) Then
                    LoopIndex = 0
                    'IMPOSTO I JOB ID DA RECUPERARE
                    For LoopIndex = 0 To (inJobIdList.Length - 1)
                        WorkJobId = inJobIdList(LoopIndex)
                        If (clsUtility.IsStringValid(WorkJobId, True) + True) Then
                            WorkJobId = WorkJobId.PadLeft(10, "0")
                            In_rfcParamTableJobId.Append()
                            In_rfcParamTableJobId.SetValue("SIGN", "I")
                            In_rfcParamTableJobId.SetValue("OPTION", "EQ")
                            In_rfcParamTableJobId.SetValue("LOW", WorkJobId)
                        End If
                    Next
                End If
            End If

            If (inShowOnlyActive = True) Then
                rfcFunction.SetValue("I_SHOW_ONLY_ACTIVE", "X")
            Else
                rfcFunction.SetValue("I_SHOW_ONLY_ACTIVE", " ")
            End If
            If (inAccorpaMatnr_Charg = True) Then
                rfcFunction.SetValue("I_ACCORPA_MATNR_CHARG", "X")
            Else
                rfcFunction.SetValue("I_ACCORPA_MATNR_CHARG", " ")
            End If
            rfcFunction.SetValue("I_Spras", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_ZWMS_JOBS_TAB")


                If (rfcTable.RowCount > 0) Then


                    Dim Out_rfcStruct_ZWMS_JOBS_INFO As IRfcStructure = rfcTable.GetStructure("ZWMS_JOBS_REC")
                    Dim Out_rfcStruct_ZWMS_JOBS As IRfcStructure = Out_rfcStruct_ZWMS_JOBS_INFO.GetStructure("ZWMS_JOBS")
                    Dim Out_rfcStruct_VARIANTE_IMBALLO As IRfcStructure = Out_rfcStruct_ZWMS_JOBS_INFO.GetStructure("VARIANTE_IMBALLO")
                    Dim Out_rfcStruct_ZWMS_JOBS_TYPE As IRfcStructure = Out_rfcStruct_ZWMS_JOBS_INFO.GetStructure("ZWMS_JOBS_TYPE")

                    For Each rfcRow In rfcTable

                        WorkRow = outDataTable.NewRow()

                        Out_rfcStruct_ZWMS_JOBS_INFO = rfcRow.GetStructure("ZWMS_JOBS_REC")
                        Out_rfcStruct_ZWMS_JOBS = Out_rfcStruct_ZWMS_JOBS_INFO.GetStructure("ZWMS_JOBS")
                        Out_rfcStruct_VARIANTE_IMBALLO = Out_rfcStruct_ZWMS_JOBS_INFO.GetStructure("VARIANTE_IMBALLO")
                        Out_rfcStruct_ZWMS_JOBS_TYPE = Out_rfcStruct_ZWMS_JOBS_INFO.GetStructure("ZWMS_JOBS_TYPE")

                        ''>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                        'If (clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS") >= clsWmsJob.cstIdJobStatus_Verificato) Then
                        '    WorkRow.Item("GRID_EXECUTED") = "*"
                        'ElseIf (clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS") = clsWmsJob.cstIdJobStatus_Cancellato) Then
                        '    WorkRow.Item("GRID_EXECUTED") = "D"
                        'ElseIf (clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS") = clsWmsJob.cstIdJobStatus_Sospeso) Then
                        '    WorkRow.Item("GRID_EXECUTED") = "S"
                        'Else
                        '    WorkRow.Item("GRID_EXECUTED") = ""
                        'End If

                        '****************************************************************************
                        '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                        '****************************************************************************
                        Dim QtaDaPrelevareInUdmBase As Double = 0
                        Dim QtaPrelevataInUdmBase As Double = 0
                        Dim RowIDSTATUS As Long = 0
                        QtaDaPrelevareInUdmBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_BASE")
                        QtaPrelevataInUdmBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_BASE")
                        RowIDSTATUS = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS")
                        If ((RowIDSTATUS >= clsWmsJob.cstIdJobStatus_Verificato) Or (QtaPrelevataInUdmBase >= QtaDaPrelevareInUdmBase)) Then
                            WorkRow.Item("GRID_EXECUTED") = "*"
                        ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Cancellato) Then
                            WorkRow.Item("GRID_EXECUTED") = "D"
                        ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Sospeso) Then
                            WorkRow.Item("GRID_EXECUTED") = "S"
                        ElseIf (clsWmsJob.IsLastStepJobDecori(WorkRow, False) = True) Then
                            WorkRow.Item("GRID_EXECUTED") = "/"
                        ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Iniziato) Then
                            WorkRow.Item("GRID_EXECUTED") = "W" 'IN LAVORAZIONE
                        Else
                            WorkRow.Item("GRID_EXECUTED") = ""
                        End If
                        '*****************************************************************************

                        WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBS")
                        WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBSGRP")
                        WorkRow.Item("ZNR_WMS_GRPEXEC") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_GRPEXEC")
                        WorkRow.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS")
                        WorkRow.Item("STATUS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "STATUS")
                        WorkRow.Item("STATUS_DESCR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "STATUS_DESCR")
                        WorkRow.Item("TKNUM") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "TKNUM")
                        WorkRow.Item("MAKTG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "MAKTG")

                        WorkRow.Item("Werks_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_ORI")
                        WorkRow.Item("Lgort_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_ORI")
                        WorkRow.Item("Matnr_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_ORI")
                        WorkRow.Item("Charg_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_ORI")
                        WorkRow.Item("Bestq_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_ORI")
                        WorkRow.Item("Sobkz_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_ORI")
                        WorkRow.Item("Sonum_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_ORI")
                        WorkRow.Item("Lgnum_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_ORI")
                        WorkRow.Item("Lgtyp_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_ORI")
                        WorkRow.Item("Lgpla_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_ORI")
                        WorkRow.Item("Lenum_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_ORI")
                        WorkRow.Item("Meins_Ori") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_ORI")
                        WorkRow.Item("Zqtapk_Ori") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI")
                        WorkRow.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_PZ")
                        WorkRow.Item("MEINS_SC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_SC")
                        WorkRow.Item("MEINS_PAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_PAL")

                        WorkRow.Item("ZQTAPK_ORI_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_BASE")
                        WorkRow.Item("ZQTAPK_ORI_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_CONS")
                        WorkRow.Item("ZQTAPK_ORI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PZ")
                        WorkRow.Item("ZQTAPK_ORI_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_SC")
                        WorkRow.Item("ZQTAPK_ORI_PL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PL")
                        WorkRow.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_FULL_PALL")
                        WorkRow.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_PARTIAL")
                        WorkRow.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_SFUSI_PZ")

                        WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_BASE")
                        WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_MEINS")
                        WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_CONS")
                        WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_CONS")
                        WorkRow.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_FULL")
                        WorkRow.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PARTIA")
                        WorkRow.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_SF")
                        WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PZ")

                        WorkRow.Item("Werks_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_DEST")
                        WorkRow.Item("Lgort_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_DEST")
                        WorkRow.Item("Matnr_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_DEST")
                        WorkRow.Item("Charg_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_DEST")
                        WorkRow.Item("Bestq_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_DEST")
                        WorkRow.Item("Sobkz_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_DEST")
                        WorkRow.Item("Sonum_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_DEST")
                        WorkRow.Item("Lgnum_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_DEST")
                        WorkRow.Item("Lgtyp_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_DEST")
                        WorkRow.Item("Lgpla_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_DEST")
                        WorkRow.Item("Lenum_Dest") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_DEST")

                        WorkRow.Item("ZPICKFULLPARTIAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZPICKFULLPARTIAL")
                        WorkRow.Item("SEQUENCE") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "SEQUENCE")
                        WorkRow.Item("CURRENT_STEP") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "CURRENT_STEP")
                        WorkRow.Item("NUM_STEPS_TOTAL") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "NUM_STEPS_TOTAL")
                        WorkRow.Item("Data_Creazione") = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString 'rfcRow.GetString(Out_rfcStruct_ZWMS_JOBS.GetElementMetadata("Data_Creazione").Name)
                        WorkRow.Item("Ora_Creazione") = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString 'rfcRow.GetString(Out_rfcStruct_ZWMS_JOBS.GetElementMetadata("Ora_Creazione").Name)
                        WorkRow.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNRPICK")
                        WorkRow.Item("ZPOSPK") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZPOSPK")
                        WorkRow.Item("VBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "VBELN")
                        WorkRow.Item("POSNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "POSNR")
                        WorkRow.Item("NUM_CONS_VBELV") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "NUM_CONS_VBELV")
                        WorkRow.Item("POS_CONS_POSNV") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "POS_CONS_POSNV")
                        WorkRow.Item("ZWMS_STOP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_STOP_SEQ")
                        WorkRow.Item("ZWMS_DROP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_DROP_SEQ")
                        WorkRow.Item("EBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "EBELN")
                        WorkRow.Item("EBELP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "EBELP")

                        WorkRow.Item("KUNNR_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_AG")
                        WorkRow.Item("KUNNR_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_WE")
                        WorkRow.Item("KUNNR_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_RG")

                        '>>> DESCRIZIONI CLIENTI ( STRUTTURA AD UN LIVELLO DIVERSO )
                        WorkRow.Item("NAME_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_AG")
                        WorkRow.Item("NAME_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_WE")
                        WorkRow.Item("NAME_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_RG")

                        WorkRow.Item("ZZCDLEGACY") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "ZZCDLEGACY")
                        WorkRow.Item("ZWMS_SKU_PALLET") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "ZWMS_SKU_PALLET")

                        WorkRow.Item("ID_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ID_JOBS_TYPE")
                        WorkRow.Item("DESCR_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "DESCR_JOBS_TYPE")
                        WorkRow.Item("JOBS_TYPE_KZEAR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_TYPE, "KZEAR")
                        WorkRow.Item("Priorita") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "PRIORITA")
                        WorkRow.Item("Urgente") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "URGENTE")
                        WorkRow.Item("Zflawm") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFLAWM")
                        WorkRow.Item("PALLET_INTERI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "PALLET_INTERI")
                        WorkRow.Item("SCATOLE_INTERE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SCATOLE_INTERE")

                        WorkRow.Item("ZTIPO_ENTMERCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZTIPO_ENTMERCE")
                        WorkRow.Item("ZFORCEDDEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCEDDEST")
                        WorkRow.Item("ZFORCSPUNTACONF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCSPUNTACONF")
                        WorkRow.Item("CHARG_TASSATIVA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_TASSATIVA")
                        WorkRow.Item("LGNUM_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_STAG_DOOR")
                        WorkRow.Item("LGTYP_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_STAG_DOOR")
                        WorkRow.Item("LGPLA_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_STAG_DOOR")
                        WorkRow.Item("LGNUM_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_DOOCK_DOOR")
                        WorkRow.Item("LGTYP_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_DOOCK_DOOR")
                        WorkRow.Item("LGPLA_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_DOOCK_DOOR")


                        WorkRow.Item("ZCARR_PROP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_PROP")
                        WorkRow.Item("ZCARR_EXEC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC")
                        WorkRow.Item("ZCARR_EXEC_FL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC_FL")
                        WorkRow.Item("ZCARR_EXEC_SF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC_SF")

                        WorkRow.Item("LGNUM_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_PROP_ORI")
                        WorkRow.Item("LGTYP_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_PROP_ORI")
                        WorkRow.Item("LGPLA_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_PROP_ORI")
                        WorkRow.Item("LENUM_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_PROP_ORI")
                        WorkRow.Item("OK_QTA_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "OK_QTA_PROP_ORI")

                        WorkRow.Item("LGNUM_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_PROP_ORIFL")
                        WorkRow.Item("LGTYP_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_PROP_ORIFL")
                        WorkRow.Item("LGPLA_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_PROP_ORIFL")
                        WorkRow.Item("LENUM_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_PROP_ORIFL")
                        WorkRow.Item("OK_QTA_PROPORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "OK_QTA_PROPORIFL")

                        WorkRow.Item("ZDOC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZDOC")
                        WorkRow.Item("MEMO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEMO")
                        WorkRow.Item("ZZ_NDIS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZZ_NDIS")
                        WorkRow.Item("INFO_PRELIEVO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "INFO_PRELIEVO")

                        '* GESTIONE CAMPI ERRORE
                        WorkRow.Item("ZWMS_ERROR_CODE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_ERROR_CODE")
                        WorkRow.Item("ZWMS_ROW_STA_DES") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_ROW_STA_DES")

                        WorkRow.Item("IMBALLO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_VARIANTE_IMBALLO, "Imballo")
                        WorkRow.Item("PZ_X_SC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_VARIANTE_IMBALLO, "Pz_X_Sc")
                        WorkRow.Item("SC_X_PAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_VARIANTE_IMBALLO, "Sc_X_Pal")
                        WorkRow.Item("M2_X_PAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_VARIANTE_IMBALLO, "M2_X_Pal")

                        outDataTable.Rows.Add(WorkRow)

                    Next

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1135, "", " (GET_JOBGRP_LIST). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_JOBS_LIST = RetCode
            Else
                Call_ZWS_GET_JOBS_LIST = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWMS_GET_JOBS_LIST_QUEUE(ByVal inDivisione As String, ByVal inNumeroMagazzino As String, ByVal inCurrentWorkQueue As String, ByRef inFilterSapWmWmsJob As clsDataType.SapWmWmsJob, ByVal inShowOnlyActive As Boolean, ByVal inAccorpaMatnr_Charg As Boolean, ByVal inGetQueueForExecution As Boolean, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outDataTableTaskLines As DataTable, ByRef outTaskLinesInfo As clsDataType.SapTaskLinesInfo, ByRef outJobsQueueWeightInfo As clsDataType.JobsQueueWeightInfoStruct, ByRef outClsUDS As clsUDS, ByRef outSapForkLiftStuct As clsDataType.SapForkLiftStruct, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim WorkRowTaskLines As DataRow
        Dim SingoloRec As New WS_GET_JOBS_LIST.ZwmsJobsMobile

        Dim objWS As New WS_GET_JOBS_LIST.ZWS_GET_JOBS_LIST
        Dim stImportParams As New WS_GET_JOBS_LIST.ZwmsGetJobsList
        Dim objWSResponse As New WS_GET_JOBS_LIST.ZwmsGetJobsListResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_GET_JOBS_LIST_QUEUE = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


            If (Len(inDivisione) <= 0) And (Len(inNumeroMagazzino) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1109, "", " JOBS_GROUP_LIST. Parametri [Divisione]e[NumeroMagazzino] non validi.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then

            ''IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            'stImportParams.IZwmsJobsFilter = New WS_GET_JOBS_LIST.ZwmsJobs
            'stImportParams.IZwmsJobsFilter.IdJobsType = inFilterSapWmWmsJob.IdWmsJobType  '>>> FILTRO TIPO DI JOB
            'stImportParams.IZwmsJobsFilter.ZnrWmsJobsgrp = inFilterSapWmWmsJob.CodiceGruppoMissioni '>>> FILTRO GRUPPO MISSIONI
            'stImportParams.IZwmsJobsFilter.ZnrWmsJobs = inFilterSapWmWmsJob.NrWmsJobs  '>>> FILTRO MISSIONE
            'stImportParams.IZwmsJobsFilter.LgnumOri = inNumeroMagazzino
            'stImportParams.IZwmsJobsFilter.WerksOri = inDivisione
            'stImportParams.IZwmsJobsFilter.ZcarrProp = inFilterSapWmWmsJob.IdCarrellistaProposto
            'stImportParams.IZw3msJobsFilter.ZcarrExec = inFilterSapWmWmsJob.IdCarrellistaEsecuzione
            'stImportParams.IZwmsJobsFilter.OraCreazione = "00:00:00"
            'stImportParams.IZwmsJobsFilter.OraFine = "00:00:00"
            'stImportParams.IZwmsJobsFilter.OraStart = "00:00:00"
            'If (inShowOnlyActive = True) Then
            '    stImportParams.IShowOnlyActive = "X"
            'Else
            '    stImportParams.IShowOnlyActive = " "
            'End If
            'If (inAccorpaMatnr_Charg = True) Then
            '    stImportParams.IAccorpaMatnrCharg = "X"
            'Else
            '    stImportParams.IAccorpaMatnrCharg = " "
            'End If
            'stImportParams.ISpras = inLingua

            ''>>>> IMPOSTO LE CREDENZIALI DELLO USER
            'objNetworkCredential.UserName = UserRfcWs
            'objNetworkCredential.Password = PswUserRfcWs
            'objWS.Credentials = objNetworkCredential

            ''>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            'objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_jobs_list/" & SapClient & "/zws_get_jobs_list/zws_get_jobs_list"


            'Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            ''chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            'objWSResponse = objWS.ZwmsGetJobsList(stImportParams)
            'Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            'If (objWSResponse.ESuccess = "Y") Then
            '    outGetOk = True 'UNICO CASO DI CHECK OK
            '    If (objWSResponse.EZwmsJobsTab.Length > 0) Then
            '        For Index = 0 To objWSResponse.EZwmsJobsTab.Length - 1
            '            SingoloRec = objWSResponse.EZwmsJobsTab(Index)
            '            If (clsUtility.IsStringValid(SingoloRec.ZwmsJobsRec.ZwmsJobs.ZnrWmsJobs, True) = True) Then
            '                WorkRow = outDataTable.NewRow()
            '                '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
            '                If (SingoloRec.ZwmsJobsRec.ZwmsJobs.Idstatus >= clsWmsJob.cstIdJobStatus_Verificato) Then
            '                    WorkRow.Item("GRID_EXECUTED") = "*"
            '                ElseIf (SingoloRec.ZwmsJobsRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Cancellato) Then
            '                    WorkRow.Item("GRID_EXECUTED") = "D"
            '                ElseIf (SingoloRec.ZwmsJobsRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Sospeso) Then
            '                    WorkRow.Item("GRID_EXECUTED") = "S"
            '                Else
            '                    WorkRow.Item("GRID_EXECUTED") = ""
            '                End If
            '                WorkRow.Item("ZNR_WMS_JOBS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZnrWmsJobs
            '                WorkRow.Item("ZNR_WMS_JOBSGRP") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZnrWmsJobsgrp
            '                WorkRow.Item("ZNR_WMS_GRPEXEC") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZnrWmsGrpexec
            '                WorkRow.Item("IDSTATUS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Idstatus
            '                WorkRow.Item("STATUS") = SingoloRec.ZwmsJobsRec.Status
            '                WorkRow.Item("STATUS_DESCR") = SingoloRec.ZwmsJobsRec.StatusDescr
            '                WorkRow.Item("MAKTG") = SingoloRec.ZwmsJobsRec.Maktg
            '                WorkRow.Item("WERKS_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.WerksOri
            '                WorkRow.Item("LGORT_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgortOri
            '                WorkRow.Item("MATNR_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.MatnrOri
            '                WorkRow.Item("CHARG_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ChargOri
            '                WorkRow.Item("BESTQ_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.BestqOri
            '                WorkRow.Item("SOBKZ_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.SobkzOri
            '                WorkRow.Item("SONUM_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.SonumOri
            '                WorkRow.Item("LGNUM_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgnumOri
            '                WorkRow.Item("LGTYP_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgtypOri
            '                WorkRow.Item("LGPLA_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgplaOri
            '                WorkRow.Item("LENUM_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LenumOri
            '                WorkRow.Item("MEINS_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.MeinsOri
            '                WorkRow.Item("ZQTAPK_ORI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkOri
            '                WorkRow.Item("ZQTAPK_ORI_PZ") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkOriPz
            '                WorkRow.Item("ZQTAPK_ORI_SC") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkOriSc
            '                WorkRow.Item("ZQTAPK_ORI_PL") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkOriPl
            '                WorkRow.Item("ZQTAPK_SFUSI_PZ") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtapkSfusiPz
            '                WorkRow.Item("ZQTA_PREL_BASE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtaPrelBase
            '                WorkRow.Item("UDM_QTAPR_MEINS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.UdmQtaprMeins
            '                WorkRow.Item("ZQTA_PREL_CONS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtaPrelCons
            '                WorkRow.Item("UDM_QTAPR_CONS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.UdmQtaprCons
            '                WorkRow.Item("ZQTA_PREL_PZ") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZqtaPrelPz
            '                WorkRow.Item("UDM_QTAPR_PZ") = SingoloRec.ZwmsJobsRec.ZwmsJobs.UdmQtaprPz
            '                WorkRow.Item("WERKS_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.WerksDest
            '                WorkRow.Item("LGORT_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgortDest
            '                WorkRow.Item("MATNR_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.MatnrDest
            '                WorkRow.Item("CHARG_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ChargDest
            '                WorkRow.Item("BESTQ_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.BestqDest
            '                WorkRow.Item("SOBKZ_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.SobkzDest
            '                WorkRow.Item("SONUM_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.SonumDest
            '                WorkRow.Item("LGNUM_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgnumDest
            '                WorkRow.Item("LGTYP_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgtypDest
            '                WorkRow.Item("LGPLA_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LgplaDest
            '                WorkRow.Item("LENUM_DEST") = SingoloRec.ZwmsJobsRec.ZwmsJobs.LenumDest
            '                WorkRow.Item("SEQUENCE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Sequence
            '                WorkRow.Item("CURRENT_STEP") = SingoloRec.ZwmsJobsRec.ZwmsJobs.CurrentStep
            '                WorkRow.Item("NUM_STEPS_TOTAL") = SingoloRec.ZwmsJobsRec.ZwmsJobs.NumStepsTotal
            '                WorkRow.Item("DATA_CREAZIONE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.DataCreazione
            '                WorkRow.Item("ORA_CREAZIONE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.OraCreazione
            '                WorkRow.Item("ZNRPICK") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Znrpick
            '                WorkRow.Item("ZPOSPK") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Zpospk
            '                WorkRow.Item("VBELN") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Vbeln
            '                WorkRow.Item("POSNR") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Posnr
            '                WorkRow.Item("NUM_CONS_VBELV") = SingoloRec.ZwmsJobsRec.ZwmsJobs.NumConsVbelv
            '                WorkRow.Item("POS_CONS_POSNV") = SingoloRec.ZwmsJobsRec.ZwmsJobs.PosConsPosnv
            '                WorkRow.Item("ID_JOBS_TYPE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.IdJobsType
            '                WorkRow.Item("DESCR_JOBS_TYPE") = SingoloRec.ZwmsJobsRec.ZwmsJobsType.DescrJobsType
            '                WorkRow.Item("JOBS_TYPE_KZEAR") = SingoloRec.ZwmsJobsRec.ZwmsJobsType.Kzear
            '                WorkRow.Item("PRIORITA") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Priorita
            '                WorkRow.Item("URGENTE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Urgente
            '                WorkRow.Item("ZFLAWM") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Zflawm
            '                WorkRow.Item("PALLET_INTERI") = SingoloRec.ZwmsJobsRec.ZwmsJobs.PalletInteri
            '                WorkRow.Item("SCATOLE_INTERE") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ScatoleIntere
            '                WorkRow.Item("CHARG_TASSATIVA") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ChargTassativa
            '                WorkRow.Item("ZCARR_PROP") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZcarrProp
            '                WorkRow.Item("ZCARR_EXEC") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZcarrExec
            '                WorkRow.Item("ZDOC") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Zdoc
            '                WorkRow.Item("MEMO") = SingoloRec.ZwmsJobsRec.ZwmsJobs.Memo
            '                WorkRow.Item("ZZ_NDIS") = SingoloRec.ZwmsJobsRec.ZwmsJobs.ZzNdis
            '                WorkRow.Item("INFO_PRELIEVO") = SingoloRec.ZwmsJobsRec.ZwmsJobs.InfoPrelievo

            '                WorkRow.Item("IMBALLO") = SingoloRec.ZwmsJobsRec.VarianteImballo.Imballo
            '                WorkRow.Item("PZ_X_SC") = SingoloRec.ZwmsJobsRec.VarianteImballo.PzXSc
            '                WorkRow.Item("SC_X_PAL") = SingoloRec.ZwmsJobsRec.VarianteImballo.ScXPal
            '                WorkRow.Item("M2_X_PAL") = SingoloRec.ZwmsJobsRec.VarianteImballo.M2XPal

            '                outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
            '            End If
            '        Next
            '    End If
            'End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            Dim rfcRowTaskLines As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_JOBS_LIST_QUEUE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            Dim In_rfcTable As IRfcStructure = rfcFunction.GetStructure("I_ZWMS_JOBS_FILTER")


            rfcFunction.SetValue("I_WERKS", inDivisione)
            rfcFunction.SetValue("I_LGNUM", inNumeroMagazzino)
            rfcFunction.SetValue("I_ZID_PICK_QUEUE", inCurrentWorkQueue)
            rfcFunction.SetValue("I_ZID_WMS_FORKLIFT", clsUser.SapWmsUser.ZID_WMS_FORKLIFT)
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inFilterSapWmWmsJob.NrWmsJobs) '>>> FILTRO MISSIONE
            rfcFunction.SetValue("I_NUM_CONS_VBELV", inFilterSapWmWmsJob.ConsegnaNumero)  '>>> FILTRO NUMERO CONSEGNA
            In_rfcTable.SetValue("ZNR_WMS_JOBS", inFilterSapWmWmsJob.NrWmsJobs)  '>>> FILTRO MISSIONE


            If (inGetQueueForExecution = True) Then
                rfcFunction.SetValue("I_GET_QUEUE_FOR_EXECUTION", "X")
            Else
                rfcFunction.SetValue("I_GET_QUEUE_FOR_EXECUTION", " ")
            End If
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_ZWMS_COMPUTER", clsUtility.GetWorkStationName())
            Dim WorkVersion As String = ""
#If APPLICAZIONE_WIN32 = "SI" Then

            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion("", WorkVersion))
#Else
            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion())
#End If
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_ZWMS_JOBS_TAB")


                'Verifica KTAG a bordo forklift di missione differente
                outSapForkLiftStuct.DropUdsFromForklift = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_DROP_UDS_FROM_FORKLIFT")


                'Verifica KTAG a bordo forklift di utente differente
                outSapForkLiftStuct.UdsOnForkDiffUser = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_UDS_ONFORK_DIFF_USER")



                If (rfcTable.RowCount > 0) Then

                    Dim Out_rfcStruct_ZWMS_JOBS_INFO As IRfcStructure = rfcTable.GetStructure("ZWMS_JOBS_REC")
                    Dim Out_rfcStruct_ZWMS_JOBS As IRfcStructure = Out_rfcStruct_ZWMS_JOBS_INFO.GetStructure("ZWMS_JOBS")
                    Dim Out_rfcStruct_ZWMS_JOBS_TYPE As IRfcStructure = Out_rfcStruct_ZWMS_JOBS_INFO.GetStructure("ZWMS_JOBS_TYPE")
                    Dim Out_rfcStruct_VARIANTE_IMBALLO As IRfcStructure = Out_rfcStruct_ZWMS_JOBS_INFO.GetStructure("VARIANTE_IMBALLO")
                    Dim Out_rfcTable_ZWMS_TASK_LINES_TAB As IRfcTable = rfcTable.GetTable("ZWMS_TASK_LINES_TAB")
                    Dim Out_rfcStruct_ZWMS_TASK_LINES_INFO As IRfcStructure = rfcTable.GetStructure("ZWMS_TASK_LINES_INFO")


                    Dim Out_rfcStruct_FORKLIFT As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_FORKLIFT")
                    Dim Out_rfcStruct_UDS_WEIGHT_INFO As IRfcStructure = rfcFunction.GetStructure("E_UDS_WEIGHT_INFO")
                    Dim Out_rfcStruct_ZWMS_QUEUE_WEIGHT As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_QUEUE_WEIGHT")
                    Dim Out_rfcStruct_ZWMS_UDS_MAIN_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_UDS_MAIN_INFO")
                    Dim Out_rfcTable_ZWMS_UDS_MATNR_TAB As IRfcTable = rfcFunction.GetTable("E_ZWMS_UDS_MATNR_TAB")


                    outSapForkLiftStuct.Divisione = "" 'clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "ZNR_WMS_JOBS")
                    outSapForkLiftStuct.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "LGNUM")
                    outSapForkLiftStuct.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "LGTYP")
                    outSapForkLiftStuct.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "LGPLA")
                    outSapForkLiftStuct.IdForkLift = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "ZID_WMS_FORKLIFT")
                    outSapForkLiftStuct.DescrizioneForkLift = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "ZDESCR_WMS_FORKLIFT")
                    outSapForkLiftStuct.ForkLiftMaxPesoCarico = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_FORKLIFT, "ZFORKLIFT_MAX_PESO")
                    outSapForkLiftStuct.UdmPeso = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "GEWEI")
                    'INFO RECUPERATA DA UN PARAMETRO SINGOLO DELLA FUNCTION
                    outSapForkLiftStuct.NumUdsOnForklift = clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_NUM_UDS_ON_FORKLIFT")


                    'RECUPERO INFORMAZIONI DEL PESO DELLE MISSIONI
                    outJobsQueueWeightInfo.PesoTotaleCoda_Kg = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_QUEUE_WEIGHT, "ZWMS_PESOALLQUEUE_EU")
                    outJobsQueueWeightInfo.PesoRimanenteCoda_Kg = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_QUEUE_WEIGHT, "ZWMS_PESORIMQUEUE_EU")
                    outJobsQueueWeightInfo.UdmPesoKg = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_QUEUE_WEIGHT, "GEWEI_EU")
                    outJobsQueueWeightInfo.PesoTotaleCoda_Lb = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_QUEUE_WEIGHT, "ZWMS_PESOALLQUEUE_USA")
                    outJobsQueueWeightInfo.PesoRimanenteCoda_Lb = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_QUEUE_WEIGHT, "ZWMS_PESORIMQUEUE_USA")
                    outJobsQueueWeightInfo.UdmPesoLb = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_QUEUE_WEIGHT, "GEWEI_USA")

                    '*********************************************************************************************************************************************
                    'RECUPERO DATI DELL'EVENTUALE UDS A BORDO DEL CARRELLO 
                    '*********************************************************************************************************************************************
                    If (outClsUDS Is Nothing) Then
                        outClsUDS = New clsUDS
                    End If
                    If (outSapForkLiftStuct.NumUdsOnForklift > 0) Then
                        'HO UN UDS A BORDO DEL FORKLIFT ( RECUPERO INFO DEL PESO )
                        outClsUDS.UDSWeightInfo.PesoTotaleUDS_Kg = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_UDS_WEIGHT_INFO, "ZWMS_PESOMAT_EU")
                        outClsUDS.UDSWeightInfo.UdmPesoKg = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_UDS_WEIGHT_INFO, "GEWEI_EU")
                        outClsUDS.UDSWeightInfo.PesoTotaleUDS_Lb = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_UDS_WEIGHT_INFO, "ZWMS_PESOMAT_USA")
                        outClsUDS.UDSWeightInfo.UdmPesoLb = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_UDS_WEIGHT_INFO, "GEWEI_USA")

                        '>>> RITORNO LE INFORMAZIONI PRINCIPALI DELLA UDS
                        If (Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS") Is Nothing)) Then
                            'outClsUDS.UDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS")
                            outClsUDS.UDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS", 0)
                        End If
                        If (Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBSGRP") Is Nothing)) Then
                            outClsUDS.UDSInfo.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBSGRP")
                        End If

                        outClsUDS.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LENUM"))

                        outClsUDS.UDSInfo.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "MAKTG")
                        outClsUDS.UDSInfo.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZQTA_PREL_BASE")
                        outClsUDS.UDSInfo.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "UDM_QTAPR_MEINS")
                        outClsUDS.UDSInfo.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZQTA_PREL_CONS")
                        outClsUDS.UDSInfo.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "UDM_QTAPR_CONS")
                        outClsUDS.UDSInfo.QtaPrelevataInUdMPezzo = 0
                        outClsUDS.UDSInfo.UdmQtaPrelevataInUdMPezzo = ""

                        outClsUDS.UDSInfo.PickSUCompleto = False

                        outClsUDS.UDSInfo.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "WERKS")
                        outClsUDS.UDSInfo.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGNUM")
                        outClsUDS.UDSInfo.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGTYP")
                        outClsUDS.UDSInfo.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGPLA")
                        outClsUDS.UDSInfo.UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        outClsUDS.UDSInfo.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LETYP")
                        outClsUDS.UDSInfo.UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                        outClsUDS.UDSInfo.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGORT")

                        '>>> SE NECESSARIO VALORIZZO IL CODICE MATERIALE
                        If (outClsUDS.UDSInfo.CodiceMateriale = "") And (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "MATNR"), True) = True) Then
                            outClsUDS.UDSInfo.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "MATNR")
                        End If

                        '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE (SE NE HO UNA VALIDA PRENDO QUELLA
                        If (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "CHARG"), True) = True) Then
                            outClsUDS.UDSInfo.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "CHARG")
                        End If

                        outClsUDS.UDSInfo.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "SOBKZ")
                        outClsUDS.UDSInfo.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "SONUM")
                        outClsUDS.UDSInfo.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "BESTQ")
                        outClsUDS.UDSInfo.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "TBNUM")

                        outClsUDS.UDSInfo.TruckDayNr = ""
                        outClsUDS.UDSInfo.TrasfNumPallet = 0

                        'SE E' PRESENTE UN UDS A BORDO DEL FORKLIFT RITORNO LE INFO DEI COMPONENTI DEL FORKLIFT
                        If (Out_rfcTable_ZWMS_UDS_MATNR_TAB.RowCount > 0) Then
                            ReDim outClsUDS.UDSInfo.Componenti(Out_rfcTable_ZWMS_UDS_MATNR_TAB.RowCount - 1)

                            'ESEGUO LOOP SU TUTTI I COMPONENTI DELLA UDS
                            Dim LoopIndexUdsMatn As Long = 0
                            For Each rfcRow In Out_rfcTable_ZWMS_UDS_MATNR_TAB

                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))

                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAKTG")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).QtaPrelevataInUdMPezzo = 0
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UdmQtaPrelevataInUdMPezzo = ""

                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).PickSUCompleto = False

                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).MagazzinoLogico = ""

                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                                outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")

                                LoopIndexUdsMatn = LoopIndexUdsMatn + 1
                            Next
                        End If

                    End If

                    Dim RowIDSTATUS As Long = 0

                    '*********************************************************************************************************************************************
                    '>>> ESEGUO LOOP SULLE RIGHE DEI JOBS RITORNATI  
                    '*********************************************************************************************************************************************
                    For Each rfcRow In rfcTable

                        WorkRow = outDataTable.NewRow()

                        '>>> IMPOSTO OGGETTI RFC PER OTTENERE DATI DELLA STRUTTURA
                        Out_rfcStruct_ZWMS_JOBS_INFO = rfcRow.Item("ZWMS_JOBS_REC").GetStructure
                        Out_rfcStruct_ZWMS_JOBS = rfcRow.Item("ZWMS_JOBS_REC").GetStructure(0).Item("ZWMS_JOBS").GetStructure
                        Out_rfcStruct_ZWMS_JOBS_TYPE = rfcRow.Item("ZWMS_JOBS_REC").GetStructure(0).Item("ZWMS_JOBS_TYPE").GetStructure
                        Out_rfcTable_ZWMS_TASK_LINES_TAB = rfcRow.Item("ZWMS_TASK_LINES_TAB").GetTable
                        Out_rfcStruct_ZWMS_TASK_LINES_INFO = rfcRow.Item("ZWMS_TASK_LINES_INFO").GetStructure
                        Out_rfcStruct_VARIANTE_IMBALLO = Out_rfcStruct_ZWMS_JOBS_INFO.Item("VARIANTE_IMBALLO").GetStructure


                        WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBS")
                        WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBSGRP")
                        WorkRow.Item("ZNR_WMS_GRPEXEC") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_GRPEXEC")
                        WorkRow.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS")

                        WorkRow.Item("STATUS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "STATUS")
                        WorkRow.Item("STATUS_DESCR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "STATUS_DESCR")
                        WorkRow.Item("TKNUM") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "TKNUM")
                        WorkRow.Item("MAKTG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "MAKTG")

                        WorkRow.Item("WERKS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_ORI")
                        WorkRow.Item("LGORT_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_ORI")
                        WorkRow.Item("MATNR_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_ORI")
                        WorkRow.Item("CHARG_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_ORI")
                        WorkRow.Item("BESTQ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_ORI")
                        WorkRow.Item("SOBKZ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_ORI")
                        WorkRow.Item("SONUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_ORI")
                        WorkRow.Item("LGNUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_ORI")
                        WorkRow.Item("LGTYP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_ORI")
                        WorkRow.Item("LGPLA_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_ORI")
                        WorkRow.Item("LENUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_ORI")
                        WorkRow.Item("MEINS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_ORI")
                        WorkRow.Item("ZQTAPK_ORI") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI")
                        WorkRow.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_PZ")
                        WorkRow.Item("MEINS_SC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_SC")
                        WorkRow.Item("MEINS_PAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_PAL")

                        WorkRow.Item("ZQTAPK_ORI_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_BASE")
                        WorkRow.Item("ZQTAPK_ORI_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_CONS")
                        WorkRow.Item("ZQTAPK_ORI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PZ")
                        WorkRow.Item("ZQTAPK_ORI_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_SC")
                        WorkRow.Item("ZQTAPK_ORI_PL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PL")
                        WorkRow.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_FULL_PALL")
                        WorkRow.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_PARTIAL")
                        WorkRow.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_SFUSI_PZ")

                        WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_BASE")
                        WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_MEINS")
                        WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_CONS")
                        WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_CONS")
                        WorkRow.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_FULL")
                        WorkRow.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PARTIA")
                        WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PZ")
                        WorkRow.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_SF")

                        WorkRow.Item("WERKS_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_DEST")
                        WorkRow.Item("LGORT_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_DEST")
                        WorkRow.Item("MATNR_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_DEST")
                        WorkRow.Item("CHARG_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_DEST")
                        WorkRow.Item("BESTQ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_DEST")
                        WorkRow.Item("SOBKZ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_DEST")
                        WorkRow.Item("SONUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_DEST")
                        WorkRow.Item("LGNUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_DEST")
                        WorkRow.Item("LGTYP_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_DEST")
                        WorkRow.Item("LGPLA_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_DEST")
                        WorkRow.Item("LENUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_DEST")
                        WorkRow.Item("ZPICKFULLPARTIAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZPICKFULLPARTIAL")
                        WorkRow.Item("SEQUENCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SEQUENCE")
                        WorkRow.Item("CURRENT_STEP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CURRENT_STEP")
                        WorkRow.Item("NUM_STEPS_TOTAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "NUM_STEPS_TOTAL")
                        WorkRow.Item("DATA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString
                        WorkRow.Item("ORA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString
                        WorkRow.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNRPICK")
                        WorkRow.Item("ZPOSPK") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZPOSPK")
                        WorkRow.Item("VBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "VBELN")
                        WorkRow.Item("POSNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "POSNR")

                        WorkRow.Item("NUM_CONS_VBELV") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "NUM_CONS_VBELV")
                        WorkRow.Item("POS_CONS_POSNV") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "POS_CONS_POSNV")

                        WorkRow.Item("ZWMS_STOP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_STOP_SEQ")
                        WorkRow.Item("ZWMS_DROP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_DROP_SEQ")
                        WorkRow.Item("EBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "EBELN")
                        WorkRow.Item("EBELP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "EBELP")

                        WorkRow.Item("KUNNR_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_AG")
                        WorkRow.Item("KUNNR_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_WE")
                        WorkRow.Item("KUNNR_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_RG")

                        '>>> DESCRIZIONI CLIENTI ( STRUTTURA AD UN LIVELLO DIVERSO )
                        WorkRow.Item("NAME_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_AG")
                        WorkRow.Item("NAME_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_WE")
                        WorkRow.Item("NAME_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_RG")

                        WorkRow.Item("ZZCDLEGACY") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "ZZCDLEGACY")
                        WorkRow.Item("ZWMS_SKU_PALLET") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "ZWMS_SKU_PALLET")

                        WorkRow.Item("ID_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ID_JOBS_TYPE")
                        WorkRow.Item("DESCR_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_TYPE, "DESCR_JOBS_TYPE")
                        WorkRow.Item("JOBS_TYPE_KZEAR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_TYPE, "KZEAR")
                        WorkRow.Item("PRIORITA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "PRIORITA")
                        WorkRow.Item("URGENTE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "URGENTE")
                        WorkRow.Item("ZFLAWM") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFLAWM")
                        WorkRow.Item("PALLET_INTERI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "PALLET_INTERI")
                        WorkRow.Item("SCATOLE_INTERE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SCATOLE_INTERE")
                        WorkRow.Item("ZTIPO_ENTMERCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZTIPO_ENTMERCE")
                        WorkRow.Item("ZFORCEDDEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCEDDEST")
                        WorkRow.Item("ZFORCSPUNTACONF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCSPUNTACONF")
                        WorkRow.Item("CHARG_TASSATIVA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_TASSATIVA")
                        WorkRow.Item("LGNUM_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_STAG_DOOR")
                        WorkRow.Item("LGTYP_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_STAG_DOOR")
                        WorkRow.Item("LGPLA_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_STAG_DOOR")
                        WorkRow.Item("LGNUM_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_DOOCK_DOOR")
                        WorkRow.Item("LGTYP_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_DOOCK_DOOR")
                        WorkRow.Item("LGPLA_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_DOOCK_DOOR")
                        WorkRow.Item("ZCARR_PROP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_PROP")

                        WorkRow.Item("ZCARR_EXEC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC")
                        WorkRow.Item("ZCARR_EXEC_FL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC_FL")
                        WorkRow.Item("ZCARR_EXEC_SF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC_SF")

                        WorkRow.Item("LGNUM_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_PROP_ORI")
                        WorkRow.Item("LGTYP_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_PROP_ORI")
                        WorkRow.Item("LGPLA_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_PROP_ORI")
                        WorkRow.Item("LENUM_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_PROP_ORI")
                        WorkRow.Item("OK_QTA_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "OK_QTA_PROP_ORI")

                        WorkRow.Item("LGNUM_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_PROP_ORIFL")
                        WorkRow.Item("LGTYP_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_PROP_ORIFL")
                        WorkRow.Item("LGPLA_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_PROP_ORIFL")
                        WorkRow.Item("LENUM_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_PROP_ORIFL")
                        WorkRow.Item("OK_QTA_PROPORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "OK_QTA_PROPORIFL")

                        WorkRow.Item("ZDOC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZDOC")
                        WorkRow.Item("MEMO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEMO")
                        WorkRow.Item("ZZ_NDIS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZZ_NDIS")
                        WorkRow.Item("INFO_PRELIEVO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "INFO_PRELIEVO")

                        '* GESTIONE CAMPI ERRORE
                        WorkRow.Item("ZWMS_ERROR_CODE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_ERROR_CODE")
                        WorkRow.Item("ZWMS_ROW_STA_DES") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_ROW_STA_DES")

                        WorkRow.Item("IMBALLO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "IMBALLO")
                        WorkRow.Item("PZ_X_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "PZ_X_SC")
                        WorkRow.Item("SC_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "SC_X_PAL")
                        WorkRow.Item("M2_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "M2_X_PAL")

                        '
                        'COLONNA QTA' PER UTENTE SCORPORATE...non esiste come parametro di ritorno dalla rfc...ma è valorizzata manualmente
                        '

                        WorkRow.Item("ZPICK_QUEUE_USER") = ""

                        '
                        'COLONNA PESO USA
                        '

                        WorkRow.Item("ZWMS_PESO_PAL_US") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZWMS_PESO_PAL_US")



                        '****************************************************************************
                        '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                        '****************************************************************************
                        Dim QtaDaPrelevareInUdmBase As Double = 0
                        Dim QtaPrelevataInUdmBase As Double = 0
                        Dim TaskLinesStatus As String = ""
                        Dim TaskNotFinish As Boolean = False
                        QtaDaPrelevareInUdmBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_BASE")
                        QtaPrelevataInUdmBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_BASE")
                        RowIDSTATUS = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS")
                        If ((RowIDSTATUS >= clsWmsJob.cstIdJobStatus_Verificato) Or (QtaPrelevataInUdmBase >= QtaDaPrelevareInUdmBase)) Then
                            WorkRow.Item("GRID_EXECUTED") = "*"
                        ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Cancellato) Then
                            WorkRow.Item("GRID_EXECUTED") = "D"
                        ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Sospeso) Then
                            WorkRow.Item("GRID_EXECUTED") = "S"
                        ElseIf (clsWmsJob.IsLastStepJobDecori(WorkRow, False) = True) Then
                            WorkRow.Item("GRID_EXECUTED") = "/"
                        ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Iniziato) Then
                            WorkRow.Item("GRID_EXECUTED") = "W" 'IN LAVORAZIONE

                            If (Out_rfcTable_ZWMS_TASK_LINES_TAB.RowCount > 0) Then
                                TaskNotFinish = False
                                For Each rfcRowTaskLines In Out_rfcTable_ZWMS_TASK_LINES_TAB
                                    TaskLinesStatus = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "IDSTATUS")
                                    If (Val(TaskLinesStatus) < clsWmsJob.cstIdJobStatus_Terminato) Then
                                        TaskNotFinish = True
                                    End If
                                Next
                                '>>> CASO PARTICOLARE PER GESTIRE IL TERMINE MISSIONE NEI PRELIEVI MULTIPLI CON PIU' DI 10 PALLET
                                If (TaskNotFinish = True) Then
                                    WorkRow.Item("GRID_EXECUTED") = "W" 'IN LAVORAZIONE
                                Else
                                    WorkRow.Item("GRID_EXECUTED") = "*" 'IN LAVORAZIONE
                                End If
                            End If
                        Else
                            WorkRow.Item("GRID_EXECUTED") = ""
                        End If
                        outDataTable.Rows.Add(WorkRow)


                        'RITORNO LE INFO PRINCIPALI DELLE TASK LINES
                        outTaskLinesInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZNR_WMS_JOBS")
                        outTaskLinesInfo.TotalTaskLines = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES")
                        outTaskLinesInfo.TotalTaskLinesFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_FULL")
                        outTaskLinesInfo.TotalTaskLinesPartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_PARTIAL")
                        outTaskLinesInfo.TotalTaskLinesDone = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE")
                        outTaskLinesInfo.TotalTaskLinesDoneFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE_FL")
                        outTaskLinesInfo.TotalTaskLinesDonePartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE_PAR")
                        outTaskLinesInfo.TotalTaskLineOpen = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN")
                        outTaskLinesInfo.TotalTaskLinesOpenFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN_FL")
                        outTaskLinesInfo.TotalTaskLinesOpenPartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN_PAR")

                        ' Dim Out_rfcStruct_ZWMS_TASK_LINES As IRfcStructure = rfcTable.GetStructure("ZWMS_TASK_LINES_TAB").c

                        'RITORNO LE TASK LINES SE VALORIZZATE
                        If (Out_rfcTable_ZWMS_TASK_LINES_TAB.RowCount > 0) Then

                            For Each rfcRowTaskLines In Out_rfcTable_ZWMS_TASK_LINES_TAB
                                WorkRowTaskLines = outDataTableTaskLines.NewRow()

                                WorkRowTaskLines.Item("ZNR_TASK_LINES") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZNR_TASK_LINES")

                                WorkRowTaskLines.Item("DATA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString
                                WorkRowTaskLines.Item("ORA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString

                                WorkRowTaskLines.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZNR_WMS_JOBS")
                                WorkRowTaskLines.Item("ZTASK_LINES_SEQ") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZTASK_LINES_SEQ")
                                WorkRowTaskLines.Item("ZPICKFULLPARTIAL") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZPICKFULLPARTIAL")
                                WorkRowTaskLines.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "IDSTATUS")
                                WorkRowTaskLines.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "MEINS_PZ")

                                WorkRowTaskLines.Item("ZQTAPK_ORI_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_ORI_BASE")
                                WorkRowTaskLines.Item("MEINS_BASE") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "MEINS_BASE")
                                WorkRowTaskLines.Item("ZQTAPK_ORI_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_ORI_CONS")
                                WorkRowTaskLines.Item("MEINS_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "MEINS_CONS")
                                WorkRowTaskLines.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_FULL_PALL")
                                WorkRowTaskLines.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_PARTIAL")
                                WorkRowTaskLines.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_SFUSI_PZ")


                                WorkRowTaskLines.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_BASE")
                                WorkRowTaskLines.Item("UDM_QTAPR_BASE") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "UDM_QTAPR_BASE")
                                WorkRowTaskLines.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_CONS")
                                WorkRowTaskLines.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "UDM_QTAPR_CONS")

                                WorkRowTaskLines.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PZ")
                                WorkRowTaskLines.Item("ZQTA_PREL_SC") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_SC")
                                WorkRowTaskLines.Item("ZQTA_PREL_PAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PAL")
                                WorkRowTaskLines.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_FULL")
                                WorkRowTaskLines.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PARTIA")
                                WorkRowTaskLines.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_SF")

                                WorkRowTaskLines.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZWMS_PESOMAT_EU")
                                WorkRowTaskLines.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "GEWEI_EU")
                                WorkRowTaskLines.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZWMS_PESOMAT_USA")
                                WorkRowTaskLines.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "GEWEI_USA")
                                WorkRowTaskLines.Item("USERID_RF") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "USERID_RF")


                                outDataTableTaskLines.Rows.Add(WorkRowTaskLines)

                            Next
                        End If

                    Next

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1135, "", " (GET_JOBGRP_LIST). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_GET_JOBS_LIST_QUEUE = RetCode
            Else
                Call_ZWMS_GET_JOBS_LIST_QUEUE = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_JOBS_SINGLE(ByVal inZnrWmsJobs As String, ByVal inNumeroConsegna As String, ByVal inPosizioneConsegna As String, ByVal inNumeroOrdPicking As String, ByVal inPosizioneOrdPicking As String, ByVal inGetTaskLines As Boolean, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outZwmsJobsRec As clsDataType.SapWmWmsJob, ByRef outDataTableTaskLiens As DataTable, ByRef outTaskLinesInfo As clsDataType.SapTaskLinesInfo, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkString As String
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim WorkRowTaskLines As DataRow
        Dim SingoloRec As New WS_GET_JOBS_SINGLE.ZwmsJobsInfo
        Dim objWS As New WS_GET_JOBS_SINGLE.ZWS_GET_JOBS_SINGLE
        Dim stImportParams As New WS_GET_JOBS_SINGLE.ZwmsGetJobsSingle
        Dim objWSResponse As New WS_GET_JOBS_SINGLE.ZwmsGetJobsSingleResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_JOBS_SINGLE = 1 'INIT AT ERROR

            outGetOk = False

            If (Not outDataTable Is Nothing) Then
                RetCode += clsUtility.InitDataTable(outDataTable)
            End If

            If (Len(inZnrWmsJobs) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1134, "", " JOBS_GROUP_LIST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inZnrWmsJobs
            stImportParams.IZnrpick = "0000000000"
            stImportParams.IZpospk = "0"
            stImportParams.IUdmLangConversion = "X"
            stImportParams.ISpras = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_jobs_single/" & SapClient & "/zws_get_jobs_single/zws_get_jobs_single"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsGetJobsSingle(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                SingoloRec = objWSResponse.EZwmsJobsInfoRec
                If (clsUtility.IsStringValid(SingoloRec.ZwmsJobs.ZnrWmsJobs, True) = True) Then

                    outZwmsJobsRec.NrWmsJobs = SingoloRec.ZwmsJobs.ZnrWmsJobs
                    outZwmsJobsRec.CodiceGruppoMissioni = SingoloRec.ZwmsJobs.ZnrWmsJobsgrp
                    outZwmsJobsRec.CodiceRaggruppoEsecuzione = SingoloRec.ZwmsJobs.ZnrWmsGrpexec
                    outZwmsJobsRec.IdWmsJobStatus = SingoloRec.ZwmsJobs.Idstatus
                    outZwmsJobsRec.IdWmsJobStatusDescription = SingoloRec.Status
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione = SingoloRec.ZwmsJobs.WerksOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.MagazzinoLogico = SingoloRec.ZwmsJobs.LgortOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.CodiceMateriale = SingoloRec.ZwmsJobs.MatnrOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.Partita = SingoloRec.ZwmsJobs.ChargOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.TipoStock = SingoloRec.ZwmsJobs.BestqOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.CdStockSpeciale = SingoloRec.ZwmsJobs.SobkzOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.NumeroStockSpeciale = SingoloRec.ZwmsJobs.SonumOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino = SingoloRec.ZwmsJobs.LgnumOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino = SingoloRec.ZwmsJobs.LgtypOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione = SingoloRec.ZwmsJobs.LgplaOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino = SingoloRec.ZwmsJobs.LenumOri

                    '>>> DATI QTA DA PRELEVARE E QTA PRELEVATE
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta = SingoloRec.ZwmsJobs.MeinsOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmOriginale = SingoloRec.ZwmsJobs.ZqtapkOri
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiestaInUdmPZ = SingoloRec.ZwmsJobs.MeinsPz
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmPZ = SingoloRec.ZwmsJobs.ZqtapkOriPz

                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmSC = SingoloRec.ZwmsJobs.ZqtapkOriSc
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmPL = SingoloRec.ZwmsJobs.ZqtapkOriPl
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaSfusiInPZ = SingoloRec.ZwmsJobs.ZqtapkOriPz

                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMBase = SingoloRec.ZwmsJobs.ZqtaPrelBase
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMBase = SingoloRec.ZwmsJobs.UdmQtaprMeins
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMConsegna = SingoloRec.ZwmsJobs.ZqtaPrelCons
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMConsegna = SingoloRec.ZwmsJobs.UdmQtaprCons
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.DescrizioneMateriale = SingoloRec.Maktg


                    '>>> DATI DESTINAZIONE
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione = SingoloRec.ZwmsJobs.WerksDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.MagazzinoLogico = SingoloRec.ZwmsJobs.LgortDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.CodiceMateriale = SingoloRec.ZwmsJobs.MatnrDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.Partita = SingoloRec.ZwmsJobs.ChargDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.TipoStock = SingoloRec.ZwmsJobs.BestqDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.CdStockSpeciale = SingoloRec.ZwmsJobs.SobkzDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.NumeroStockSpeciale = SingoloRec.ZwmsJobs.SonumDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino = SingoloRec.ZwmsJobs.LgnumDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino = SingoloRec.ZwmsJobs.LgtypDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione = SingoloRec.ZwmsJobs.LgplaDest
                    outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino = SingoloRec.ZwmsJobs.LenumDest

                    outZwmsJobsRec.Sequence = SingoloRec.ZwmsJobs.Sequence
                    outZwmsJobsRec.CurrentStep = SingoloRec.ZwmsJobs.CurrentStep
                    outZwmsJobsRec.NumeroStepTotali = SingoloRec.ZwmsJobs.NumStepsTotal
                    outZwmsJobsRec.DataCreazione = SingoloRec.ZwmsJobs.DataCreazione
                    outZwmsJobsRec.OraCreazione = SingoloRec.ZwmsJobs.OraCreazione
                    outZwmsJobsRec.PickDbNumero = SingoloRec.ZwmsJobs.Znrpick
                    outZwmsJobsRec.PickDbPosizione = SingoloRec.ZwmsJobs.Zpospk
                    outZwmsJobsRec.NumeroOrdineVendita = SingoloRec.ZwmsJobs.Vbeln
                    outZwmsJobsRec.NumeroPosizioneOrdineVendita = SingoloRec.ZwmsJobs.Posnr
                    outZwmsJobsRec.ConsegnaNumero = SingoloRec.ZwmsJobs.NumConsVbelv
                    outZwmsJobsRec.ConsegnaPosizione = SingoloRec.ZwmsJobs.PosConsPosnv
                    outZwmsJobsRec.IdWmsJobType = SingoloRec.ZwmsJobs.IdJobsType
                    outZwmsJobsRec.IdWmsJobTypeDescription = SingoloRec.ZwmsJobsType.DescrJobsType
                    outZwmsJobsRec.TipoDirezioneMissioneKZEAR = SingoloRec.ZwmsJobsType.Kzear
                    outZwmsJobsRec.Priorita = SingoloRec.ZwmsJobs.Priorita
                    outZwmsJobsRec.FlagRilevanteWM = SingoloRec.ZwmsJobs.Zflawm

                    WorkString = SingoloRec.ZwmsJobs.PalletInteri
                    If (WorkString = "X") Then
                        outZwmsJobsRec.FlagPalletInteri = True
                    Else
                        outZwmsJobsRec.FlagPalletInteri = False
                    End If
                    WorkString = SingoloRec.ZwmsJobs.ScatoleIntere
                    If (WorkString = "X") Then
                        outZwmsJobsRec.FlagScatoleIntere = True
                    Else
                        outZwmsJobsRec.FlagScatoleIntere = False
                    End If

                    outZwmsJobsRec.FlagPartitaTassativa = SingoloRec.ZwmsJobs.ChargTassativa
                    outZwmsJobsRec.IdCarrellistaProposto = SingoloRec.ZwmsJobs.ZcarrProp
                    outZwmsJobsRec.IdCarrellistaEsecuzione = SingoloRec.ZwmsJobs.ZcarrExec
                    outZwmsJobsRec.TipoDocumento = SingoloRec.ZwmsJobs.Zdoc
                    If (outZwmsJobsRec.TipoDocumento = clsSapUtility.cstSapTipoDocumentoReso) Then
                        outZwmsJobsRec.CondizioneDiReso = True
                    Else
                        outZwmsJobsRec.CondizioneDiReso = False
                    End If
                    outZwmsJobsRec.Memo = SingoloRec.ZwmsJobs.Memo
                    outZwmsJobsRec.DistintaDiCarico = SingoloRec.ZwmsJobs.ZzNdis
                    outZwmsJobsRec.InfoPrelievo = SingoloRec.ZwmsJobs.InfoPrelievo

                    '>>> GESTIONE VARIANTE IMBALLO
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.CodiceImballo = SingoloRec.VarianteImballo.Imballo
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.PezziPerScatola = SingoloRec.VarianteImballo.PzXSc
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.ScatolePerPallet = SingoloRec.VarianteImballo.ScXPal
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.M2PerPallet = SingoloRec.VarianteImballo.M2XPal

                    If (Not outDataTable Is Nothing) Then
                        WorkRow = outDataTable.NewRow()
                        WorkRow.Item("ZNR_WMS_JOBS") = SingoloRec.ZwmsJobs.ZnrWmsJobs
                        WorkRow.Item("ZNR_WMS_JOBSGRP") = SingoloRec.ZwmsJobs.ZnrWmsJobsgrp
                        WorkRow.Item("ZNR_WMS_GRPEXEC") = SingoloRec.ZwmsJobs.ZnrWmsGrpexec
                        WorkRow.Item("IDSTATUS") = SingoloRec.ZwmsJobs.Idstatus
                        WorkRow.Item("STATUS") = SingoloRec.Status
                        WorkRow.Item("STATUS_DESCR") = SingoloRec.StatusDescr
                        WorkRow.Item("MAKTG") = SingoloRec.Maktg
                        WorkRow.Item("WERKS_ORI") = SingoloRec.ZwmsJobs.WerksOri
                        WorkRow.Item("LGORT_ORI") = SingoloRec.ZwmsJobs.LgortOri
                        WorkRow.Item("MATNR_ORI") = SingoloRec.ZwmsJobs.MatnrOri
                        WorkRow.Item("CHARG_ORI") = SingoloRec.ZwmsJobs.ChargOri
                        WorkRow.Item("BESTQ_ORI") = SingoloRec.ZwmsJobs.BestqOri
                        WorkRow.Item("SOBKZ_ORI") = SingoloRec.ZwmsJobs.SobkzOri
                        WorkRow.Item("SONUM_ORI") = SingoloRec.ZwmsJobs.SonumOri
                        WorkRow.Item("LGNUM_ORI") = SingoloRec.ZwmsJobs.LgnumOri
                        WorkRow.Item("LGTYP_ORI") = SingoloRec.ZwmsJobs.LgtypOri
                        WorkRow.Item("LGPLA_ORI") = SingoloRec.ZwmsJobs.LgplaOri
                        WorkRow.Item("LENUM_ORI") = SingoloRec.ZwmsJobs.LenumOri
                        WorkRow.Item("MEINS_ORI") = SingoloRec.ZwmsJobs.MeinsOri
                        WorkRow.Item("ZQTAPK_ORI") = SingoloRec.ZwmsJobs.ZqtapkOri
                        WorkRow.Item("ZQTA_PREL_BASE") = SingoloRec.ZwmsJobs.ZqtaPrelBase
                        WorkRow.Item("UDM_QTAPR_MEINS") = SingoloRec.ZwmsJobs.UdmQtaprMeins
                        WorkRow.Item("ZQTA_PREL_CONS") = SingoloRec.ZwmsJobs.ZqtaPrelCons
                        WorkRow.Item("UDM_QTAPR_CONS") = SingoloRec.ZwmsJobs.UdmQtaprCons
                        WorkRow.Item("WERKS_DEST") = SingoloRec.ZwmsJobs.WerksDest
                        WorkRow.Item("LGORT_DEST") = SingoloRec.ZwmsJobs.LgortDest
                        WorkRow.Item("MATNR_DEST") = SingoloRec.ZwmsJobs.MatnrDest
                        WorkRow.Item("CHARG_DEST") = SingoloRec.ZwmsJobs.ChargDest
                        WorkRow.Item("BESTQ_DEST") = SingoloRec.ZwmsJobs.BestqDest
                        WorkRow.Item("SOBKZ_DEST") = SingoloRec.ZwmsJobs.SobkzDest
                        WorkRow.Item("SONUM_DEST") = SingoloRec.ZwmsJobs.SonumDest
                        WorkRow.Item("LGNUM_DEST") = SingoloRec.ZwmsJobs.LgnumDest
                        WorkRow.Item("LGTYP_DEST") = SingoloRec.ZwmsJobs.LgtypDest
                        WorkRow.Item("LGPLA_DEST") = SingoloRec.ZwmsJobs.LgplaDest
                        WorkRow.Item("LENUM_DEST") = SingoloRec.ZwmsJobs.LenumDest
                        WorkRow.Item("SEQUENCE") = SingoloRec.ZwmsJobs.Sequence
                        WorkRow.Item("CURRENT_STEP") = SingoloRec.ZwmsJobs.CurrentStep
                        WorkRow.Item("NUM_STEPS_TOTAL") = SingoloRec.ZwmsJobs.NumStepsTotal
                        WorkRow.Item("DATA_CREAZIONE") = SingoloRec.ZwmsJobs.DataCreazione
                        WorkRow.Item("ORA_CREAZIONE") = SingoloRec.ZwmsJobs.OraCreazione
                        WorkRow.Item("ZNRPICK") = SingoloRec.ZwmsJobs.Znrpick
                        WorkRow.Item("ZPOSPK") = SingoloRec.ZwmsJobs.Zpospk
                        WorkRow.Item("VBELN") = SingoloRec.ZwmsJobs.Vbeln
                        WorkRow.Item("POSNR") = SingoloRec.ZwmsJobs.Posnr
                        WorkRow.Item("NUM_CONS_VBELV") = SingoloRec.ZwmsJobs.NumConsVbelv
                        WorkRow.Item("POS_CONS_POSNV") = SingoloRec.ZwmsJobs.PosConsPosnv
                        WorkRow.Item("ID_JOBS_TYPE") = SingoloRec.ZwmsJobs.IdJobsType
                        WorkRow.Item("DESCR_JOBS_TYPE") = SingoloRec.ZwmsJobsType.DescrJobsType
                        WorkRow.Item("JOBS_TYPE_KZEAR") = SingoloRec.ZwmsJobsType.Kzear
                        WorkRow.Item("PRIORITA") = SingoloRec.ZwmsJobs.Priorita
                        WorkRow.Item("URGENTE") = SingoloRec.ZwmsJobs.Urgente
                        WorkRow.Item("ZFLAWM") = SingoloRec.ZwmsJobs.Zflawm
                        WorkRow.Item("PALLET_INTERI") = SingoloRec.ZwmsJobs.PalletInteri
                        WorkRow.Item("SCATOLE_INTERE") = SingoloRec.ZwmsJobs.ScatoleIntere
                        WorkRow.Item("CHARG_TASSATIVA") = SingoloRec.ZwmsJobs.ChargTassativa
                        WorkRow.Item("ZCARR_PROP") = SingoloRec.ZwmsJobs.ZcarrProp
                        WorkRow.Item("ZCARR_EXEC") = SingoloRec.ZwmsJobs.ZcarrExec
                        WorkRow.Item("ZDOC") = SingoloRec.ZwmsJobs.Zdoc
                        WorkRow.Item("MEMO") = SingoloRec.ZwmsJobs.Memo
                        WorkRow.Item("ZZ_NDIS") = SingoloRec.ZwmsJobs.ZzNdis
                        WorkRow.Item("INFO_PRELIEVO") = SingoloRec.ZwmsJobs.InfoPrelievo
                        WorkRow.Item("IMBALLO") = SingoloRec.VarianteImballo.Imballo
                        WorkRow.Item("PZ_X_SC") = SingoloRec.VarianteImballo.PzXSc
                        WorkRow.Item("SC_X_PAL") = SingoloRec.VarianteImballo.ScXPal
                        WorkRow.Item("M2_X_PAL") = SingoloRec.VarianteImballo.M2XPal

                        '*********************************************************************************************
                        '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                        '*********************************************************************************************
                        If (SingoloRec.ZwmsJobs.Idstatus >= clsWmsJob.cstIdJobStatus_Verificato) Then
                            WorkRow.Item("GRID_EXECUTED") = "*"
                        ElseIf (SingoloRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Cancellato) Then
                            WorkRow.Item("GRID_EXECUTED") = "D"
                        ElseIf (SingoloRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Sospeso) Then
                            WorkRow.Item("GRID_EXECUTED") = "S"
                        ElseIf (clsWmsJob.IsLastStepJobDecori(WorkRow, False) = True) Then
                            WorkRow.Item("GRID_EXECUTED") = "/"
                        Else
                            WorkRow.Item("GRID_EXECUTED") = ""
                        End If
                        '*********************************************************************************************
                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                    End If
                End If
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_JOBS_SINGLE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inZnrWmsJobs)
            rfcFunction.SetValue("I_ZNRPICK", "0000000000")
            rfcFunction.SetValue("I_ZPOSPK", "0")
            rfcFunction.SetValue("I_UDM_LANG_CONVERSION", "X")
            rfcFunction.SetValue("I_SPRAS", inLingua)
            If (inGetTaskLines = True) Then
                rfcFunction.SetValue("I_GET_TASK_LINES", "X")
            Else
                rfcFunction.SetValue("I_GET_TASK_LINES", " ")
            End If

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_FOUNDROWS") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK


                rfcRow = rfcFunction.GetStructure("E_ZWMS_JOBS_INFO_REC")

                'Dim Out_rfcTable_ZWMS_JOBS As IRfcStructure = rfcRow.GetStructure("ZWMS_JOBS")
                ''Dim Out_rfcTable_ZWMS_JOBS_TYPE As IRfcStructure = rfcRow.GetStructure("ZWMS_JOBS_TYPE")
                ''Dim VarianteImballo As IRfcStructure = rfcRow.GetStructure("VARIANTE_IMBALLO")
                ''Dim Out_rfcStruct_ZWMS_JOBS_INFO As IRfcStructure = rfcRow.GetStructure("ZWMS_JOBS_REC")
                ''Dim Out_rfcStruct_ZWMS_JOBS As IRfcStructure = rfcRow.GetStructure("ZWMS_JOBS")
                'Dim Out_rfcStruct_ZWMS_JOBS_TYPE As IRfcStructure = rfcRow.GetStructure("ZWMS_JOBS_TYPE")
                'Dim Out_rfcStruct_VARIANTE_IMBALLO As IRfcStructure = rfcRow.GetStructure("VARIANTE_IMBALLO")
                'Dim Out_rfcTable_ZWMS_TASK_LINES_TAB As IRfcTable = rfcTable.GetTable("ZWMS_TASK_LINES_TAB")
                'Dim Out_rfcStruct_ZWMS_TASK_LINES_INFO As IRfcStructure = rfcTable.GetStructure("ZWMS_TASK_LINES_INFO")


                Dim Out_rfcStruct_ZWMS_JOBS_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_INFO_REC")
                Dim Out_rfcStruct_ZWMS_JOBS As IRfcStructure = rfcRow.GetStructure("ZWMS_JOBS")
                Dim Out_rfcStruct_ZWMS_JOBS_TYPE As IRfcStructure = rfcRow.GetStructure("ZWMS_JOBS_TYPE")
                Dim Out_rfcStruct_VARIANTE_IMBALLO As IRfcStructure = rfcRow.GetStructure("VARIANTE_IMBALLO")
                Dim Out_rfcTable_ZWMS_TASK_LINES_TAB As IRfcTable = rfcFunction.GetTable("E_ZWMS_TASK_LINES_TAB")
                Dim Out_rfcStruct_ZWMS_TASK_LINES_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_TASK_LINES_INFO")

                '???? vecchia parte
                'outZwmsJobsRec.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBS")
                outZwmsJobsRec.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBS", 0)
                outZwmsJobsRec.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBSGRP")
                outZwmsJobsRec.CodiceRaggruppoEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_GRPEXEC")
                outZwmsJobsRec.IdWmsJobStatus = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS")
                outZwmsJobsRec.IdWmsJobStatusDescription = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "STATUS")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_ORI")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lgort_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Matnr_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Charg_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Bestq_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Sobkz_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Sonum_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lgnum_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lgtyp_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lgpla_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lenum_Ori")


                '>>> DATI QTA DA PRELEVARE E QTA PRELEVATE
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Meins_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmOriginale = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "Zqtapk_Ori")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UnitaDiMisuraPezzo = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Meins_Pz")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmPZ = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "Zqtapk_Ori_Pz")

                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmSC = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "Zqtapk_Ori_Sc")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmPL = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "Zqtapk_Ori_Pl")

                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaFullPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_FULL_PALL")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaPartialPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_PARTIAL")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaSfusiInPZ = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "Zqtapk_Ori_Pz")

                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "Zqta_Prel_Base")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Udm_Qtapr_Meins")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "Zqta_Prel_Cons")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Udm_Qtapr_Cons")

                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataFullPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_FULL")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataPartialPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PARTIA")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataSfusi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_SF")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMPezzo = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PZ")

                outZwmsJobsRec.MaterialeGiacenzaOrigine.DescrizioneMateriale = SingoloRec.Maktg

                '>>> DATI DESTINAZIONE
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Werks_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lgort_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Matnr_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Charg_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Bestq_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Sobkz_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Sonum_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lgnum_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lgtyp_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lgpla_Dest")
                outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Lenum_Dest")

                outZwmsJobsRec.Sequence = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "Sequence")
                outZwmsJobsRec.CurrentStep = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "Current_Step")
                outZwmsJobsRec.NumeroStepTotali = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "Num_Steps_Total")
                outZwmsJobsRec.DataCreazione = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Data_Creazione")
                outZwmsJobsRec.OraCreazione = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Ora_Creazione")
                outZwmsJobsRec.PickDbNumero = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Znrpick")
                outZwmsJobsRec.PickDbPosizione = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "Zpospk")
                outZwmsJobsRec.NumeroOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Vbeln")
                outZwmsJobsRec.NumeroPosizioneOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Posnr")
                outZwmsJobsRec.ConsegnaNumero = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Num_Cons_Vbelv")
                outZwmsJobsRec.ConsegnaPosizione = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "Pos_Cons_Posnv")
                outZwmsJobsRec.IdWmsJobType = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Id_Jobs_Type")

                outZwmsJobsRec.IdWmsJobTypeDescription = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Descr_Jobs_Type")
                outZwmsJobsRec.TipoDirezioneMissioneKZEAR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Kzear")

                outZwmsJobsRec.Priorita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Priorita")
                outZwmsJobsRec.FlagRilevanteWM = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Zflawm")

                WorkString = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "PalletInteri")
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagPalletInteri = True
                Else
                    outZwmsJobsRec.FlagPalletInteri = False
                End If
                WorkString = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ScatoleIntere")
                If (WorkString = "X") Then
                    outZwmsJobsRec.FlagScatoleIntere = True
                Else
                    outZwmsJobsRec.FlagScatoleIntere = False
                End If

                outZwmsJobsRec.FlagPartitaTassativa = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ChargTassativa")
                outZwmsJobsRec.IdCarrellistaProposto = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZcarrProp")
                outZwmsJobsRec.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZcarrExec")
                outZwmsJobsRec.TipoDocumento = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Zdoc")

                If (outZwmsJobsRec.TipoDocumento = clsSapUtility.cstSapTipoDocumentoReso) Then
                    outZwmsJobsRec.CondizioneDiReso = True
                Else
                    outZwmsJobsRec.CondizioneDiReso = False
                End If

                outZwmsJobsRec.Memo = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Memo")
                outZwmsJobsRec.DistintaDiCarico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZzNdis")
                outZwmsJobsRec.InfoPrelievo = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Info_Prelievo")

                '>>> GESTIONE VARIANTE IMBALLO
                outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.CodiceImballo = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "Imballo")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.PezziPerScatola = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "Pz_X_Sc")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.ScatolePerPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "Sc_X_Pal")
                outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.M2PerPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "M2_X_Pal")


                '...
                If (Not outDataTable Is Nothing) Then

                    WorkRow = outDataTable.NewRow()

                    '>>> IMPOSTO OGGETTI RFC PER OTTENERE DATI DELLA STRUTTURA
                    WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBS")
                    WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBSGRP")
                    WorkRow.Item("ZNR_WMS_GRPEXEC") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_GRPEXEC")
                    WorkRow.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS")

                    WorkRow.Item("STATUS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "STATUS")
                    WorkRow.Item("STATUS_DESCR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "STATUS_DESCR")
                    WorkRow.Item("TKNUM") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "TKNUM")
                    WorkRow.Item("MAKTG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "MAKTG")

                    WorkRow.Item("WERKS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_ORI")
                    WorkRow.Item("LGORT_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_ORI")
                    WorkRow.Item("MATNR_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_ORI")
                    WorkRow.Item("CHARG_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_ORI")
                    WorkRow.Item("BESTQ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_ORI")
                    WorkRow.Item("SOBKZ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_ORI")
                    WorkRow.Item("SONUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_ORI")
                    WorkRow.Item("LGNUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_ORI")
                    WorkRow.Item("LGTYP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_ORI")
                    WorkRow.Item("LGPLA_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_ORI")
                    WorkRow.Item("LENUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_ORI")
                    WorkRow.Item("MEINS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_ORI")
                    WorkRow.Item("ZQTAPK_ORI") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI")
                    WorkRow.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_PZ")
                    WorkRow.Item("MEINS_SC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_SC")
                    WorkRow.Item("MEINS_PAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_PAL")

                    WorkRow.Item("ZQTAPK_ORI_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_BASE")
                    WorkRow.Item("ZQTAPK_ORI_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_CONS")
                    WorkRow.Item("ZQTAPK_ORI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PZ")
                    WorkRow.Item("ZQTAPK_ORI_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_SC")
                    WorkRow.Item("ZQTAPK_ORI_PL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PL")
                    WorkRow.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_FULL_PALL")
                    WorkRow.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_PARTIAL")
                    WorkRow.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_SFUSI_PZ")

                    WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_BASE")
                    WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_MEINS")
                    WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_CONS")
                    WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_CONS")
                    WorkRow.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_FULL")
                    WorkRow.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PARTIA")
                    WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PZ")

                    WorkRow.Item("WERKS_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_DEST")
                    WorkRow.Item("LGORT_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_DEST")
                    WorkRow.Item("MATNR_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_DEST")
                    WorkRow.Item("CHARG_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_DEST")
                    WorkRow.Item("BESTQ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_DEST")
                    WorkRow.Item("SOBKZ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_DEST")
                    WorkRow.Item("SONUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_DEST")
                    WorkRow.Item("LGNUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_DEST")
                    WorkRow.Item("LGTYP_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_DEST")
                    WorkRow.Item("LGPLA_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_DEST")
                    WorkRow.Item("LENUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_DEST")
                    WorkRow.Item("ZPICKFULLPARTIAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZPICKFULLPARTIAL")
                    WorkRow.Item("SEQUENCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SEQUENCE")
                    WorkRow.Item("CURRENT_STEP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CURRENT_STEP")
                    WorkRow.Item("NUM_STEPS_TOTAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "NUM_STEPS_TOTAL")
                    WorkRow.Item("DATA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString
                    WorkRow.Item("ORA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString
                    WorkRow.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNRPICK")
                    WorkRow.Item("ZPOSPK") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZPOSPK")
                    WorkRow.Item("VBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "VBELN")
                    WorkRow.Item("POSNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "POSNR")

                    WorkRow.Item("NUM_CONS_VBELV") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "NUM_CONS_VBELV")
                    WorkRow.Item("POS_CONS_POSNV") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "POS_CONS_POSNV")

                    WorkRow.Item("ZWMS_STOP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_STOP_SEQ")
                    WorkRow.Item("ZWMS_DROP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_DROP_SEQ")
                    WorkRow.Item("EBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "EBELN")
                    WorkRow.Item("EBELP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "EBELP")

                    WorkRow.Item("KUNNR_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_AG")
                    WorkRow.Item("KUNNR_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_WE")
                    WorkRow.Item("KUNNR_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_RG")

                    '>>> DESCRIZIONI CLIENTI ( STRUTTURA AD UN LIVELLO DIVERSO )
                    WorkRow.Item("NAME_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_AG")
                    WorkRow.Item("NAME_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_WE")
                    WorkRow.Item("NAME_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_RG")


                    WorkRow.Item("ID_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ID_JOBS_TYPE")
                    WorkRow.Item("DESCR_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_TYPE, "DESCR_JOBS_TYPE")
                    WorkRow.Item("JOBS_TYPE_KZEAR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_TYPE, "KZEAR")
                    WorkRow.Item("PRIORITA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "PRIORITA")
                    WorkRow.Item("URGENTE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "URGENTE")
                    WorkRow.Item("ZFLAWM") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFLAWM")
                    WorkRow.Item("PALLET_INTERI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "PALLET_INTERI")
                    WorkRow.Item("SCATOLE_INTERE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SCATOLE_INTERE")
                    WorkRow.Item("ZTIPO_ENTMERCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZTIPO_ENTMERCE")
                    WorkRow.Item("ZFORCEDDEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCEDDEST")
                    WorkRow.Item("ZFORCSPUNTACONF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCSPUNTACONF")
                    WorkRow.Item("CHARG_TASSATIVA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_TASSATIVA")
                    WorkRow.Item("LGNUM_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_STAG_DOOR")
                    WorkRow.Item("LGTYP_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_STAG_DOOR")
                    WorkRow.Item("LGPLA_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_STAG_DOOR")
                    WorkRow.Item("LGNUM_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_DOOCK_DOOR")
                    WorkRow.Item("LGTYP_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_DOOCK_DOOR")
                    WorkRow.Item("LGPLA_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_DOOCK_DOOR")
                    WorkRow.Item("ZCARR_PROP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_PROP")

                    WorkRow.Item("ZCARR_EXEC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC")
                    WorkRow.Item("ZCARR_EXEC_FL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC_FL")
                    WorkRow.Item("ZCARR_EXEC_SF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC_SF")

                    WorkRow.Item("LGNUM_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_PROP_ORI")
                    WorkRow.Item("LGTYP_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_PROP_ORI")
                    WorkRow.Item("LGPLA_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_PROP_ORI")
                    WorkRow.Item("LENUM_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_PROP_ORI")
                    WorkRow.Item("OK_QTA_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "OK_QTA_PROP_ORI")

                    WorkRow.Item("LGNUM_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_PROP_ORIFL")
                    WorkRow.Item("LGTYP_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_PROP_ORIFL")
                    WorkRow.Item("LGPLA_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_PROP_ORIFL")
                    WorkRow.Item("LENUM_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_PROP_ORIFL")
                    WorkRow.Item("OK_QTA_PROPORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "OK_QTA_PROPORIFL")

                    WorkRow.Item("ZDOC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZDOC")
                    WorkRow.Item("MEMO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEMO")
                    WorkRow.Item("ZZ_NDIS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZZ_NDIS")
                    WorkRow.Item("INFO_PRELIEVO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "INFO_PRELIEVO")
                    WorkRow.Item("IMBALLO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "IMBALLO")
                    WorkRow.Item("PZ_X_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "PZ_X_SC")
                    WorkRow.Item("SC_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "SC_X_PAL")
                    WorkRow.Item("M2_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "M2_X_PAL")

                    '****************************************************************************
                    '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                    '****************************************************************************
                    Dim QtaDaPrelevareInUdmBase As Double = 0
                    Dim QtaPrelevataInUdmBase As Double = 0
                    Dim RowIDSTATUS As String = ""
                    Dim TaskLinesStatus As String = ""
                    Dim TaskNotFinish As Boolean = False
                    QtaDaPrelevareInUdmBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_BASE")
                    QtaPrelevataInUdmBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_BASE")
                    RowIDSTATUS = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS")
                    If ((RowIDSTATUS >= clsWmsJob.cstIdJobStatus_Verificato) Or (QtaPrelevataInUdmBase >= QtaDaPrelevareInUdmBase)) Then
                        WorkRow.Item("GRID_EXECUTED") = "*"
                    ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Cancellato) Then
                        WorkRow.Item("GRID_EXECUTED") = "D"
                    ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Sospeso) Then
                        WorkRow.Item("GRID_EXECUTED") = "S"
                    ElseIf (clsWmsJob.IsLastStepJobDecori(WorkRow, False) = True) Then
                        WorkRow.Item("GRID_EXECUTED") = "/"
                    ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Iniziato) Then
                        '>>> CASO NORMALE
                        WorkRow.Item("GRID_EXECUTED") = "W" 'IN LAVORAZIONE

                        If (Out_rfcTable_ZWMS_TASK_LINES_TAB.RowCount > 0) Then
                            TaskNotFinish = False
                            For Each rfcRowTaskLines In Out_rfcTable_ZWMS_TASK_LINES_TAB
                                TaskLinesStatus = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "IDSTATUS")
                                If (Val(TaskLinesStatus) < clsWmsJob.cstIdJobStatus_Terminato) Then
                                    TaskNotFinish = True
                                End If
                            Next
                            '>>> CASO PARTICOLARE PER GESTIRE IL TERMINE MISSIONE NEI PRELIEVI MULTIPLI CON PIU' DI 10 PALLET
                            If (TaskNotFinish = True) Then
                                WorkRow.Item("GRID_EXECUTED") = "W" 'IN LAVORAZIONE
                            Else
                                WorkRow.Item("GRID_EXECUTED") = "*" 'IN LAVORAZIONE
                            End If
                        End If
                    Else
                        WorkRow.Item("GRID_EXECUTED") = ""
                    End If
                    outDataTable.Rows.Add(WorkRow)


                    'RITORNO LE INFO PRINCIPALI DELLE TASK LINES
                    outTaskLinesInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZNR_WMS_JOBS")
                    outTaskLinesInfo.TotalTaskLines = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES")
                    outTaskLinesInfo.TotalTaskLinesFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_FULL")
                    outTaskLinesInfo.TotalTaskLinesPartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_PARTIAL")
                    outTaskLinesInfo.TotalTaskLinesDone = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE")
                    outTaskLinesInfo.TotalTaskLinesDoneFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE_FL")
                    outTaskLinesInfo.TotalTaskLinesDonePartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE_PAR")
                    outTaskLinesInfo.TotalTaskLineOpen = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN")
                    outTaskLinesInfo.TotalTaskLinesOpenFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN_FL")
                    outTaskLinesInfo.TotalTaskLinesOpenPartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN_PAR")

                    ' Dim Out_rfcStruct_ZWMS_TASK_LINES As IRfcStructure = rfcTable.GetStructure("ZWMS_TASK_LINES_TAB").c

                    'RITORNO LE TASK LINES SE VALORIZZATE
                    If (Out_rfcTable_ZWMS_TASK_LINES_TAB.RowCount > 0) Then

                        For Each rfcRowTaskLines In Out_rfcTable_ZWMS_TASK_LINES_TAB
                            WorkRowTaskLines = outDataTableTaskLiens.NewRow()

                            WorkRowTaskLines.Item("ZNR_TASK_LINES") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZNR_TASK_LINES")

                            WorkRowTaskLines.Item("DATA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString
                            WorkRowTaskLines.Item("ORA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString

                            WorkRowTaskLines.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZNR_WMS_JOBS")
                            WorkRowTaskLines.Item("ZTASK_LINES_SEQ") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZTASK_LINES_SEQ")
                            WorkRowTaskLines.Item("ZPICKFULLPARTIAL") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZPICKFULLPARTIAL")
                            WorkRowTaskLines.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "IDSTATUS")
                            WorkRowTaskLines.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "MEINS_PZ")

                            WorkRowTaskLines.Item("ZQTAPK_ORI_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_ORI_BASE")
                            WorkRowTaskLines.Item("MEINS_BASE") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "MEINS_BASE")
                            WorkRowTaskLines.Item("ZQTAPK_ORI_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_ORI_CONS")
                            WorkRowTaskLines.Item("MEINS_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "MEINS_CONS")
                            WorkRowTaskLines.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_FULL_PALL")
                            WorkRowTaskLines.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_PARTIAL")
                            WorkRowTaskLines.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_SFUSI_PZ")


                            WorkRowTaskLines.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_BASE")
                            WorkRowTaskLines.Item("UDM_QTAPR_BASE") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "UDM_QTAPR_BASE")
                            WorkRowTaskLines.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_CONS")
                            WorkRowTaskLines.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "UDM_QTAPR_CONS")

                            WorkRowTaskLines.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PZ")
                            WorkRowTaskLines.Item("ZQTA_PREL_SC") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_SC")
                            WorkRowTaskLines.Item("ZQTA_PREL_PAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PAL")
                            WorkRowTaskLines.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_FULL")
                            WorkRowTaskLines.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PARTIA")
                            WorkRowTaskLines.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_SF")

                            WorkRowTaskLines.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZWMS_PESOMAT_EU")
                            WorkRowTaskLines.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "GEWEI_EU")
                            WorkRowTaskLines.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZWMS_PESOMAT_USA")
                            WorkRowTaskLines.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "GEWEI_USA")
                            WorkRowTaskLines.Item("USERID_RF") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "USERID_RF")

                            outDataTableTaskLiens.Rows.Add(WorkRowTaskLines)
                        Next
                    End If



                    ''VECCHIA PARTE
                    'WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_JOBS")
                    'WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_JOBSGRP")
                    'WorkRow.Item("ZNR_WMS_GRPEXEC") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_GRPEXEC")
                    'WorkRow.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "IDSTATUS")
                    'WorkRow.Item("STATUS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "STATUS")
                    'WorkRow.Item("STATUS_DESCR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "STATUS_DESCR")
                    'WorkRow.Item("MAKTG") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Maktg")
                    'WorkRow.Item("WERKS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "WERKS_ORI")
                    'WorkRow.Item("LGORT_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgort_Ori")
                    'WorkRow.Item("MATNR_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Matnr_Ori")
                    'WorkRow.Item("CHARG_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Charg_Ori")
                    'WorkRow.Item("BESTQ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Bestq_Ori")
                    'WorkRow.Item("SOBKZ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sobkz_Ori")
                    'WorkRow.Item("SONUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sonum_Ori")
                    'WorkRow.Item("LGNUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgnum_Ori")
                    'WorkRow.Item("LGTYP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgtyp_Ori")
                    'WorkRow.Item("LGPLA_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgpla_Ori")
                    'WorkRow.Item("LENUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lenum_Ori")
                    'WorkRow.Item("MEINS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Meins_Ori")
                    'WorkRow.Item("ZQTAPK_ORI") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "Zqtapk_Ori")
                    'WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "Zqta_Prel_Base")
                    'WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Udm_Qtapr_Meins")
                    'WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "Zqta_Prel_Cons")
                    'WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Udm_Qtapr_Cons")
                    'WorkRow.Item("WERKS_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Werks_Dest")
                    'WorkRow.Item("LGORT_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgort_Dest")
                    'WorkRow.Item("MATNR_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Matnr_Dest")
                    'WorkRow.Item("CHARG_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Charg_Dest")
                    'WorkRow.Item("BESTQ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Bestq_Dest")
                    'WorkRow.Item("SOBKZ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sobkz_Dest")
                    'WorkRow.Item("SONUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sonum_Dest")
                    'WorkRow.Item("LGNUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgnum_Dest")
                    'WorkRow.Item("LGTYP_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgtyp_Dest")
                    'WorkRow.Item("LGPLA_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgpla_Dest")
                    'WorkRow.Item("LENUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lenum_Dest")
                    'WorkRow.Item("SEQUENCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sequence")
                    'WorkRow.Item("CURRENT_STEP") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Current_Step")
                    'WorkRow.Item("NUM_STEPS_TOTAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Num_Steps_Total")
                    'WorkRow.Item("DATA_CREAZIONE") = Out_rfcTable_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Data_Creazione")
                    'WorkRow.Item("ORA_CREAZIONE") = Out_rfcTable_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Ora_Creazione")
                    'WorkRow.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Znrpick")
                    'WorkRow.Item("ZPOSPK") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zpospk")
                    'WorkRow.Item("VBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Vbeln")
                    'WorkRow.Item("POSNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Posnr")
                    'WorkRow.Item("NUM_CONS_VBELV") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Num_Cons_Vbelv")
                    'WorkRow.Item("POS_CONS_POSNV") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Pos_Cons_Posnv")
                    'WorkRow.Item("ID_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Id_Jobs_Type")
                    'WorkRow.Item("DESCR_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Descr_Jobs_Type")
                    'WorkRow.Item("JOBS_TYPE_KZEAR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Kzear")
                    'WorkRow.Item("PRIORITA") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Priorita")
                    'WorkRow.Item("URGENTE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Urgente")
                    'WorkRow.Item("ZFLAWM") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zflawm")
                    'WorkRow.Item("PALLET_INTERI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Pallet_Interi")
                    'WorkRow.Item("SCATOLE_INTERE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Scatole_Intere")
                    'WorkRow.Item("CHARG_TASSATIVA") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Charg_Tassativa")
                    'WorkRow.Item("ZCARR_PROP") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zcarr_Prop")
                    'WorkRow.Item("ZCARR_EXEC") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zcarr_Exec")
                    'WorkRow.Item("ZDOC") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zdoc")
                    'WorkRow.Item("MEMO") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Memo")
                    'WorkRow.Item("ZZ_NDIS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zz_Ndis")
                    'WorkRow.Item("INFO_PRELIEVO") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Info_Prelievo")
                    'WorkRow.Item("IMBALLO") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Imballo")
                    'WorkRow.Item("PZ_X_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "Pz_X_Sc")
                    'WorkRow.Item("SC_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "Sc_X_Pal")
                    'WorkRow.Item("M2_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "M2_X_Pal")

                    ''*********************************************************************************************
                    ''>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                    ''*********************************************************************************************
                    'If (clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "IDSTATUS") >= clsWmsJob.cstIdJobStatus_Verificato) Then
                    '    WorkRow.Item("GRID_EXECUTED") = "*"
                    'ElseIf (clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "IDSTATUS") = clsWmsJob.cstIdJobStatus_Cancellato) Then
                    '    WorkRow.Item("GRID_EXECUTED") = "D"
                    'ElseIf (clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "IDSTATUS") = clsWmsJob.cstIdJobStatus_Sospeso) Then
                    '    WorkRow.Item("GRID_EXECUTED") = "S"
                    'ElseIf (clsWmsJob.IsLastStepJobDecori(WorkRow, False) = True) Then
                    '    WorkRow.Item("GRID_EXECUTED") = "/"
                    'Else
                    '    WorkRow.Item("GRID_EXECUTED") = ""
                    'End If
                    ''*********************************************************************************************

                    'outDataTable.Rows.Add(WorkRow)

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1139, "", " (GET_JOB_SINGLE). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_JOBS_SINGLE = RetCode
            Else
                Call_ZWS_GET_JOBS_SINGLE = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_JOBS_GROUP_LIST(ByVal inDivisione As String, ByVal inNumeroMagazzino As String, ByVal inJobTypeFamily As String, ByVal inCarrellistaProposto As String, ByVal inCarrellistaEsecuzione As String, ByVal inUserId As String, ByVal inShowOnlyActive As Boolean, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New WS_GET_JOBS_GROUP_LIST.ZwmsJobsGroupInfo

        Dim objWS As New WS_GET_JOBS_GROUP_LIST.ZWS_GET_JOBS_GROUP_LIST
        Dim stImportParams As New WS_GET_JOBS_GROUP_LIST.ZwmsGetJobsGroupList
        Dim objWSResponse As New WS_GET_JOBS_GROUP_LIST.ZwmsGetJobsGroupListResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_JOBS_GROUP_LIST = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inNumeroMagazzino) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1134, "", " JOBS_GROUP_LIST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IJobsTypeFamily = inJobTypeFamily '>>> "PICKING" o "ENTRATA_MERCE"
            stImportParams.IZwmsJobsFilter = New WS_GET_JOBS_GROUP_LIST.ZwmsJobs
            stImportParams.IZwmsJobsFilter.LgnumOri = inNumeroMagazzino
            stImportParams.IZwmsJobsFilter.WerksOri = inDivisione
            stImportParams.IZwmsJobsFilter.ZcarrProp = inCarrellistaProposto
            stImportParams.IZwmsJobsFilter.ZcarrExec = inCarrellistaEsecuzione
            stImportParams.IZwmsJobsFilter.OraCreazione = "00:00:00"
            stImportParams.IZwmsJobsFilter.OraFine = "00:00:00"
            stImportParams.IZwmsJobsFilter.OraStart = "00:00:00"

            'SETTO I FILTRI CHE POSSONO ESSERE IMPOSTATI DALL'OPERATORE
            stImportParams.IZwmsJobsFilter.MatnrOri = clsWmsJobsGroup.UserFilterGetList.CodiceMateriale
            stImportParams.IZwmsJobsFilter.ChargOri = clsWmsJobsGroup.UserFilterGetList.Partita
            stImportParams.IZwmsJobsFilter.LgtypOri = clsWmsJobsGroup.UserFilterGetList.UbicazioneInfo.TipoMagazzino
            stImportParams.ISku = clsWmsJobsGroup.UserFilterGetList.SKU

            If (inShowOnlyActive = True) Then
                stImportParams.IShowOnlyActive = "X"
            Else
                stImportParams.IShowOnlyActive = " "
            End If
            stImportParams.IUserid = inUserId
            stImportParams.ISpras = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_jobs_group_list/" & SapClient & "/zws_get_jobs_group_list/zws_get_jobs_group_list"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsGetJobsGroupList(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.EZwmsJobsGroupTab.Length > 0) Then
                    For Index = 0 To objWSResponse.EZwmsJobsGroupTab.Length - 1
                        SingoloRec = objWSResponse.EZwmsJobsGroupTab(Index)
                        If (clsUtility.IsStringValid(SingoloRec.ZnrWmsJobsgrp, True) = True) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("NUM_ACCORPAMENTI") = SingoloRec.NumAccorpamenti
                            WorkRow.Item("ZNR_WMS_JOBSGRP") = SingoloRec.ZnrWmsJobsgrp
                            WorkRow.Item("ZNRPICK") = SingoloRec.Znrpick
                            WorkRow.Item("ZWMS_JOBSGRP_DESCR") = SingoloRec.ZwmsJobsgrpDescr
                            WorkRow.Item("ZDOC") = SingoloRec.Zdoc
                            WorkRow.Item("NUM_DOC") = SingoloRec.NumDoc
                            WorkRow.Item("RIF_ODA_BSTKD") = SingoloRec.RifOdaBstkd
                            WorkRow.Item("RIF_ODV_IHREZ") = SingoloRec.RifOdvIhrez
                            WorkRow.Item("WERKS_DEST") = SingoloRec.WerksDest
                            WorkRow.Item("LGORT_DEST") = SingoloRec.LgortDest
                            WorkRow.Item("ZCARR_PROP") = SingoloRec.ZcarrProp
                            WorkRow.Item("ZCARR_EXEC") = SingoloRec.ZcarrExec
                            WorkRow.Item("TOT_NUM_SCATOLE") = SingoloRec.TotNumScatole
                            WorkRow.Item("TOT_NUM_M2") = SingoloRec.TotNumM2
                            WorkRow.Item("TOT_NUM_PZ") = SingoloRec.TotNumPz
                            WorkRow.Item("TOT_NUM_OTHERS") = SingoloRec.TotNumOthers
                            WorkRow.Item("PARTNER_AG_KUNNR") = SingoloRec.PartnerAg.Kunnr
                            WorkRow.Item("PARTNER_AG_NAME1") = SingoloRec.PartnerAg.Name1
                            WorkRow.Item("PARTNER_AG_NAME2") = SingoloRec.PartnerAg.Name2
                            WorkRow.Item("PARTNER_AG_ORT01") = SingoloRec.PartnerAg.Ort01
                            WorkRow.Item("PARTNER_AG_PSTLZ") = SingoloRec.PartnerAg.Pstlz
                            WorkRow.Item("PARTNER_AG_REGIO") = SingoloRec.PartnerAg.Regio
                            WorkRow.Item("PARTNER_AG_STRAS") = SingoloRec.PartnerAg.Stras
                            WorkRow.Item("PARTNER_WE_KUNNR") = SingoloRec.PartnerWe.Kunnr
                            WorkRow.Item("PARTNER_WE_NAME1") = SingoloRec.PartnerWe.Name1
                            WorkRow.Item("PARTNER_WE_NAME2") = SingoloRec.PartnerWe.Name2
                            WorkRow.Item("PARTNER_WE_ORT01") = SingoloRec.PartnerWe.Ort01
                            WorkRow.Item("PARTNER_WE_PSTLZ") = SingoloRec.PartnerWe.Pstlz
                            WorkRow.Item("PARTNER_WE_REGIO") = SingoloRec.PartnerWe.Regio
                            WorkRow.Item("PARTNER_WE_STRAS") = SingoloRec.PartnerWe.Stras
                            WorkRow.Item("FORNITORE_LIFNR") = SingoloRec.Fornitore.Lifnr
                            WorkRow.Item("FORNITORE_NAME1") = SingoloRec.Fornitore.Name1
                            WorkRow.Item("FORNITORE_NAME2") = SingoloRec.Fornitore.Name2
                            WorkRow.Item("FORNITORE_ORT01") = SingoloRec.Fornitore.Ort01
                            WorkRow.Item("FORNITORE_PSTLZ") = SingoloRec.Fornitore.Pstlz
                            WorkRow.Item("FORNITORE_REGIO") = SingoloRec.Fornitore.Regio
                            WorkRow.Item("FORNITORE_STRAS") = SingoloRec.Fornitore.Stras

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_JOBS_GROUP_LIST")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_JOBS_TYPE_FAMILY", inJobTypeFamily) '>>> "PICKING" o "ENTRATA_MERCE"

            ' fill the table parameter
            Dim In_rfcTable As IRfcStructure = rfcFunction.GetStructure("I_ZWMS_JOBS_FILTER")

            In_rfcTable.SetValue("LGNUM_ORI", inNumeroMagazzino)
            In_rfcTable.SetValue("WERKS_ORI", inDivisione)
            In_rfcTable.SetValue("ZCARR_PROP", inCarrellistaProposto)
            In_rfcTable.SetValue("ZCARR_EXEC", inCarrellistaEsecuzione)
            In_rfcTable.SetValue("ORA_CREAZIONE", "00:00:00")
            In_rfcTable.SetValue("Ora_Fine", "00:00:00")
            In_rfcTable.SetValue("Ora_Start", "00:00:00")
            In_rfcTable.SetValue("Matnr_Ori", clsWmsJobsGroup.UserFilterGetList.CodiceMateriale)
            In_rfcTable.SetValue("Charg_Ori", clsWmsJobsGroup.UserFilterGetList.Partita)
            In_rfcTable.SetValue("Lgtyp_Ori", clsWmsJobsGroup.UserFilterGetList.UbicazioneInfo.TipoMagazzino)


            'SETTO I FILTRI CHE POSSONO ESSERE IMPOSTATI DALL'OPERATORE
            rfcFunction.SetValue("I_Sku", clsWmsJobsGroup.UserFilterGetList.SKU)

            If (inShowOnlyActive = True) Then
                rfcFunction.SetValue("I_SHOW_ONLY_ACTIVE", "X")
            Else
                rfcFunction.SetValue("I_SHOW_ONLY_ACTIVE", " ")
            End If

            rfcFunction.SetValue("I_USERID", inUserId)
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_ZWMS_JOBS_GROUP_TAB")


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcTable.ElementCount > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                Dim Out_rfcStruct_PARTNER_AG As IRfcStructure = rfcTable.GetStructure("PARTNER_AG")
                Dim Out_rfcStruct_PARTNER_WE As IRfcStructure = rfcTable.GetStructure("PARTNER_WE")
                Dim Out_rfcStruct_FORNITORE As IRfcStructure = rfcTable.GetStructure("FORNITORE")


                For Each rfcRow In rfcTable

                    WorkRow = outDataTable.NewRow()

                    'rfcRow.GetString(rfcTable.GetElementMetadata("NUM_ACCORPAMENTI").Name)
                    WorkRow.Item("NUM_ACCORPAMENTI") = clsSapUtility.GetRFCStructParamToString(rfcRow, "NUM_ACCORPAMENTI")
                    WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                    WorkRow.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZNRPICK")
                    WorkRow.Item("ZWMS_JOBSGRP_DESCR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_JOBSGRP_DESCR")
                    WorkRow.Item("ZDOC") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZDOC")
                    WorkRow.Item("NUM_DOC") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "NUM_DOC")
                    WorkRow.Item("RIF_ODA_BSTKD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "RIF_ODA_BSTKD")
                    WorkRow.Item("RIF_ODV_IHREZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "RIF_ODV_IHREZ")
                    WorkRow.Item("WERKS_DEST") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS_DEST")
                    WorkRow.Item("LGORT_DEST") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGORT_DEST")
                    WorkRow.Item("ZCARR_PROP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZCARR_PROP")
                    WorkRow.Item("ZCARR_EXEC") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZCARR_EXEC")
                    WorkRow.Item("TOT_NUM_SCATOLE") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TOT_NUM_SCATOLE")
                    WorkRow.Item("TOT_NUM_M2") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TOT_NUM_M2")
                    WorkRow.Item("TOT_NUM_PZ") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TOT_NUM_PZ")
                    WorkRow.Item("TOT_NUM_OTHERS") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TOT_NUM_OTHERS")

                    WorkRow.Item("PARTNER_AG_KUNNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "KUNNR")
                    WorkRow.Item("PARTNER_AG_NAME1") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "NAME1")
                    WorkRow.Item("PARTNER_AG_NAME2") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "NAME2")
                    WorkRow.Item("PARTNER_AG_ORT01") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "ORT01")
                    WorkRow.Item("PARTNER_AG_PSTLZ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "PSTLZ")
                    WorkRow.Item("PARTNER_AG_REGIO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "REGIO")
                    WorkRow.Item("PARTNER_AG_STRAS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "STRAS")

                    WorkRow.Item("PARTNER_WE_KUNNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "KUNNR")
                    WorkRow.Item("PARTNER_WE_NAME1") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "NAME1")
                    WorkRow.Item("PARTNER_WE_NAME2") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "NAME2")
                    WorkRow.Item("PARTNER_WE_ORT01") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "ORT01")
                    WorkRow.Item("PARTNER_WE_PSTLZ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "PSTLZ")
                    WorkRow.Item("PARTNER_WE_REGIO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "REGIO")
                    WorkRow.Item("PARTNER_WE_STRAS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "STRAS")

                    WorkRow.Item("FORNITORE_LIFNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "LIFNR")
                    WorkRow.Item("FORNITORE_NAME1") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "NAME1")
                    WorkRow.Item("FORNITORE_NAME2") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "NAME2")
                    WorkRow.Item("FORNITORE_ORT01") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "ORT01")
                    WorkRow.Item("FORNITORE_PSTLZ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "PSTLZ")
                    WorkRow.Item("FORNITORE_REGIO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "REGIO")
                    WorkRow.Item("FORNITORE_STRAS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "STRAS")


                    'WorkRow.Item("PARTNER_AG_KUNNR") = IIf(IsNothing(Out_rfcStruct_PARTNER_AG.GetAbapObject("KUNNR")), "", Out_rfcStruct_PARTNER_AG.GetAbapObject("KUNNR"))
                    'WorkRow.Item("PARTNER_AG_NAME1") = IIf(IsNothing(Out_rfcStruct_PARTNER_AG.GetAbapObject("NAME1")), "", Out_rfcStruct_PARTNER_AG.GetAbapObject("NAME1"))
                    'WorkRow.Item("PARTNER_AG_NAME2") = IIf(IsNothing(Out_rfcStruct_PARTNER_AG.GetAbapObject("NAME2")), "", Out_rfcStruct_PARTNER_AG.GetAbapObject("NAME2"))
                    'WorkRow.Item("PARTNER_AG_ORT01") = IIf(IsNothing(Out_rfcStruct_PARTNER_AG.GetAbapObject("ORT01")), "", Out_rfcStruct_PARTNER_AG.GetAbapObject("ORT01"))
                    'WorkRow.Item("PARTNER_AG_PSTLZ") = IIf(IsNothing(Out_rfcStruct_PARTNER_AG.GetAbapObject("PSTLZ")), "", Out_rfcStruct_PARTNER_AG.GetAbapObject("PSTLZ"))
                    'WorkRow.Item("PARTNER_AG_REGIO") = IIf(IsNothing(Out_rfcStruct_PARTNER_AG.GetAbapObject("REGIO")), "", Out_rfcStruct_PARTNER_AG.GetAbapObject("REGIO"))
                    'WorkRow.Item("PARTNER_AG_STRAS") = IIf(IsNothing(Out_rfcStruct_PARTNER_AG.GetAbapObject("STRAS")), "", Out_rfcStruct_PARTNER_AG.GetAbapObject("STRAS"))

                    'WorkRow.Item("PARTNER_WE_KUNNR") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("KUNNR")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("KUNNR"))
                    'WorkRow.Item("PARTNER_WE_NAME1") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("NAME1")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("NAME1"))
                    'WorkRow.Item("PARTNER_WE_NAME2") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("NAME2")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("NAME2"))
                    'WorkRow.Item("PARTNER_WE_ORT01") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("ORT01")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("ORT01"))
                    'WorkRow.Item("PARTNER_WE_PSTLZ") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("PSTLZ")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("PSTLZ"))
                    'WorkRow.Item("PARTNER_WE_REGIO") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("REGIO")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("REGIO"))
                    'WorkRow.Item("PARTNER_WE_STRAS") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("STRAS")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("STRAS"))

                    'WorkRow.Item("FORNITORE_LIFNR") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("LIFNR")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("LIFNR"))
                    'WorkRow.Item("FORNITORE_NAME1") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("NAME1")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("NAME1"))
                    'WorkRow.Item("FORNITORE_NAME2") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("NAME2")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("NAME2"))
                    'WorkRow.Item("FORNITORE_ORT01") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("ORT01")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("ORT01"))
                    'WorkRow.Item("FORNITORE_PSTLZ") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("PSTLZ")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("PSTLZ"))
                    'WorkRow.Item("FORNITORE_REGIO") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("REGIO")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("REGIO"))
                    'WorkRow.Item("FORNITORE_STRAS") = IIf(IsNothing(Out_rfcStruct_PARTNER_WE.GetAbapObject("STRAS")), "", Out_rfcStruct_PARTNER_WE.GetAbapObject("STRAS"))

                    outDataTable.Rows.Add(WorkRow)

                Next

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1135, "", " (GET_JOBGRP_LIST). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_JOBS_GROUP_LIST = RetCode
            Else
                Call_ZWS_GET_JOBS_GROUP_LIST = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_JOBS_GROUP_SINGLE(ByVal inCodiceGruppoMissioni As String, ByVal inNumeroConsegna As String, ByVal inNumeroDocumentoMateriale As String, ByVal inShowOnlyActive As Boolean, ByVal inUserId As String, ByVal inLingua As String, ByRef outExecutionOk As Boolean, ByRef outGroupFoundOk As Boolean, ByRef outDataTable As DataTable, ByRef inSapJobsGroupInfo As clsDataType.SapJobsGroupInfo, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outFoundGroupDeleted As Boolean, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New WS_GET_JOBS_GROUP_SINGLE_MB.ZwmsJobsInfo

        Dim objWS As New WS_GET_JOBS_GROUP_SINGLE_MB.ZWS_GET_JOBS_GROUP_SINGLE_MB
        Dim stImportParams As New WS_GET_JOBS_GROUP_SINGLE_MB.ZwmsGetJobsGroupSingleMb
        Dim objWSResponse As New WS_GET_JOBS_GROUP_SINGLE_MB.ZwmsGetJobsGroupSingleMbResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_JOBS_GROUP_SINGLE = 1 'INIT AT ERROR

            outExecutionOk = False
            outGroupFoundOk = False
            outFoundGroupDeleted = False

            RetCode += clsUtility.InitDataTable(outDataTable)
            If ((Len(inCodiceGruppoMissioni) <= 0) And (Len(inNumeroConsegna) <= 0) And (Len(inNumeroDocumentoMateriale) <= 0)) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1134, "", " JOBS_GROUP_LIST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1199, "", "GruppoMissioni/Consegna/DocMat") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobsgrp = inCodiceGruppoMissioni '>>> CODICE UNIVOCO GRUPPO MISSIONI
            stImportParams.INumConsVbelv = inNumeroConsegna
            stImportParams.IMblnr = inNumeroDocumentoMateriale
            stImportParams.IUserid = inUserId
            stImportParams.ISpras = inLingua


            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_jobs_group_single_mb/" & SapClient & "/zws_get_jobs_group_single_mb/zws_get_jobs_group_single_mb"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsGetJobsGroupSingleMb(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then

                outExecutionOk = True 'SETTO FLAG DI ESECUZIONE OK

                '>>> SETTO FLAG CHE MI INDICA CHE IL GRUPPO E' STATO CANCELLATO
                If (objWSResponse.EJobsGroupDeleted = "X") Then
                    outFoundGroupDeleted = True
                End If

                '>>> RITORNO IL NUMERO DI RIGHE CON IL FLAG DI CANCELLATO
                inSapJobsGroupInfo.FoundRowsDeleted = objWSResponse.EFoundrowsDeleted

                If (objWSResponse.EFoundrows > 0) Then
                    outGroupFoundOk = True '>>> SETTO FLAG DI GRUPPO TROVATO
                    inSapJobsGroupInfo.NumAccorpamenti = objWSResponse.EZwmsJobsGroupRec.NumAccorpamenti
                    inSapJobsGroupInfo.NumeroJobsGroup = objWSResponse.EZwmsJobsGroupRec.ZnrWmsJobsgrp
                    inSapJobsGroupInfo.NumeroOrdinePicking = objWSResponse.EZwmsJobsGroupRec.Znrpick
                    inSapJobsGroupInfo.JobsGroupDescription = objWSResponse.EZwmsJobsGroupRec.ZwmsJobsgrpDescr
                    inSapJobsGroupInfo.TipoDocumento = objWSResponse.EZwmsJobsGroupRec.Zdoc
                    inSapJobsGroupInfo.NumeroDocumento = objWSResponse.EZwmsJobsGroupRec.NumDoc
                    inSapJobsGroupInfo.RiferimentoOdA = objWSResponse.EZwmsJobsGroupRec.RifOdaBstkd
                    inSapJobsGroupInfo.RiferimentoOdV = objWSResponse.EZwmsJobsGroupRec.RifOdvIhrez
                    inSapJobsGroupInfo.DivisioneDestinazione = objWSResponse.EZwmsJobsGroupRec.WerksDest
                    inSapJobsGroupInfo.MagLogicoDestinazione = objWSResponse.EZwmsJobsGroupRec.LgortDest
                    inSapJobsGroupInfo.IdCarrellistaProposto = objWSResponse.EZwmsJobsGroupRec.ZcarrProp
                    inSapJobsGroupInfo.IdCarrellistaEsecuzione = objWSResponse.EZwmsJobsGroupRec.ZcarrExec
                    inSapJobsGroupInfo.NumTotaleScatole = objWSResponse.EZwmsJobsGroupRec.TotNumScatole
                    inSapJobsGroupInfo.NumTotaleM2 = objWSResponse.EZwmsJobsGroupRec.TotNumM2
                    inSapJobsGroupInfo.NumTotalePezzi = objWSResponse.EZwmsJobsGroupRec.TotNumPz
                    inSapJobsGroupInfo.NumTotaleOthers = objWSResponse.EZwmsJobsGroupRec.TotNumOthers
                    inSapJobsGroupInfo.PartnerAGInfo.KUNNR = objWSResponse.EZwmsJobsGroupRec.PartnerAg.Kunnr
                    inSapJobsGroupInfo.PartnerAGInfo.NAME1 = objWSResponse.EZwmsJobsGroupRec.PartnerAg.Name1
                    inSapJobsGroupInfo.PartnerAGInfo.NAME2 = objWSResponse.EZwmsJobsGroupRec.PartnerAg.Name2
                    inSapJobsGroupInfo.PartnerAGInfo.ORT01 = objWSResponse.EZwmsJobsGroupRec.PartnerAg.Ort01
                    inSapJobsGroupInfo.PartnerAGInfo.PSTLZ = objWSResponse.EZwmsJobsGroupRec.PartnerAg.Pstlz
                    inSapJobsGroupInfo.PartnerAGInfo.REGIO = objWSResponse.EZwmsJobsGroupRec.PartnerAg.Regio
                    inSapJobsGroupInfo.PartnerAGInfo.STRAS = objWSResponse.EZwmsJobsGroupRec.PartnerAg.Stras
                    inSapJobsGroupInfo.PartnerWEInfo.KUNNR = objWSResponse.EZwmsJobsGroupRec.PartnerWe.Kunnr
                    inSapJobsGroupInfo.PartnerWEInfo.NAME1 = objWSResponse.EZwmsJobsGroupRec.PartnerWe.Name1
                    inSapJobsGroupInfo.PartnerWEInfo.NAME2 = objWSResponse.EZwmsJobsGroupRec.PartnerWe.Name2
                    inSapJobsGroupInfo.PartnerWEInfo.ORT01 = objWSResponse.EZwmsJobsGroupRec.PartnerWe.Ort01
                    inSapJobsGroupInfo.PartnerWEInfo.PSTLZ = objWSResponse.EZwmsJobsGroupRec.PartnerWe.Pstlz
                    inSapJobsGroupInfo.PartnerWEInfo.REGIO = objWSResponse.EZwmsJobsGroupRec.PartnerWe.Regio
                    inSapJobsGroupInfo.PartnerWEInfo.STRAS = objWSResponse.EZwmsJobsGroupRec.PartnerWe.Stras
                    inSapJobsGroupInfo.FornitoreInfo.LIFNR = objWSResponse.EZwmsJobsGroupRec.Fornitore.Lifnr
                    inSapJobsGroupInfo.FornitoreInfo.NAME1 = objWSResponse.EZwmsJobsGroupRec.Fornitore.Name1
                    inSapJobsGroupInfo.FornitoreInfo.NAME2 = objWSResponse.EZwmsJobsGroupRec.Fornitore.Name2
                    inSapJobsGroupInfo.FornitoreInfo.ORT01 = objWSResponse.EZwmsJobsGroupRec.Fornitore.Ort01
                    inSapJobsGroupInfo.FornitoreInfo.PSTLZ = objWSResponse.EZwmsJobsGroupRec.Fornitore.Pstlz
                    inSapJobsGroupInfo.FornitoreInfo.REGIO = objWSResponse.EZwmsJobsGroupRec.Fornitore.Regio
                    inSapJobsGroupInfo.FornitoreInfo.STRAS = objWSResponse.EZwmsJobsGroupRec.Fornitore.Stras
                End If

                If (objWSResponse.EZwmsJobsInfoTab.Length > 0) Then
                    For Index = 0 To objWSResponse.EZwmsJobsInfoTab.Length - 1
                        SingoloRec = objWSResponse.EZwmsJobsInfoTab(Index)
                        If (SingoloRec.ZwmsJobs.ZnrWmsJobs > 0) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("ZNR_WMS_JOBS") = SingoloRec.ZwmsJobs.ZnrWmsJobs
                            WorkRow.Item("ZNR_WMS_JOBSGRP") = SingoloRec.ZwmsJobs.ZnrWmsJobsgrp
                            WorkRow.Item("ZNR_WMS_GRPEXEC") = SingoloRec.ZwmsJobs.ZnrWmsGrpexec
                            WorkRow.Item("IDSTATUS") = SingoloRec.ZwmsJobs.Idstatus
                            WorkRow.Item("STATUS") = SingoloRec.Status
                            WorkRow.Item("STATUS_DESCR") = SingoloRec.StatusDescr
                            WorkRow.Item("MAKTG") = SingoloRec.Maktg
                            WorkRow.Item("WERKS_ORI") = SingoloRec.ZwmsJobs.WerksOri
                            WorkRow.Item("LGORT_ORI") = SingoloRec.ZwmsJobs.LgortOri
                            WorkRow.Item("MATNR_ORI") = SingoloRec.ZwmsJobs.MatnrOri
                            WorkRow.Item("CHARG_ORI") = SingoloRec.ZwmsJobs.ChargOri
                            WorkRow.Item("BESTQ_ORI") = SingoloRec.ZwmsJobs.BestqOri
                            WorkRow.Item("SOBKZ_ORI") = SingoloRec.ZwmsJobs.SobkzOri
                            WorkRow.Item("SONUM_ORI") = SingoloRec.ZwmsJobs.SonumOri
                            WorkRow.Item("LGNUM_ORI") = SingoloRec.ZwmsJobs.LgnumOri
                            WorkRow.Item("LGTYP_ORI") = SingoloRec.ZwmsJobs.LgtypOri
                            WorkRow.Item("LGPLA_ORI") = SingoloRec.ZwmsJobs.LgplaOri
                            WorkRow.Item("LENUM_ORI") = SingoloRec.ZwmsJobs.LenumOri
                            WorkRow.Item("MEINS_ORI") = SingoloRec.ZwmsJobs.MeinsOri
                            WorkRow.Item("ZQTAPK_ORI") = SingoloRec.ZwmsJobs.ZqtapkOri
                            WorkRow.Item("MEINS_PZ") = SingoloRec.ZwmsJobs.MeinsPz
                            WorkRow.Item("ZQTAPK_ORI_PZ") = SingoloRec.ZwmsJobs.ZqtapkOriPz
                            WorkRow.Item("ZQTAPK_ORI_SC") = SingoloRec.ZwmsJobs.ZqtapkOriSc
                            WorkRow.Item("ZQTAPK_ORI_PL") = SingoloRec.ZwmsJobs.ZqtapkOriPl
                            WorkRow.Item("ZQTAPK_SFUSI_PZ") = SingoloRec.ZwmsJobs.ZqtapkSfusiPz
                            WorkRow.Item("ZQTA_PREL_BASE") = SingoloRec.ZwmsJobs.ZqtaPrelBase
                            WorkRow.Item("UDM_QTAPR_MEINS") = SingoloRec.ZwmsJobs.UdmQtaprMeins
                            WorkRow.Item("ZQTA_PREL_CONS") = SingoloRec.ZwmsJobs.ZqtaPrelCons
                            WorkRow.Item("UDM_QTAPR_CONS") = SingoloRec.ZwmsJobs.UdmQtaprCons
                            WorkRow.Item("ZQTA_PREL_PZ") = SingoloRec.ZwmsJobs.ZqtaPrelCons
                            WorkRow.Item("UDM_QTAPR_PZ") = SingoloRec.ZwmsJobs.UdmQtaprCons
                            WorkRow.Item("WERKS_DEST") = SingoloRec.ZwmsJobs.WerksDest
                            WorkRow.Item("LGORT_DEST") = SingoloRec.ZwmsJobs.LgortDest
                            WorkRow.Item("MATNR_DEST") = SingoloRec.ZwmsJobs.MatnrDest
                            WorkRow.Item("CHARG_DEST") = SingoloRec.ZwmsJobs.ChargDest
                            WorkRow.Item("BESTQ_DEST") = SingoloRec.ZwmsJobs.BestqDest
                            WorkRow.Item("SOBKZ_DEST") = SingoloRec.ZwmsJobs.SobkzDest
                            WorkRow.Item("SONUM_DEST") = SingoloRec.ZwmsJobs.SonumDest
                            WorkRow.Item("LGNUM_DEST") = SingoloRec.ZwmsJobs.LgnumDest
                            WorkRow.Item("LGTYP_DEST") = SingoloRec.ZwmsJobs.LgtypDest
                            WorkRow.Item("LGPLA_DEST") = SingoloRec.ZwmsJobs.LgplaDest
                            WorkRow.Item("LENUM_DEST") = SingoloRec.ZwmsJobs.LenumDest
                            WorkRow.Item("SEQUENCE") = SingoloRec.ZwmsJobs.Sequence
                            WorkRow.Item("CURRENT_STEP") = SingoloRec.ZwmsJobs.CurrentStep
                            WorkRow.Item("NUM_STEPS_TOTAL") = SingoloRec.ZwmsJobs.NumStepsTotal
                            WorkRow.Item("DATA_CREAZIONE") = SingoloRec.ZwmsJobs.DataCreazione
                            WorkRow.Item("ORA_CREAZIONE") = SingoloRec.ZwmsJobs.OraCreazione
                            WorkRow.Item("ZNRPICK") = SingoloRec.ZwmsJobs.Znrpick
                            WorkRow.Item("ZPOSPK") = SingoloRec.ZwmsJobs.Zpospk
                            WorkRow.Item("VBELN") = SingoloRec.ZwmsJobs.Vbeln
                            WorkRow.Item("POSNR") = SingoloRec.ZwmsJobs.Posnr
                            WorkRow.Item("NUM_CONS_VBELV") = SingoloRec.ZwmsJobs.NumConsVbelv
                            WorkRow.Item("POS_CONS_POSNV") = SingoloRec.ZwmsJobs.PosConsPosnv
                            WorkRow.Item("ID_JOBS_TYPE") = SingoloRec.ZwmsJobs.IdJobsType
                            WorkRow.Item("DESCR_JOBS_TYPE") = SingoloRec.ZwmsJobsType.DescrJobsType
                            WorkRow.Item("JOBS_TYPE_KZEAR") = SingoloRec.ZwmsJobsType.Kzear
                            WorkRow.Item("PRIORITA") = SingoloRec.ZwmsJobs.Priorita
                            WorkRow.Item("URGENTE") = SingoloRec.ZwmsJobs.Urgente
                            WorkRow.Item("ZFLAWM") = SingoloRec.ZwmsJobs.Zflawm
                            WorkRow.Item("PALLET_INTERI") = SingoloRec.ZwmsJobs.PalletInteri
                            WorkRow.Item("SCATOLE_INTERE") = SingoloRec.ZwmsJobs.ScatoleIntere
                            WorkRow.Item("ZTIPO_ENTMERCE") = SingoloRec.ZwmsJobs.ZtipoEntmerce
                            WorkRow.Item("ZFORCEDDEST") = SingoloRec.ZwmsJobs.Zforceddest
                            WorkRow.Item("ZFORCSPUNTACONF") = SingoloRec.ZwmsJobs.Zforcspuntaconf
                            WorkRow.Item("CHARG_TASSATIVA") = SingoloRec.ZwmsJobs.ChargTassativa
                            WorkRow.Item("ZCARR_PROP") = SingoloRec.ZwmsJobs.ZcarrProp
                            WorkRow.Item("ZCARR_EXEC") = SingoloRec.ZwmsJobs.ZcarrExec
                            WorkRow.Item("ZDOC") = SingoloRec.ZwmsJobs.Zdoc
                            WorkRow.Item("MEMO") = SingoloRec.ZwmsJobs.Memo
                            WorkRow.Item("ZZ_NDIS") = SingoloRec.ZwmsJobs.ZzNdis
                            WorkRow.Item("INFO_PRELIEVO") = SingoloRec.ZwmsJobs.InfoPrelievo
                            WorkRow.Item("IMBALLO") = SingoloRec.VarianteImballo.Imballo
                            WorkRow.Item("PZ_X_SC") = SingoloRec.VarianteImballo.PzXSc
                            WorkRow.Item("SC_X_PAL") = SingoloRec.VarianteImballo.ScXPal
                            WorkRow.Item("M2_X_PAL") = SingoloRec.VarianteImballo.M2XPal

                            '****************************************************************************
                            '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                            '****************************************************************************
                            If (SingoloRec.ZwmsJobs.Idstatus >= clsWmsJob.cstIdJobStatus_Verificato) Then
                                WorkRow.Item("GRID_EXECUTED") = "*"
                            ElseIf (SingoloRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Cancellato) Then
                                WorkRow.Item("GRID_EXECUTED") = "D"
                            ElseIf (SingoloRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Sospeso) Then
                                WorkRow.Item("GRID_EXECUTED") = "S"
                            ElseIf (clsWmsJob.IsLastStepJobDecori(WorkRow, False) = True) Then
                                WorkRow.Item("GRID_EXECUTED") = "/"
                            ElseIf (SingoloRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Iniziato) Then
                                WorkRow.Item("GRID_EXECUTED") = "W" 'IN LAVORAZIONE
                            Else
                                WorkRow.Item("GRID_EXECUTED") = ""
                            End If

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_JOBS_GROUP_SINGLE_MB")


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_ZNR_WMS_JOBSGRP", inCodiceGruppoMissioni) '>>> CODICE UNIVOCO GRUPPO MISSIONI
            rfcFunction.SetValue("I_NUM_CONS_VBELV", inNumeroConsegna)
            rfcFunction.SetValue("I_MBLNR", inNumeroDocumentoMateriale)
            rfcFunction.SetValue("I_USERID", inUserId)
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                rfcTable = rfcFunction.GetTable("E_ZWMS_JOBS_INFO_TAB")
                Dim Out_rfcStruct_ZWMS_JOBS As IRfcStructure = rfcTable.GetStructure("ZWMS_JOBS")
                Dim Out_rfcStruct_ZWMS_JOBS_TYPE As IRfcStructure = rfcTable.GetStructure("ZWMS_JOBS_TYPE")
                Dim Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_GROUP_REC")

                'Dim rfcTable01 As IRfcTable
                'rfcTable01 = Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC.GetTable("ZWMS_JOBS_GROUP")


                Dim Out_rfcStruct_PARTNER_AG As IRfcStructure = Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC.GetStructure("PARTNER_AG")
                Dim Out_rfcStruct_PARTNER_WE As IRfcStructure = Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC.GetStructure("PARTNER_WE")
                Dim Out_rfcStruct_FORNITORE As IRfcStructure = Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC.GetStructure("FORNITORE")
                Dim Out_rfcStruct_VARIANTE_IMBALLO As IRfcStructure = rfcTable.GetStructure("VARIANTE_IMBALLO")

                outExecutionOk = True 'SETTO FLAG DI ESECUZIONE OK

                '>>> SETTO FLAG CHE MI INDICA CHE IL GRUPPO E' STATO CANCELLATO
                If (rfcFunction.Item("E_JOBS_GROUP_DELETED").GetString = "X") Then
                    outFoundGroupDeleted = True
                End If

                '>>> RITORNO IL NUMERO DI RIGHE CON IL FLAG DI CANCELLATO
                inSapJobsGroupInfo.FoundRowsDeleted = rfcFunction.Item("E_FOUNDROWS_DELETED").GetInt

                If (rfcFunction.GetObject("E_FOUNDROWS") > 0) Then
                    outGroupFoundOk = True '>>> SETTO FLAG DI GRUPPO TROVATO

                    inSapJobsGroupInfo.NumAccorpamenti = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "NUM_ACCORPAMENTI")
                    inSapJobsGroupInfo.NumeroJobsGroup = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "ZNR_WMS_JOBSGRP")
                    inSapJobsGroupInfo.NumeroOrdinePicking = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "ZNRPICK")
                    inSapJobsGroupInfo.JobsGroupDescription = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "ZWMS_JOBSGRP_DESCR")
                    inSapJobsGroupInfo.TipoDocumento = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "ZDOC")
                    inSapJobsGroupInfo.NumeroDocumento = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "NUM_DOC")
                    inSapJobsGroupInfo.RiferimentoOdA = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "RIF_ODA_BSTKD")
                    inSapJobsGroupInfo.RiferimentoOdV = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "RIF_ODV_IHREZ")
                    inSapJobsGroupInfo.DivisioneDestinazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "WERKS_DEST")
                    inSapJobsGroupInfo.MagLogicoDestinazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "LGORT_DEST")
                    inSapJobsGroupInfo.IdCarrellistaProposto = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "ZCARR_PROP")
                    inSapJobsGroupInfo.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "ZCARR_EXEC")
                    inSapJobsGroupInfo.NumTotaleScatole = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "TOT_NUM_SCATOLE")
                    inSapJobsGroupInfo.NumTotaleM2 = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "TOT_NUM_M2")
                    inSapJobsGroupInfo.NumTotalePezzi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "TOT_NUM_PZ")
                    inSapJobsGroupInfo.NumTotaleOthers = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "TOT_NUM_OTHERS")
                    inSapJobsGroupInfo.PartnerAGInfo.KUNNR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "KUNNR")
                    inSapJobsGroupInfo.PartnerAGInfo.NAME1 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "NAME1")
                    inSapJobsGroupInfo.PartnerAGInfo.NAME2 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "NAME2")
                    inSapJobsGroupInfo.PartnerAGInfo.ORT01 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "ORT01")
                    inSapJobsGroupInfo.PartnerAGInfo.PSTLZ = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "PSTLZ")
                    inSapJobsGroupInfo.PartnerAGInfo.REGIO = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "REGIO")
                    inSapJobsGroupInfo.PartnerAGInfo.STRAS = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "STRAS")
                    inSapJobsGroupInfo.PartnerWEInfo.KUNNR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "KUNNR")
                    inSapJobsGroupInfo.PartnerWEInfo.NAME1 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "NAME1")
                    inSapJobsGroupInfo.PartnerWEInfo.NAME2 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "NAME2")
                    inSapJobsGroupInfo.PartnerWEInfo.ORT01 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "ORT01")
                    inSapJobsGroupInfo.PartnerWEInfo.PSTLZ = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "PSTLZ")
                    inSapJobsGroupInfo.PartnerWEInfo.REGIO = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "REGIO")
                    inSapJobsGroupInfo.PartnerWEInfo.STRAS = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "STRAS")
                    inSapJobsGroupInfo.FornitoreInfo.LIFNR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "LIFNR")
                    inSapJobsGroupInfo.FornitoreInfo.NAME1 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "NAME1")
                    inSapJobsGroupInfo.FornitoreInfo.NAME2 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "NAME2")
                    inSapJobsGroupInfo.FornitoreInfo.ORT01 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "ORT01")
                    inSapJobsGroupInfo.FornitoreInfo.PSTLZ = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "PSTLZ")
                    inSapJobsGroupInfo.FornitoreInfo.REGIO = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "REGIO")
                    inSapJobsGroupInfo.FornitoreInfo.STRAS = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_REC, "STRAS")

                End If

                'RITORNO IL DATA TABLE CON TUTTI I JOB DEL GRUPPO MISSIONE
                If (rfcTable.RowCount > 0) Then
                    For Each rfcRow In rfcTable
                        'ATTENZIONE CHE LA STRUTTURA VA IMPOSTATA SEMPRE DENTRO AL LOOP PER COPIARE I DATI DEL SINGOLO RECORD
                        Out_rfcStruct_ZWMS_JOBS = rfcRow.GetStructure("ZWMS_JOBS")
                        Out_rfcStruct_VARIANTE_IMBALLO = rfcRow.GetStructure("VARIANTE_IMBALLO")
                        If (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBS"), True) = True) Then

                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBS")
                            WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBSGRP")
                            WorkRow.Item("ZNR_WMS_GRPEXEC") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_GRPEXEC")
                            WorkRow.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS")
                            WorkRow.Item("STATUS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "STATUS")
                            WorkRow.Item("STATUS_DESCR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "STATUS_DESCR")
                            WorkRow.Item("MAKTG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAKTG")
                            WorkRow.Item("WERKS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_ORI")
                            WorkRow.Item("LGORT_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_ORI")
                            WorkRow.Item("MATNR_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_ORI")
                            WorkRow.Item("CHARG_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_ORI")
                            WorkRow.Item("BESTQ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_ORI")
                            WorkRow.Item("SOBKZ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_ORI")
                            WorkRow.Item("SONUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_ORI")
                            WorkRow.Item("LGNUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_ORI")
                            WorkRow.Item("LGTYP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_ORI")
                            WorkRow.Item("LGPLA_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_ORI")
                            WorkRow.Item("LENUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_ORI")
                            WorkRow.Item("MEINS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_ORI")
                            WorkRow.Item("ZQTAPK_ORI") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI")
                            WorkRow.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_PZ")
                            WorkRow.Item("ZQTAPK_ORI_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_BASE")
                            WorkRow.Item("ZQTAPK_ORI_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_CONS")
                            WorkRow.Item("ZQTAPK_ORI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PZ")
                            WorkRow.Item("ZQTAPK_ORI_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_SC")
                            WorkRow.Item("ZQTAPK_ORI_PL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PL")
                            WorkRow.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_FULL_PALL")
                            WorkRow.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_PARTIAL")
                            WorkRow.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_SFUSI_PZ")

                            WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_BASE")
                            WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_MEINS")
                            WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_CONS")
                            WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_CONS")
                            WorkRow.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_FULL")
                            WorkRow.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PARTIA")
                            WorkRow.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_SF")
                            WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PZ")

                            WorkRow.Item("WERKS_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_DEST")
                            WorkRow.Item("LGORT_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_DEST")
                            WorkRow.Item("MATNR_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_DEST")
                            WorkRow.Item("CHARG_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_DEST")
                            WorkRow.Item("BESTQ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_DEST")
                            WorkRow.Item("SOBKZ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_DEST")
                            WorkRow.Item("SONUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_DEST")
                            WorkRow.Item("LGNUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_DEST")
                            WorkRow.Item("LGTYP_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_DEST")
                            WorkRow.Item("LGPLA_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_DEST")
                            WorkRow.Item("LENUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_DEST")
                            WorkRow.Item("SEQUENCE") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "SEQUENCE")
                            WorkRow.Item("CURRENT_STEP") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "CURRENT_STEP")
                            WorkRow.Item("NUM_STEPS_TOTAL") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "NUM_STEPS_TOTAL")
                            WorkRow.Item("DATA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString  'clsSapUtility.GetRFCStructParamToString(rfcRow, "DATA_CREAZIONE")
                            WorkRow.Item("ORA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString  'clsSapUtility.GetRFCStructParamToString(rfcRow, "ORA_CREAZIONE")
                            WorkRow.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNRPICK")
                            WorkRow.Item("ZPOSPK") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZPOSPK")
                            WorkRow.Item("VBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "VBELN")
                            WorkRow.Item("POSNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "POSNR")
                            WorkRow.Item("NUM_CONS_VBELV") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "NUM_CONS_VBELV")
                            WorkRow.Item("POS_CONS_POSNV") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "POS_CONS_POSNV")
                            WorkRow.Item("ID_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ID_JOBS_TYPE")
                            WorkRow.Item("DESCR_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "DESCR_JOBS_TYPE")
                            WorkRow.Item("JOBS_TYPE_KZEAR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KZEAR")
                            WorkRow.Item("PRIORITA") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "PRIORITA")
                            WorkRow.Item("URGENTE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "URGENTE")
                            WorkRow.Item("ZFLAWM") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFLAWM")
                            WorkRow.Item("PALLET_INTERI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "PALLET_INTERI")
                            WorkRow.Item("SCATOLE_INTERE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SCATOLE_INTERE")
                            WorkRow.Item("ZTIPO_ENTMERCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZTIPO_ENTMERCE")
                            WorkRow.Item("ZFORCEDDEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCEDDEST")
                            WorkRow.Item("ZFORCSPUNTACONF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCSPUNTACONF")
                            WorkRow.Item("CHARG_TASSATIVA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_TASSATIVA")
                            WorkRow.Item("ZCARR_PROP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_PROP")
                            WorkRow.Item("ZCARR_EXEC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC")
                            WorkRow.Item("ZDOC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZDOC")
                            WorkRow.Item("MEMO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEMO")
                            WorkRow.Item("ZZ_NDIS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZZ_NDIS")
                            WorkRow.Item("INFO_PRELIEVO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "INFO_PRELIEVO")
                            WorkRow.Item("IMBALLO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_VARIANTE_IMBALLO, "IMBALLO")
                            WorkRow.Item("PZ_X_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "PZ_X_SC")
                            WorkRow.Item("SC_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "SC_X_PAL")
                            WorkRow.Item("M2_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "M2_X_PAL")


                            '****************************************************************************
                            '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                            '****************************************************************************
                            If (clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS") >= clsWmsJob.cstIdJobStatus_Verificato) Then
                                WorkRow.Item("GRID_EXECUTED") = "*"
                            ElseIf (clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS") = clsWmsJob.cstIdJobStatus_Cancellato) Then
                                WorkRow.Item("GRID_EXECUTED") = "D"
                            ElseIf (clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS") = clsWmsJob.cstIdJobStatus_Sospeso) Then
                                WorkRow.Item("GRID_EXECUTED") = "S"
                            ElseIf (clsWmsJob.IsLastStepJobDecori(WorkRow, False) = True) Then
                                WorkRow.Item("GRID_EXECUTED") = "/"
                            ElseIf (clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS") = clsWmsJob.cstIdJobStatus_Iniziato) Then
                                WorkRow.Item("GRID_EXECUTED") = "W" 'IN LAVORAZIONE
                            Else
                                WorkRow.Item("GRID_EXECUTED") = ""
                            End If

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga

                        End If

                    Next

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Or (outGroupFoundOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1136, "", " (GET_JOBGRP_SINGLE). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_JOBS_GROUP_SINGLE = RetCode
            Else
                Call_ZWS_GET_JOBS_GROUP_SINGLE = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_JOBSGROUP_EXE_SUMMARY(ByVal inCodiceGruppoMissioni As String, ByVal inUserId As String, ByVal inLingua As String, ByRef outExecutionOk As Boolean, ByRef outGroupFoundOk As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New WS_GET_JOBSGROUP_EXE_SUMMARY.Lqua

        Dim objWS As New WS_GET_JOBSGROUP_EXE_SUMMARY.ZWS_GET_JOBSGROUP_EXE_SUMMARY
        Dim stImportParams As New WS_GET_JOBSGROUP_EXE_SUMMARY.ZwmsGetJobsgroupExeSummary
        Dim objWSResponse As New WS_GET_JOBSGROUP_EXE_SUMMARY.ZwmsGetJobsgroupExeSummaryResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_JOBSGROUP_EXE_SUMMARY = 1 'INIT AT ERROR

            outExecutionOk = False
            outGroupFoundOk = False


            'INIT
            RetCode += clsUtility.InitDataTable(clsWmsJobsGroup.objDataTablePickUMInfo)

            If (Len(inCodiceGruppoMissioni) <= 0) Then
                RetCode = 20
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1134, "", " JOBS_GROUP_LIST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1092, "", "CodiceGruppoMissioni") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If Not APPLICAZIONE_WIN32 = "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobsgrp = inCodiceGruppoMissioni '>>> CODICE UNIVOCO GRUPPO MISSIONI
            stImportParams.IUserid = inUserId
            stImportParams.ISpras = inLingua


            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_jobsgroup_exe_summary/" & SapClient & "/zws_get_jobsgroup_exe_summary/zws_get_jobsgroup_exe_summary"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsGetJobsgroupExeSummary(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then

                outExecutionOk = True 'SETTO FLAG DI ESECUZIONE OK

                If (objWSResponse.EFoundrows > 0) Then
                    outGroupFoundOk = True '>>> SETTO FLAG DI GRUPPO TROVATO
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumAccorpamenti = objWSResponse.EZwmsJobsGroupInfo.NumAccorpamenti
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumeroJobsGroup = objWSResponse.EZwmsJobsGroupInfo.ZnrWmsJobsgrp
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumeroOrdinePicking = objWSResponse.EZwmsJobsGroupInfo.Znrpick
                    clsWmsJobsGroup.WmsJobsGroupInfo.JobsGroupDescription = objWSResponse.EZwmsJobsGroupInfo.ZwmsJobsgrpDescr
                    clsWmsJobsGroup.WmsJobsGroupInfo.TipoDocumento = objWSResponse.EZwmsJobsGroupInfo.Zdoc
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumeroDocumento = objWSResponse.EZwmsJobsGroupInfo.NumDoc
                    clsWmsJobsGroup.WmsJobsGroupInfo.RiferimentoOdA = objWSResponse.EZwmsJobsGroupInfo.RifOdaBstkd
                    clsWmsJobsGroup.WmsJobsGroupInfo.RiferimentoOdV = objWSResponse.EZwmsJobsGroupInfo.RifOdvIhrez
                    clsWmsJobsGroup.WmsJobsGroupInfo.DivisioneDestinazione = objWSResponse.EZwmsJobsGroupInfo.WerksDest
                    clsWmsJobsGroup.WmsJobsGroupInfo.MagLogicoDestinazione = objWSResponse.EZwmsJobsGroupInfo.LgortDest
                    clsWmsJobsGroup.WmsJobsGroupInfo.IdCarrellistaProposto = objWSResponse.EZwmsJobsGroupInfo.ZcarrProp
                    clsWmsJobsGroup.WmsJobsGroupInfo.IdCarrellistaEsecuzione = objWSResponse.EZwmsJobsGroupInfo.ZcarrExec

                    clsWmsJobsGroup.WmsJobsGroupInfo.NumTotaleScatole = objWSResponse.EZwmsJobsGroupInfo.TotNumScatole
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumTotaleM2 = objWSResponse.EZwmsJobsGroupInfo.TotNumM2
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumTotalePezzi = objWSResponse.EZwmsJobsGroupInfo.TotNumPz
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumTotaleOthers = objWSResponse.EZwmsJobsGroupInfo.TotNumOthers

                    clsWmsJobsGroup.WmsJobsGroupInfo.NumPickTotaleScatole = objWSResponse.EZwmsJobsGroupInfo.TotPickNumScatole
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumPickTotaleM2 = objWSResponse.EZwmsJobsGroupInfo.TotPickNumM2
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumPickTotalePezzi = objWSResponse.EZwmsJobsGroupInfo.TotPickNumPz
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumPickTotaleOthers = objWSResponse.EZwmsJobsGroupInfo.TotPickNumOthers

                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.KUNNR = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Kunnr
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.NAME1 = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Name1
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.NAME2 = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Name2
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.ORT01 = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Ort01
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.PSTLZ = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Pstlz
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.REGIO = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Regio
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.STRAS = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Stras
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.KUNNR = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Kunnr
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.NAME1 = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Name1
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.NAME2 = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Name2
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.ORT01 = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Ort01
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.PSTLZ = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Pstlz
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.REGIO = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Regio
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.STRAS = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Stras
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.LIFNR = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Lifnr
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.NAME1 = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Name1
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.NAME2 = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Name2
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.ORT01 = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Ort01
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.PSTLZ = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Pstlz
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.REGIO = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Regio
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.STRAS = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Stras
                    clsWmsJobsGroup.WmsJobsGroupInfo.CheckMaterialePronto = objWSResponse.EZwmsJobsGroupInfo.ZmatnrChkPron

                    If (objWSResponse.EZwmsJobsGroupInfo.ZjobsgrClosed = "X") Then
                        clsWmsJobsGroup.WmsJobsGroupInfo.JobsGroupClosed = True
                    Else
                        clsWmsJobsGroup.WmsJobsGroupInfo.JobsGroupClosed = False
                    End If
                End If

                If (objWSResponse.EPickLenumDest.Length > 0) Then
                    For Index = 0 To objWSResponse.EPickLenumDest.Length - 1
                        SingoloRec = objWSResponse.EPickLenumDest(Index)
                        If (clsUtility.IsStringValid(SingoloRec.Lenum, True) = True) Then
                            WorkRow = clsWmsJobsGroup.objDataTablePickUMInfo.NewRow()
                            '>>> RIEMPO DATASET CON DATI DELLE PALETTE PRELEVATE NEL JOBGROUP
                            WorkRow.Item("Werks") = SingoloRec.Werks
                            WorkRow.Item("Lgnum") = SingoloRec.Lgnum
                            WorkRow.Item("Lgtyp") = SingoloRec.Lgtyp
                            WorkRow.Item("Lgpla") = SingoloRec.Lgpla
                            WorkRow.Item("Matnr") = SingoloRec.Matnr
                            WorkRow.Item("Charg") = SingoloRec.Charg
                            WorkRow.Item("Verme") = SingoloRec.Verme
                            WorkRow.Item("Gesme") = SingoloRec.Gesme
                            WorkRow.Item("Meins") = SingoloRec.Meins
                            WorkRow.Item("Lenum") = clsSapUtility.FormattaStringaUnitaMagazzino(SingoloRec.Lenum)
                            WorkRow.Item("Sobkz") = SingoloRec.Sobkz
                            WorkRow.Item("Sonum") = SingoloRec.Sonum
                            WorkRow.Item("Bestq") = SingoloRec.Bestq

                            clsWmsJobsGroup.objDataTablePickUMInfo.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_JOBSGROUP_EXE_SUMMARY")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE (WEB SERVICES)
            rfcFunction.SetValue("I_ZNR_WMS_JOBSGRP", inCodiceGruppoMissioni) '>>> CODICE UNIVOCO GRUPPO MISSIONI
            rfcFunction.SetValue("I_USERID", inUserId)
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                outExecutionOk = True 'SETTO FLAG DI ESECUZIONE OK

                rfcTable = rfcFunction.GetTable("E_PICK_LENUM_DEST")


                If (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_FOUNDROWS") > 0) Then


                    'Dim Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO As IRfcStructure = rfcTable.GetStructure("E_ZWMS_JOBS_GROUP_INFO")
                    Dim Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_GROUP_INFO")
                    Dim Out_rfcStruct_PARTNER_AG As IRfcStructure = Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO.GetStructure("PARTNER_AG")
                    Dim Out_rfcStruct_PARTNER_WE As IRfcStructure = Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO.GetStructure("PARTNER_WE")
                    Dim Out_rfcStruct_FORNITORE As IRfcStructure = Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO.GetStructure("FORNITORE")
                    'Dim Out_rfcStruct_VARIANTE_IMBALLO As IRfcStructure = rfcFunction.GetStructure("VARIANTE_IMBALLO")


                    outGroupFoundOk = True '>>> SETTO FLAG DI GRUPPO TROVATO

                    clsWmsJobsGroup.WmsJobsGroupInfo.NumAccorpamenti = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "NUM_ACCORPAMENTI")
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumeroJobsGroup = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZNR_WMS_JOBSGRP")
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumeroOrdinePicking = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZNRPICK")
                    clsWmsJobsGroup.WmsJobsGroupInfo.JobsGroupDescription = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZWMS_JOBSGRP_DESCR")
                    clsWmsJobsGroup.WmsJobsGroupInfo.TipoDocumento = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZDOC")
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumeroDocumento = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "NUM_DOC")
                    clsWmsJobsGroup.WmsJobsGroupInfo.RiferimentoOdA = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "RIF_ODA_BSTKD")
                    clsWmsJobsGroup.WmsJobsGroupInfo.RiferimentoOdV = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "RIF_ODV_IHREZ")
                    clsWmsJobsGroup.WmsJobsGroupInfo.DivisioneDestinazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "WERKS_DEST")
                    clsWmsJobsGroup.WmsJobsGroupInfo.MagLogicoDestinazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "LGORT_DEST")
                    clsWmsJobsGroup.WmsJobsGroupInfo.IdCarrellistaProposto = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZCARR_PROP")
                    clsWmsJobsGroup.WmsJobsGroupInfo.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZCARR_EXEC")
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumTotaleScatole = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "TOT_NUM_SCATOLE")
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumTotaleM2 = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "TOT_NUM_M2")
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumTotalePezzi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "TOT_NUM_PZ")
                    clsWmsJobsGroup.WmsJobsGroupInfo.NumTotaleOthers = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "TOT_NUM_OTHERS")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.KUNNR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "KUNNR")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.NAME1 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "NAME1")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.NAME2 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "NAME2")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.ORT01 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "ORT01")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.PSTLZ = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "PSTLZ")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.REGIO = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "REGIO")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerAGInfo.STRAS = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "STRAS")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.KUNNR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "KUNNR")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.NAME1 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "NAME1")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.NAME2 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "NAME2")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.ORT01 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "ORT01")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.PSTLZ = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "PSTLZ")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.REGIO = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "REGIO")
                    clsWmsJobsGroup.WmsJobsGroupInfo.PartnerWEInfo.STRAS = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "STRAS")
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.LIFNR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "LIFNR")
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.NAME1 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORNITORE, "NAME1")
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.NAME2 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORNITORE, "NAME2")
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.ORT01 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORNITORE, "ORT01")
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.PSTLZ = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORNITORE, "PSTLZ")
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.REGIO = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORNITORE, "REGIO")
                    clsWmsJobsGroup.WmsJobsGroupInfo.FornitoreInfo.STRAS = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORNITORE, "STRAS")

                    clsWmsJobsGroup.WmsJobsGroupInfo.CheckMaterialePronto = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZMATNR_CHK_PRON")

                    If (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZJOBSGR_CLOSED") = "X") Then
                        clsWmsJobsGroup.WmsJobsGroupInfo.JobsGroupClosed = True
                    Else
                        clsWmsJobsGroup.WmsJobsGroupInfo.JobsGroupClosed = False
                    End If
                    If (rfcTable.RowCount > 0) Then
                        For Each rfcRow In rfcTable
                            If (Len(rfcTable.GetElementMetadata("LENUM").ToString) > 0) Then
                                WorkRow = clsWmsJobsGroup.objDataTablePickUMInfo.NewRow()

                                '>>> RIEMPO DATASET CON DATI DELLE PALETTE PRELEVATE NEL JOBGROUP
                                'WorkRow.Item("Werks") = rfcTable.GetElementMetadata("WERKS").ToString
                                'WorkRow.Item("Lgnum") = rfcTable.GetElementMetadata("LGNUM").ToString
                                'WorkRow.Item("Lgtyp") = rfcTable.GetElementMetadata("LGTYP").ToString
                                'WorkRow.Item("Lgpla") = rfcTable.GetElementMetadata("LGPLA").ToString
                                'WorkRow.Item("Matnr") = rfcTable.GetElementMetadata("MATNR").ToString
                                'WorkRow.Item("Charg") = rfcTable.GetElementMetadata("CHARG").ToString
                                'WorkRow.Item("Verme") = rfcTable.GetElementMetadata("VERME").ToString
                                'WorkRow.Item("Gesme") = rfcTable.GetElementMetadata("GESME").ToString
                                'WorkRow.Item("Meins") = rfcTable.GetElementMetadata("MEINS").ToString
                                'WorkRow.Item("Lenum") = clsSapUtility.FormattaStringaUnitaMagazzino(rfcTable.GetElementMetadata("LENUM").ToString)
                                'WorkRow.Item("Sobkz") = rfcTable.GetElementMetadata("SOBKZ").ToString
                                'WorkRow.Item("Sonum") = rfcTable.GetElementMetadata("SONUM").ToString
                                'WorkRow.Item("Bestq") = rfcTable.GetElementMetadata("BESTQ").ToString


                                WorkRow.Item("Werks") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                                WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                                WorkRow.Item("Lgtyp") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                                WorkRow.Item("Lgpla") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                                WorkRow.Item("Matnr") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                                WorkRow.Item("Charg") = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")
                                WorkRow.Item("Verme") = clsSapUtility.GetRFCStructParamToString(rfcRow, "VERME")
                                WorkRow.Item("Gesme") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GESME")
                                WorkRow.Item("Meins") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MEINS")
                                WorkRow.Item("Lenum") = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                                WorkRow.Item("Sobkz") = clsSapUtility.GetRFCStructParamToString(rfcRow, "SOBKZ")
                                WorkRow.Item("Sonum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "SONUM")
                                WorkRow.Item("Bestq") = clsSapUtility.GetRFCStructParamToString(rfcRow, "BESTQ")


                                clsWmsJobsGroup.objDataTablePickUMInfo.Rows.Add(WorkRow) 'aggiungo la riga

                            End If

                        Next

                    End If

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Or (outGroupFoundOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1136, "", " (GET_JOBGRP_SINGLE). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_JOBSGROUP_EXE_SUMMARY = RetCode
            Else
                Call_ZWS_GET_JOBSGROUP_EXE_SUMMARY = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_SET_JOBSGROUP_CLOSED(ByVal inCodiceGruppoMissioni As String, ByVal inGruppoMissioniChiuso As Boolean, ByVal inCheckMaterialExist As Boolean, ByVal inUserId As String, ByVal inLingua As String, ByRef outExecutionOk As Boolean, ByRef outSapJobsGroupInfo As clsDataType.SapJobsGroupInfo, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0

        Dim objWS As New WS_SET_JOBSGROUP_CLOSED.ZWS_SET_JOBSGROUP_CLOSED
        Dim stImportParams As New WS_SET_JOBSGROUP_CLOSED.ZwmsSetJobsgroupClosed
        Dim objWSResponse As New WS_SET_JOBSGROUP_CLOSED.ZwmsSetJobsgroupClosedResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_SET_JOBSGROUP_CLOSED = 1 'INIT AT ERROR

            outExecutionOk = False

            If (Len(inCodiceGruppoMissioni) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1134, "", " JOBS_GROUP_LIST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1092, "", "CodiceGruppoMissioni") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobsgrp = inCodiceGruppoMissioni '>>> CODICE UNIVOCO GRUPPO MISSIONI
            If (inGruppoMissioniChiuso = True) Then
                stImportParams.IZjobsgrClosed = "X"
            Else
                stImportParams.IZjobsgrClosed = ""
            End If
            If (inCheckMaterialExist = True) Then
                stImportParams.ICheckMatnrExist = "X"
            Else
                stImportParams.ICheckMatnrExist = ""
            End If
            stImportParams.IUserid = inUserId
            stImportParams.ISpras = inLingua


            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_set_jobsgroup_closed/" & SapClient & "/zws_set_jobsgroup_closed/zws_set_jobsgroup_closed"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsSetJobsgroupClosed(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then

                If (objWSResponse.EFoundrows > 0) Then
                    outExecutionOk = True 'SETTO FLAG DI ESECUZIONE OK

                    outSapJobsGroupInfo.NumAccorpamenti = objWSResponse.EZwmsJobsGroupInfo.NumAccorpamenti
                    outSapJobsGroupInfo.NumeroJobsGroup = objWSResponse.EZwmsJobsGroupInfo.ZnrWmsJobsgrp
                    outSapJobsGroupInfo.NumeroOrdinePicking = objWSResponse.EZwmsJobsGroupInfo.Znrpick
                    outSapJobsGroupInfo.JobsGroupDescription = objWSResponse.EZwmsJobsGroupInfo.ZwmsJobsgrpDescr
                    outSapJobsGroupInfo.TipoDocumento = objWSResponse.EZwmsJobsGroupInfo.Zdoc
                    outSapJobsGroupInfo.NumeroDocumento = objWSResponse.EZwmsJobsGroupInfo.NumDoc
                    outSapJobsGroupInfo.RiferimentoOdA = objWSResponse.EZwmsJobsGroupInfo.RifOdaBstkd
                    outSapJobsGroupInfo.RiferimentoOdV = objWSResponse.EZwmsJobsGroupInfo.RifOdvIhrez
                    outSapJobsGroupInfo.DivisioneDestinazione = objWSResponse.EZwmsJobsGroupInfo.WerksDest
                    outSapJobsGroupInfo.MagLogicoDestinazione = objWSResponse.EZwmsJobsGroupInfo.LgortDest
                    outSapJobsGroupInfo.IdCarrellistaProposto = objWSResponse.EZwmsJobsGroupInfo.ZcarrProp
                    outSapJobsGroupInfo.IdCarrellistaEsecuzione = objWSResponse.EZwmsJobsGroupInfo.ZcarrExec
                    outSapJobsGroupInfo.NumTotaleScatole = objWSResponse.EZwmsJobsGroupInfo.TotNumScatole
                    outSapJobsGroupInfo.NumTotaleM2 = objWSResponse.EZwmsJobsGroupInfo.TotNumM2
                    outSapJobsGroupInfo.NumTotalePezzi = objWSResponse.EZwmsJobsGroupInfo.TotNumPz
                    outSapJobsGroupInfo.NumTotaleOthers = objWSResponse.EZwmsJobsGroupInfo.TotNumOthers
                    outSapJobsGroupInfo.PartnerAGInfo.KUNNR = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Kunnr
                    outSapJobsGroupInfo.PartnerAGInfo.NAME1 = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Name1
                    outSapJobsGroupInfo.PartnerAGInfo.NAME2 = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Name2
                    outSapJobsGroupInfo.PartnerAGInfo.ORT01 = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Ort01
                    outSapJobsGroupInfo.PartnerAGInfo.PSTLZ = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Pstlz
                    outSapJobsGroupInfo.PartnerAGInfo.REGIO = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Regio
                    outSapJobsGroupInfo.PartnerAGInfo.STRAS = objWSResponse.EZwmsJobsGroupInfo.PartnerAg.Stras
                    outSapJobsGroupInfo.PartnerWEInfo.KUNNR = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Kunnr
                    outSapJobsGroupInfo.PartnerWEInfo.NAME1 = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Name1
                    outSapJobsGroupInfo.PartnerWEInfo.NAME2 = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Name2
                    outSapJobsGroupInfo.PartnerWEInfo.ORT01 = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Ort01
                    outSapJobsGroupInfo.PartnerWEInfo.PSTLZ = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Pstlz
                    outSapJobsGroupInfo.PartnerWEInfo.REGIO = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Regio
                    outSapJobsGroupInfo.PartnerWEInfo.STRAS = objWSResponse.EZwmsJobsGroupInfo.PartnerWe.Stras
                    outSapJobsGroupInfo.FornitoreInfo.LIFNR = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Lifnr
                    outSapJobsGroupInfo.FornitoreInfo.NAME1 = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Name1
                    outSapJobsGroupInfo.FornitoreInfo.NAME2 = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Name2
                    outSapJobsGroupInfo.FornitoreInfo.ORT01 = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Ort01
                    outSapJobsGroupInfo.FornitoreInfo.PSTLZ = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Pstlz
                    outSapJobsGroupInfo.FornitoreInfo.REGIO = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Regio
                    outSapJobsGroupInfo.FornitoreInfo.STRAS = objWSResponse.EZwmsJobsGroupInfo.Fornitore.Stras
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_SET_JOBSGROUP_CLOSED")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_ZNR_WMS_JOBSGRP", inCodiceGruppoMissioni) '>>> CODICE UNIVOCO GRUPPO MISSIONI

            If (inGruppoMissioniChiuso = True) Then
                rfcFunction.SetValue("I_ZJOBSGR_CLOSED", "X")
            Else
                rfcFunction.SetValue("I_ZJOBSGR_CLOSED", "")
            End If
            If (inCheckMaterialExist = True) Then
                rfcFunction.SetValue("I_CHECK_MATNR_EXIST", "X")
            Else
                rfcFunction.SetValue("I_CHECK_MATNR_EXIST", "")
            End If

            rfcFunction.SetValue("I_USERID", inUserId)
            rfcFunction.SetValue("I_SPRAS", inLingua)


            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)

            Dim Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_GROUP_INFO")
            Dim Out_rfcStruct_PARTNER_AG As IRfcStructure = Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO.GetStructure("Partner_Ag")
            Dim Out_rfcStruct_PARTNER_WE As IRfcStructure = Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO.GetStructure("Partner_We")
            Dim Out_rfcStruct_Fornitore As IRfcStructure = Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO.GetStructure("Fornitore")


            If (rfcFunction.GetObject("E_FOUNDROWS") > 0) Then
                outExecutionOk = True '>>> SETTO FLAG DI GRUPPO TROVATO

                outSapJobsGroupInfo.NumAccorpamenti = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "NUM_ACCORPAMENTI")
                outSapJobsGroupInfo.NumeroJobsGroup = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZNR_WMS_JOBSGRP")
                outSapJobsGroupInfo.NumeroOrdinePicking = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZNRPICK")
                outSapJobsGroupInfo.JobsGroupDescription = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZWMS_JOBSGRP_DESCR")
                outSapJobsGroupInfo.TipoDocumento = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZDOC")
                outSapJobsGroupInfo.NumeroDocumento = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "NUM_DOC")
                outSapJobsGroupInfo.RiferimentoOdA = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "RIF_ODA_BSTKD")
                outSapJobsGroupInfo.RiferimentoOdV = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "RIF_ODV_IHREZ")
                outSapJobsGroupInfo.DivisioneDestinazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "WERKS_DEST")
                outSapJobsGroupInfo.MagLogicoDestinazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "LGORT_DEST")
                outSapJobsGroupInfo.IdCarrellistaProposto = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZCARR_PROP")
                outSapJobsGroupInfo.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "ZCARR_EXEC")
                outSapJobsGroupInfo.NumTotaleScatole = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "TOT_NUM_SCATOLE")
                outSapJobsGroupInfo.NumTotaleM2 = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "TOT_NUM_M2")
                outSapJobsGroupInfo.NumTotalePezzi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "TOT_NUM_PZ")
                outSapJobsGroupInfo.NumTotaleOthers = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_E_ZWMS_JOBS_GROUP_INFO, "TOT_NUM_OTHERS")
                outSapJobsGroupInfo.PartnerAGInfo.KUNNR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "KUNNR")
                outSapJobsGroupInfo.PartnerAGInfo.NAME1 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "NAME1")
                outSapJobsGroupInfo.PartnerAGInfo.NAME2 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "NAME2")
                outSapJobsGroupInfo.PartnerAGInfo.ORT01 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "ORT01")
                outSapJobsGroupInfo.PartnerAGInfo.PSTLZ = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "PSTLZ")
                outSapJobsGroupInfo.PartnerAGInfo.REGIO = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "REGIO")
                outSapJobsGroupInfo.PartnerAGInfo.STRAS = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_AG, "STRAS")
                outSapJobsGroupInfo.PartnerWEInfo.KUNNR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "KUNNR")
                outSapJobsGroupInfo.PartnerWEInfo.NAME1 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "NAME1")
                outSapJobsGroupInfo.PartnerWEInfo.NAME2 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "NAME2")
                outSapJobsGroupInfo.PartnerWEInfo.ORT01 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "ORT01")
                outSapJobsGroupInfo.PartnerWEInfo.PSTLZ = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "PSTLZ")
                outSapJobsGroupInfo.PartnerWEInfo.REGIO = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "REGIO")
                outSapJobsGroupInfo.PartnerWEInfo.STRAS = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "STRAS")
                outSapJobsGroupInfo.FornitoreInfo.LIFNR = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_PARTNER_WE, "LIFNR")
                outSapJobsGroupInfo.FornitoreInfo.NAME1 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_Fornitore, "NAME1")
                outSapJobsGroupInfo.FornitoreInfo.NAME2 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_Fornitore, "NAME2")
                outSapJobsGroupInfo.FornitoreInfo.ORT01 = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_Fornitore, "ORT01")
                outSapJobsGroupInfo.FornitoreInfo.PSTLZ = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_Fornitore, "PSTLZ")
                outSapJobsGroupInfo.FornitoreInfo.REGIO = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_Fornitore, "REGIO")
                outSapJobsGroupInfo.FornitoreInfo.STRAS = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_Fornitore, "STRAS")

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1137, "", " (SET_JOBGRP_CLOSE). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_SET_JOBSGROUP_CLOSED = RetCode
            Else
                Call_ZWS_SET_JOBSGROUP_CLOSED = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_SET_JOBSGROUP_UBI_DEST(ByVal inCodiceGruppoMissioni As String, ByRef inSapWmUbicazione As clsDataType.SapWmUbicazione, ByVal inUserId As String, ByVal inLingua As String, ByRef outExecutionOk As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0

        Dim objWS As New WS_SET_JOBSGROUP_UBI_DEST.ZWS_SET_JOBSGROUP_UBI_DEST
        Dim stImportParams As New WS_SET_JOBSGROUP_UBI_DEST.ZwmsSetJobsgroupUbiDest
        Dim objWSResponse As New WS_SET_JOBSGROUP_UBI_DEST.ZwmsSetJobsgroupUbiDestResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_SET_JOBSGROUP_UBI_DEST = 1 'INIT AT ERROR

            outExecutionOk = False

            If (clsUtility.IsStringValid(inCodiceGruppoMissioni, True) = False) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " SET_JOBS_GROUP_UBI_DEST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1092, "", "CodiceGruppoMissioni") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (clsUtility.IsStringValid(inSapWmUbicazione.Ubicazione, True) = False) Then
                RetCode = 20
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " SET_JOBS_GROUP_UBI_DEST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1089, "", "Ubicazione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (clsUtility.IsStringValid(inSapWmUbicazione.TipoMagazzino, True) = False) Then
                RetCode = 30
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " SET_JOBS_GROUP_UBI_DEST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (clsUtility.IsStringValid(inSapWmUbicazione.NumeroMagazzino, True) = False) Then
                RetCode = 40
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " SET_JOBS_GROUP_UBI_DEST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobsgrp = inCodiceGruppoMissioni '>>> CODICE UNIVOCO GRUPPO MISSIONI

            stImportParams.ILgnum = inSapWmUbicazione.NumeroMagazzino
            stImportParams.ILgtyp = inSapWmUbicazione.TipoMagazzino
            stImportParams.ILgpla = inSapWmUbicazione.Ubicazione

            stImportParams.IUseridRf = inUserId
            stImportParams.ISpras = inLingua


            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_set_jobsgroup_ubi_dest/" & SapClient & "/zws_set_jobsgroup_ubi_dest/zws_set_jobsgroup_ubi_dest"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsSetJobsgroupUbiDest(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then

                outExecutionOk = True 'SETTO FLAG DI ESECUZIONE OK
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_SET_JOBSGROUP_UBI_DEST")


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGNUM", inSapWmUbicazione.NumeroMagazzino)
            rfcFunction.SetValue("I_LGTYP", inSapWmUbicazione.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA", inSapWmUbicazione.Ubicazione)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcFunction.GetObject("E_Foundrows") > 0) Then
                outExecutionOk = True 'UNICO CASO DI CHECK OK

                'rfcTable = rfcFunction.GetTable("E_ZWM_OT_INFO_TAB")

                'If (rfcTable.RowCount > 0) Then

                '    For Each rfcRow In rfcTable

                '        WorkRow = outDataTable.NewRow()

                '        WorkRow.Item("LGNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                '        WorkRow.Item("LGTYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                '        WorkRow.Item("LGPLA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")

                '        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga

                '    Next

                'End If

            End If

#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1138, "", " (SET_JOBS_GROUP_UBI_DEST).") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_SET_JOBSGROUP_UBI_DEST = RetCode
            Else
                Call_ZWS_SET_JOBSGROUP_UBI_DEST = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_SET_JOB_CARRELLISTA(ByVal inZnrWmsJobs As String, ByVal inIdCarrellistaProposto As String, ByVal inIdCarrellistaEsecuzione As String, ByVal inIdCarrellistaEsecuzioneFullPallet As String, ByVal inIdCarrellistaEsecuzioneSfusi As String, ByVal inLingua As String, ByRef outSetOk As Boolean, ByRef outDataTable As DataTable, ByRef outZwmsJobsRec As clsDataType.SapWmWmsJob, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkString As String
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New WS_SET_JOB_CARRELLISTA.ZwmsJobsInfo

        Dim objWS As New WS_SET_JOB_CARRELLISTA.ZWS_SET_JOB_CARRELLISTA
        Dim stImportParams As New WS_SET_JOB_CARRELLISTA.ZwmsSetJobCarrellista
        Dim objWSResponse As New WS_SET_JOB_CARRELLISTA.ZwmsSetJobCarrellistaResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_SET_JOB_CARRELLISTA = 1 'INIT AT ERROR

            outSetOk = False

            If (Not outDataTable Is Nothing) Then
                RetCode += clsUtility.InitDataTable(outDataTable)
            End If

            If (Len(inZnrWmsJobs) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1134, "", " JOBS_GROUP_LIST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If Not APPLICAZIONE_WIN32 = "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inZnrWmsJobs
            stImportParams.IZcarrProp = inIdCarrellistaProposto
            stImportParams.IZcarrExec = inIdCarrellistaEsecuzione
            stImportParams.IGetZwmsJobsRec = "X"
            stImportParams.ISpras = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_set_job_carrellista/" & SapClient & "/zws_set_job_carrellista/zws_set_job_carrellista"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsSetJobCarrellista(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EWritedrows > 0) Then
                outSetOk = True 'UNICO CASO DI CHECK OK
                If (outZwmsJobsRec.NrWmsJobs > 0) Then '>>> AGGIORNO LA STRUTTURA SE E' STATA PASSATA
                    SingoloRec = objWSResponse.EZwmsJobsInfoRec
                    If (clsUtility.IsStringValid(SingoloRec.ZwmsJobs.ZnrWmsJobs, True) = True) Then

                        outZwmsJobsRec.NrWmsJobs = SingoloRec.ZwmsJobs.ZnrWmsJobs
                        outZwmsJobsRec.CodiceGruppoMissioni = SingoloRec.ZwmsJobs.ZnrWmsJobsgrp
                        outZwmsJobsRec.CodiceRaggruppoEsecuzione = SingoloRec.ZwmsJobs.ZnrWmsGrpexec
                        outZwmsJobsRec.IdWmsJobStatus = SingoloRec.ZwmsJobs.Idstatus
                        outZwmsJobsRec.IdWmsJobStatusDescription = SingoloRec.Status
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione = SingoloRec.ZwmsJobs.WerksOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.MagazzinoLogico = SingoloRec.ZwmsJobs.LgortOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.CodiceMateriale = SingoloRec.ZwmsJobs.MatnrOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.Partita = SingoloRec.ZwmsJobs.ChargOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.TipoStock = SingoloRec.ZwmsJobs.BestqOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.CdStockSpeciale = SingoloRec.ZwmsJobs.SobkzOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.NumeroStockSpeciale = SingoloRec.ZwmsJobs.SonumOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino = SingoloRec.ZwmsJobs.LgnumOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino = SingoloRec.ZwmsJobs.LgtypOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione = SingoloRec.ZwmsJobs.LgplaOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino = SingoloRec.ZwmsJobs.LenumOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta = SingoloRec.ZwmsJobs.MeinsOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmOriginale = SingoloRec.ZwmsJobs.ZqtapkOri
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMBase = SingoloRec.ZwmsJobs.ZqtaPrelBase
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMBase = SingoloRec.ZwmsJobs.UdmQtaprMeins
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMConsegna = SingoloRec.ZwmsJobs.ZqtaPrelCons
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMConsegna = SingoloRec.ZwmsJobs.UdmQtaprCons
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.DescrizioneMateriale = SingoloRec.Maktg

                        '>>> DATI DESTINAZIONE
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione = SingoloRec.ZwmsJobs.WerksDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.MagazzinoLogico = SingoloRec.ZwmsJobs.LgortDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.CodiceMateriale = SingoloRec.ZwmsJobs.MatnrDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.Partita = SingoloRec.ZwmsJobs.ChargDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.TipoStock = SingoloRec.ZwmsJobs.BestqDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.CdStockSpeciale = SingoloRec.ZwmsJobs.SobkzDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.NumeroStockSpeciale = SingoloRec.ZwmsJobs.SonumDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino = SingoloRec.ZwmsJobs.LgnumDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino = SingoloRec.ZwmsJobs.LgtypDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione = SingoloRec.ZwmsJobs.LgplaDest
                        outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino = SingoloRec.ZwmsJobs.LenumDest

                        outZwmsJobsRec.Sequence = SingoloRec.ZwmsJobs.Sequence
                        outZwmsJobsRec.CurrentStep = SingoloRec.ZwmsJobs.CurrentStep
                        outZwmsJobsRec.NumeroStepTotali = SingoloRec.ZwmsJobs.NumStepsTotal
                        outZwmsJobsRec.DataCreazione = SingoloRec.ZwmsJobs.DataCreazione
                        outZwmsJobsRec.OraCreazione = SingoloRec.ZwmsJobs.OraCreazione
                        outZwmsJobsRec.PickDbNumero = SingoloRec.ZwmsJobs.Znrpick
                        outZwmsJobsRec.PickDbPosizione = SingoloRec.ZwmsJobs.Zpospk
                        outZwmsJobsRec.NumeroOrdineVendita = SingoloRec.ZwmsJobs.Vbeln
                        outZwmsJobsRec.NumeroPosizioneOrdineVendita = SingoloRec.ZwmsJobs.Posnr
                        outZwmsJobsRec.ConsegnaNumero = SingoloRec.ZwmsJobs.NumConsVbelv
                        outZwmsJobsRec.ConsegnaPosizione = SingoloRec.ZwmsJobs.PosConsPosnv
                        outZwmsJobsRec.IdWmsJobType = SingoloRec.ZwmsJobs.IdJobsType
                        outZwmsJobsRec.IdWmsJobTypeDescription = SingoloRec.ZwmsJobsType.DescrJobsType
                        outZwmsJobsRec.TipoDirezioneMissioneKZEAR = SingoloRec.ZwmsJobsType.Kzear
                        outZwmsJobsRec.Priorita = SingoloRec.ZwmsJobs.Priorita
                        outZwmsJobsRec.FlagRilevanteWM = SingoloRec.ZwmsJobs.Zflawm

                        WorkString = SingoloRec.ZwmsJobs.PalletInteri
                        If (WorkString = "X") Then
                            outZwmsJobsRec.FlagPalletInteri = True
                        Else
                            outZwmsJobsRec.FlagPalletInteri = False
                        End If
                        WorkString = SingoloRec.ZwmsJobs.ScatoleIntere
                        If (WorkString = "X") Then
                            outZwmsJobsRec.FlagScatoleIntere = True
                        Else
                            outZwmsJobsRec.FlagScatoleIntere = False
                        End If

                        outZwmsJobsRec.FlagPartitaTassativa = SingoloRec.ZwmsJobs.ChargTassativa
                        outZwmsJobsRec.IdCarrellistaProposto = SingoloRec.ZwmsJobs.ZcarrProp
                        outZwmsJobsRec.IdCarrellistaEsecuzione = SingoloRec.ZwmsJobs.ZcarrExec
                        outZwmsJobsRec.TipoDocumento = SingoloRec.ZwmsJobs.Zdoc
                        outZwmsJobsRec.Memo = SingoloRec.ZwmsJobs.Memo
                        outZwmsJobsRec.DistintaDiCarico = SingoloRec.ZwmsJobs.ZzNdis
                        outZwmsJobsRec.InfoPrelievo = SingoloRec.ZwmsJobs.InfoPrelievo

                        '>>> GESTIONE VARIANTE IMBALLO
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.CodiceImballo = SingoloRec.VarianteImballo.Imballo
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.PezziPerScatola = SingoloRec.VarianteImballo.PzXSc
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.ScatolePerPallet = SingoloRec.VarianteImballo.ScXPal
                        outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.M2PerPallet = SingoloRec.VarianteImballo.M2XPal

                        If (Not outDataTable Is Nothing) Then
                            WorkRow = outDataTable.NewRow()
                            '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                            If (SingoloRec.ZwmsJobs.Idstatus >= clsWmsJob.cstIdJobStatus_Verificato) Then
                                WorkRow.Item("GRID_EXECUTED") = "*"
                            ElseIf (SingoloRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Cancellato) Then
                                WorkRow.Item("GRID_EXECUTED") = "D"
                            ElseIf (SingoloRec.ZwmsJobs.Idstatus = clsWmsJob.cstIdJobStatus_Sospeso) Then
                                WorkRow.Item("GRID_EXECUTED") = "S"
                            Else
                                WorkRow.Item("GRID_EXECUTED") = ""
                            End If
                            WorkRow.Item("ZNR_WMS_JOBS") = SingoloRec.ZwmsJobs.ZnrWmsJobs
                            WorkRow.Item("ZNR_WMS_JOBSGRP") = SingoloRec.ZwmsJobs.ZnrWmsJobsgrp
                            WorkRow.Item("ZNR_WMS_GRPEXEC") = SingoloRec.ZwmsJobs.ZnrWmsGrpexec
                            WorkRow.Item("IDSTATUS") = SingoloRec.ZwmsJobs.Idstatus
                            WorkRow.Item("STATUS") = SingoloRec.Status
                            WorkRow.Item("STATUS_DESCR") = SingoloRec.StatusDescr
                            WorkRow.Item("MAKTG") = SingoloRec.Maktg
                            WorkRow.Item("WERKS_ORI") = SingoloRec.ZwmsJobs.WerksOri
                            WorkRow.Item("LGORT_ORI") = SingoloRec.ZwmsJobs.LgortOri
                            WorkRow.Item("MATNR_ORI") = SingoloRec.ZwmsJobs.MatnrOri
                            WorkRow.Item("CHARG_ORI") = SingoloRec.ZwmsJobs.ChargOri
                            WorkRow.Item("BESTQ_ORI") = SingoloRec.ZwmsJobs.BestqOri
                            WorkRow.Item("SOBKZ_ORI") = SingoloRec.ZwmsJobs.SobkzOri
                            WorkRow.Item("SONUM_ORI") = SingoloRec.ZwmsJobs.SonumOri
                            WorkRow.Item("LGNUM_ORI") = SingoloRec.ZwmsJobs.LgnumOri
                            WorkRow.Item("LGTYP_ORI") = SingoloRec.ZwmsJobs.LgtypOri
                            WorkRow.Item("LGPLA_ORI") = SingoloRec.ZwmsJobs.LgplaOri
                            WorkRow.Item("LENUM_ORI") = SingoloRec.ZwmsJobs.LenumOri
                            WorkRow.Item("MEINS_ORI") = SingoloRec.ZwmsJobs.MeinsOri
                            WorkRow.Item("ZQTAPK_ORI") = SingoloRec.ZwmsJobs.ZqtapkOri
                            WorkRow.Item("ZQTA_PREL_BASE") = SingoloRec.ZwmsJobs.ZqtaPrelBase
                            WorkRow.Item("UDM_QTAPR_MEINS") = SingoloRec.ZwmsJobs.UdmQtaprMeins
                            WorkRow.Item("ZQTA_PREL_CONS") = SingoloRec.ZwmsJobs.ZqtaPrelCons
                            WorkRow.Item("UDM_QTAPR_CONS") = SingoloRec.ZwmsJobs.UdmQtaprCons
                            WorkRow.Item("WERKS_DEST") = SingoloRec.ZwmsJobs.WerksDest
                            WorkRow.Item("LGORT_DEST") = SingoloRec.ZwmsJobs.LgortDest
                            WorkRow.Item("MATNR_DEST") = SingoloRec.ZwmsJobs.MatnrDest
                            WorkRow.Item("CHARG_DEST") = SingoloRec.ZwmsJobs.ChargDest
                            WorkRow.Item("BESTQ_DEST") = SingoloRec.ZwmsJobs.BestqDest
                            WorkRow.Item("SOBKZ_DEST") = SingoloRec.ZwmsJobs.SobkzDest
                            WorkRow.Item("SONUM_DEST") = SingoloRec.ZwmsJobs.SonumDest
                            WorkRow.Item("LGNUM_DEST") = SingoloRec.ZwmsJobs.LgnumDest
                            WorkRow.Item("LGTYP_DEST") = SingoloRec.ZwmsJobs.LgtypDest
                            WorkRow.Item("LGPLA_DEST") = SingoloRec.ZwmsJobs.LgplaDest
                            WorkRow.Item("LENUM_DEST") = SingoloRec.ZwmsJobs.LenumDest
                            WorkRow.Item("SEQUENCE") = SingoloRec.ZwmsJobs.Sequence
                            WorkRow.Item("CURRENT_STEP") = SingoloRec.ZwmsJobs.CurrentStep
                            WorkRow.Item("NUM_STEPS_TOTAL") = SingoloRec.ZwmsJobs.NumStepsTotal
                            WorkRow.Item("DATA_CREAZIONE") = SingoloRec.ZwmsJobs.DataCreazione
                            WorkRow.Item("ORA_CREAZIONE") = SingoloRec.ZwmsJobs.OraCreazione
                            WorkRow.Item("ZNRPICK") = SingoloRec.ZwmsJobs.Znrpick
                            WorkRow.Item("ZPOSPK") = SingoloRec.ZwmsJobs.Zpospk
                            WorkRow.Item("VBELN") = SingoloRec.ZwmsJobs.Vbeln
                            WorkRow.Item("POSNR") = SingoloRec.ZwmsJobs.Posnr
                            WorkRow.Item("NUM_CONS_VBELV") = SingoloRec.ZwmsJobs.NumConsVbelv
                            WorkRow.Item("POS_CONS_POSNV") = SingoloRec.ZwmsJobs.PosConsPosnv
                            WorkRow.Item("ID_JOBS_TYPE") = SingoloRec.ZwmsJobs.IdJobsType
                            WorkRow.Item("DESCR_JOBS_TYPE") = SingoloRec.ZwmsJobsType.DescrJobsType
                            WorkRow.Item("JOBS_TYPE_KZEAR") = SingoloRec.ZwmsJobsType.Kzear
                            WorkRow.Item("PRIORITA") = SingoloRec.ZwmsJobs.Priorita
                            WorkRow.Item("URGENTE") = SingoloRec.ZwmsJobs.Urgente
                            WorkRow.Item("ZFLAWM") = SingoloRec.ZwmsJobs.Zflawm
                            WorkRow.Item("PALLET_INTERI") = SingoloRec.ZwmsJobs.PalletInteri
                            WorkRow.Item("SCATOLE_INTERE") = SingoloRec.ZwmsJobs.ScatoleIntere
                            WorkRow.Item("CHARG_TASSATIVA") = SingoloRec.ZwmsJobs.ChargTassativa
                            WorkRow.Item("ZCARR_PROP") = SingoloRec.ZwmsJobs.ZcarrProp
                            WorkRow.Item("ZCARR_EXEC") = SingoloRec.ZwmsJobs.ZcarrExec
                            WorkRow.Item("ZDOC") = SingoloRec.ZwmsJobs.Zdoc
                            WorkRow.Item("MEMO") = SingoloRec.ZwmsJobs.Memo
                            WorkRow.Item("ZZ_NDIS") = SingoloRec.ZwmsJobs.ZzNdis
                            WorkRow.Item("INFO_PRELIEVO") = SingoloRec.ZwmsJobs.InfoPrelievo

                            WorkRow.Item("IMBALLO") = SingoloRec.VarianteImballo.Imballo
                            WorkRow.Item("PZ_X_SC") = SingoloRec.VarianteImballo.PzXSc
                            WorkRow.Item("SC_X_PAL") = SingoloRec.VarianteImballo.ScXPal
                            WorkRow.Item("M2_X_PAL") = SingoloRec.VarianteImballo.M2XPal

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    End If
                End If
            End If

#Else


            'SAP RFC
            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcRow As IRfcStructure
            
            
            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_SET_JOB_CARRELLISTA")


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inZnrWmsJobs)
            rfcFunction.SetValue("I_ZCARR_PROP", inIdCarrellistaProposto)
            rfcFunction.SetValue("I_ZCARR_EXEC", inIdCarrellistaEsecuzione)
            rfcFunction.SetValue("I_ZCARR_EXEC_FL", inIdCarrellistaEsecuzioneFullPallet)
            rfcFunction.SetValue("I_ZCARR_EXEC_SF", inIdCarrellistaEsecuzioneSfusi)
            rfcFunction.SetValue("I_GET_ZWMS_JOBS_REC", "X")
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)

            Dim Out_rfcTable_ZWMS_JOBS As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_REC")

            If (rfcFunction.Item("E_Success").GetString = "Y") And (rfcFunction.Item("E_WRITEDROWS").GetLong > 0) Then
                outSetOk = True 'UNICO CASO DI CHECK OK

                outZwmsJobsRec.IdCarrellistaProposto = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZCARR_PROP")
                outZwmsJobsRec.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZCARR_EXEC")
                outZwmsJobsRec.IdCarrellistaEsecuzioneFullPallet = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZCARR_EXEC_FL")
                outZwmsJobsRec.IdCarrellistaEsecuzioneSfusi = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZCARR_EXEC_SF")
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outSetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EWritedrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1139, "", " (GET_JOB_SINGLE). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_SET_JOB_CARRELLISTA = RetCode
            Else
                Call_ZWS_SET_JOB_CARRELLISTA = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_SET_JOB_STEP_FORCED_NEXT(ByVal inZnrWmsJobs As String, ByVal inLingua As String, ByRef outExecutionOk As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0

        Dim objWS As New WS_SET_JOB_STEP_FORCED_NEXT.ZWS_SET_JOB_STEP_FORCED_NEXT
        Dim stImportParams As New WS_SET_JOB_STEP_FORCED_NEXT.ZwmsSetJobStepForcedNext
        Dim objWSResponse As New WS_SET_JOB_STEP_FORCED_NEXT.ZwmsSetJobStepForcedNextResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_SET_JOB_STEP_FORCED_NEXT = 1 'INIT AT ERROR

            outExecutionOk = False

            If (Len(inZnrWmsJobs) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1140, "", " FORCE NEXT STEP. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ inZnrWmsJobs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inZnrWmsJobs '>>> "PICKING" o "ENTRATA_MERCE"
            stImportParams.IGetZwmsJobsRec = " "
            stImportParams.ISpras = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_set_job_step_forced_next/" & SapClient & "/zws_set_job_step_forced_next/zws_set_job_step_forced_next"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsSetJobStepForcedNext(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outExecutionOk = True 'UNICO CASO DI CHECK OK
            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(912, "", "Errore in") & clsAppTranslation.GetSingleParameterValue(1141, "", " (JOB_STEP_FORCED_NEXT). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_SET_JOB_STEP_FORCED_NEXT = RetCode
            Else
                Call_ZWS_SET_JOB_STEP_FORCED_NEXT = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_SET_JOB_STATUS_FORCED_END(ByVal inZnrWmsJobs As String, ByVal inZeroPick As Boolean, ByVal inUbicazioneInfo As clsDataType.SapWmUbicazione, ByVal inLingua As String, ByRef outExecutionOk As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0

        Dim objWS As New WS_SET_JOB_STATUS_FORCED_END.ZWS_SET_JOB_STATUS_FORCED_END
        Dim stImportParams As New WS_SET_JOB_STATUS_FORCED_END.ZwmsSetJobStatusForcedEnd
        Dim objWSResponse As New WS_SET_JOB_STATUS_FORCED_END.ZwmsSetJobStatusForcedEndResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_SET_JOB_STATUS_FORCED_END = 1 'INIT AT ERROR

            outExecutionOk = False

            If (Len(inZnrWmsJobs) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1142, "", " FORCE END JOB. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ inZnrWmsJobs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If Not APPLICAZIONE_WIN32 = "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobs = inZnrWmsJobs '>>> "PICKING" o "ENTRATA_MERCE"
            stImportParams.IGetZwmsJobsRec = " "
            stImportParams.ISpras = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_set_job_status_forced_end/" & SapClient & "/zws_set_job_status_forced_end/zws_set_job_status_forced_end"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsSetJobStatusForcedEnd(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outExecutionOk = True 'UNICO CASO DI CHECK OK
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_SET_JOB_STATUS_FORCED_END")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inZnrWmsJobs) '>>> "PICKING" o "ENTRATA_MERCE"
            If (inZeroPick = True) Then
                rfcFunction.SetValue("I_ZERO_PICK", "X")
                If (clsUtility.IsStringValid(inUbicazioneInfo.TipoMagazzino, True) = True) Then
                    rfcFunction.SetValue("I_LGTYP_ZEROPICK", inUbicazioneInfo.TipoMagazzino)
                End If
                If (clsUtility.IsStringValid(inUbicazioneInfo.Ubicazione, True) = True) Then
                    rfcFunction.SetValue("I_LGPLA_ZEROPICK", inUbicazioneInfo.Ubicazione)
                End If
            Else
                rfcFunction.SetValue("I_ZERO_PICK", "")
            End If
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_GET_ZWMS_JOBS_REC", "")
            rfcFunction.SetValue("I_SPRAS", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outExecutionOk = True 'UNICO CASO DI CHECK OK
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outExecutionOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(912, "", "Errore in") & clsAppTranslation.GetSingleParameterValue(1143, "", " (JOB_STATUS_FORCED_END). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_SET_JOB_STATUS_FORCED_END = RetCode
            Else
                Call_ZWS_SET_JOB_STATUS_FORCED_END = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_PRODORD_GET_DETAIL(ByRef inOrdineProduzione As clsDataType.SapOrdineProduzione, ByVal inCodiceMatComponente As String, ByVal inQtaCodiceMatComponente As Double, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outCheckMatComponenteOk As Boolean, ByRef outQtàCheckMatComponenteOk As Boolean, ByRef outOrdineProduzione As clsDataType.SapOrdineProduzione, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_PRODORD_GET_DETAIL.ZWS_MB_PRODORD_GET_DETAIL
        Dim stImportParams As New WS_MB_PRODORD_GET_DETAIL.ZwmMbProdordGetDetail
        Dim objWSResponse As New WS_MB_PRODORD_GET_DETAIL.ZwmMbProdordGetDetailResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_PRODORD_GET_DETAIL = 1 'INIT AT ERROR

            outCheckOk = False 'init
            outCheckMatComponenteOk = False 'init
            outQtàCheckMatComponenteOk = False 'init

            If (Len(inOrdineProduzione.NumeroOrdineProduzione) <= 0) Then
                RetCode = 100
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1145, "", " PRODORD_GET_DETAIL. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1088, "", "NumeroOrdineProduzione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            '**************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IAufnr = inOrdineProduzione.NumeroOrdineProduzione
            stImportParams.IMatnrToCheck = inCodiceMatComponente
            stImportParams.IMatnrToCheckQty = inQtaCodiceMatComponente
            stImportParams.IMatnrToCheckQtySpecified = True
            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_prodord_get_detail/" & SapClient & "/zws_mb_prodord_get_detail/zws_mb_prodord_get_detail"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO UBICAZIONE
            objWSResponse = objWS.ZwmMbProdordGetDetail(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) And (objWSResponse.ECheckOk = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK
                If (Len(inCodiceMatComponente) > 0) Then
                    If (objWSResponse.ECheckMatnrOk = "X") Then
                        outCheckMatComponenteOk = True
                        If (inQtaCodiceMatComponente > 0) Then
                            'DEVO VERIFICARE ANCHE IL CHECK DELLA QUANTITA
                            If (objWSResponse.EMatnrCompQtyExc <> "X") Then
                                outQtàCheckMatComponenteOk = True
                            End If
                        End If
                    End If
                End If
                'RITORNO DATI DELL'ODP TROVATO
                outOrdineProduzione.NumeroOrdineProduzione = objWSResponse.EHeader.OrderNumber
                outOrdineProduzione.CodiceMateriale = objWSResponse.EHeader.Material
                outOrdineProduzione.QuantitaDaProdurre = objWSResponse.EHeader.TargetQuantity
                outOrdineProduzione.QuantitaConsegnata = objWSResponse.EHeader.ConfirmedQuantity
                outOrdineProduzione.QuantitaScarto = objWSResponse.EHeader.Scrap
                outOrdineProduzione.UnitaDiMisura = objWSResponse.EHeader.Unit
                outOrdineProduzione.RifNumeroOrdineCliente = objWSResponse.EFoundCaufv.Kdauf
                outOrdineProduzione.RifPosizioneOrdineCliente = objWSResponse.EFoundCaufv.Kdpos
            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1068, "", "OdP non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_PRODORD_GET_DETAIL = RetCode 'CASO DI ERRORE
            Else
                Call_ZWS_MB_PRODORD_GET_DETAIL = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_MATERIAL_DISPONIBILITA(ByVal inFilterCodiceMateriale As String, ByVal inFilterDivisione As String, ByVal inFilterPartitaMateriale As String, ByVal inFilterMagazzinoLogico As String, ByVal inFilterSKU As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New WS_MB_GET_MATERIAL_DISPONIBIL.Ze1Ss00004Deep
        Dim rfcSingoloRec As New rfcZe1Ss00004Cons

        Dim objWS As New WS_MB_GET_MATERIAL_DISPONIBIL.ZWS_MB_GET_MATERIAL_DISPONIBIL
        Dim stImportParams As New WS_MB_GET_MATERIAL_DISPONIBIL.ZwmMbGetDisponibilita
        Dim objWSResponse As New WS_MB_GET_MATERIAL_DISPONIBIL.ZwmMbGetDisponibilitaResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_MATERIAL_DISPONIBILITA = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


#If Not APPLICAZIONE_WIN32 = "SI" Then

            If (Len(inFilterCodiceMateriale) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1146, "", " GET_DISPONIBILITA. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Codice Materiale] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IWerks = inFilterDivisione
            stImportParams.IMatnr = inFilterCodiceMateriale
            stImportParams.ICharg = inFilterPartitaMateriale
            stImportParams.ILgort = inFilterMagazzinoLogico
            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_disponibilita/" & SapClient & "/zws_mb_get_disponibilita/zws_mb_get_disponibilita"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA

            Dim ETabDisponibilita() As WS_MB_GET_MATERIAL_DISPONIBIL.Ze1Ss00004Deep

            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmMbGetDisponibilita(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.ETabDisponibilita.Length > 0) Then
                    For Index = 0 To objWSResponse.ETabDisponibilita.Length - 1
                        SingoloRec = objWSResponse.ETabDisponibilita(Index)
                        If (Len(SingoloRec.Ze1Ss00004Cons.Matnr) > 0) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("WERKS") = SingoloRec.Ze1Ss00004Cons.Werks
                            WorkRow.Item("MATNR") = clsSapUtility.FormattaStringaCodiceMateriale(SingoloRec.Ze1Ss00004Cons.Matnr)
                            WorkRow.Item("CHARG") = SingoloRec.Ze1Ss00004Cons.Charg
                            WorkRow.Item("LGORT") = SingoloRec.Ze1Ss00004Cons.Lgort
                            WorkRow.Item("VBMNC") = SingoloRec.Ze1Ss00004Cons.Vbmnc  '>>> QTA IMPEGNATA
                            WorkRow.Item("DISPO") = SingoloRec.Ze1Ss00004Cons.Dispo  '>>> QTA DISPONIBILE
                            WorkRow.Item("SCELTA") = SingoloRec.Ze1Ss00004Cons.Scelta
                            WorkRow.Item("UTA_VIS") = SingoloRec.Ze1Ss00004Cons.UtaVis
                            WorkRow.Item("NOTA") = SingoloRec.Ze1Ss00004Cons.Nota

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim Table As New DataTable

            Dim ZE1_SS_00004 As IRfcStructure
            Dim ZE1_SS_00004_CONS As IRfcStructure

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWS_MB_GET_DISPONIBILITA")


            If (Len(inFilterCodiceMateriale) <= 0) And (Len(inFilterSKU) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1146, "", " GET_DISPONIBILITA. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Codice Materiale] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_WERKS", inFilterDivisione)
            rfcFunction.SetValue("I_MATNR", inFilterCodiceMateriale)
            rfcFunction.SetValue("I_CHARG", inFilterPartitaMateriale)
            rfcFunction.SetValue("I_LGORT", inFilterMagazzinoLogico)
            rfcFunction.SetValue("I_LGNUM", clsUser.GetUserNumeroMagazzinoToUse)

            rfcFunction.SetValue("I_SKU", inFilterSKU)

            rfcFunction.SetValue("I_Language", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_Tab_Disponibilita")


                'If (rfcTable.ElementCount > 0) Then
                If (rfcTable.RowCount > 0) Then

                    For Each rfcRow In rfcTable


                        ZE1_SS_00004 = rfcRow.Item(0).GetStructure

                        ZE1_SS_00004_CONS = rfcRow.Item(1).GetStructure


                        WorkRow = outDataTable.NewRow()


                        WorkRow.Item("WERKS") = clsSapUtility.GetRFCStructParamToString(ZE1_SS_00004, "Werks")
                        WorkRow.Item("MATNR") = clsSapUtility.FormattaStringaCodiceMateriale(clsSapUtility.GetRFCStructParamToString(ZE1_SS_00004, "Matnr"))
                        WorkRow.Item("CHARG") = clsSapUtility.GetRFCStructParamToString(ZE1_SS_00004, "Charg")
                        WorkRow.Item("LGORT") = clsSapUtility.GetRFCStructParamToString(ZE1_SS_00004, "Lgort")
                        WorkRow.Item("VBMNC") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004, "Vbmnc")  '>>> QTA IMPEGNATA
                        'WorkRow.Item("DISPO") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004, "Dispo")  '>>> QTA DISPONIBILE
                        WorkRow.Item("SCELTA") = clsSapUtility.GetRFCStructParamToString(ZE1_SS_00004, "Scelta")
                        WorkRow.Item("UTA_VIS") = clsSapUtility.GetRFCStructParamToString(ZE1_SS_00004, "Uta_Vis")
                        WorkRow.Item("NOTA") = clsSapUtility.GetRFCStructParamToString(ZE1_SS_00004, "Nota")



                        WorkRow.Item("CLABS_FULL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CLABS_FULL")
                        WorkRow.Item("CLABS_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CLABS_PARTIAL")
                        WorkRow.Item("CLABS_SF") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CLABS_SF")

                        WorkRow.Item("CINSM_FULL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CINSM_FULL")
                        WorkRow.Item("CINSM_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CINSM_PARTIAL")
                        WorkRow.Item("CINSM_SF") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CINSM_SF")

                        WorkRow.Item("CSPEM_FULL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CSPEM_FULL")
                        WorkRow.Item("CSPEM_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CSPEM_PARTIAL")
                        WorkRow.Item("CSPEM_SF") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CSPEM_SF")

                        WorkRow.Item("BDMNG_FULL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "BDMNG_FULL")
                        WorkRow.Item("BDMNG_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "BDMNG_PARTIAL")
                        WorkRow.Item("BDMNG_SF") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "BDMNG_SF")

                        WorkRow.Item("VBMNC_FULL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "VBMNC_FULL")
                        WorkRow.Item("VBMNC_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "VBMNC_PARTIAL")
                        WorkRow.Item("VBMNC_SF") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "VBMNC_SF")

                        WorkRow.Item("VBMNJ_FULL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "VBMNJ_FULL")
                        WorkRow.Item("VBMNJ_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "VBMNJ_PARTIAL")
                        WorkRow.Item("VBMNJ_SF") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "VBMNJ_SF")

                        WorkRow.Item("DISPO_FULL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "DISPO_FULL")
                        WorkRow.Item("DISPO_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "DISPO_PARTIAL")
                        WorkRow.Item("DISPO_SF") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "DISPO_SF")



                        'WorkRow.Item("CLABS") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004, "CLABS")
                        'WorkRow.Item("CINSM") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004, "CINSM")
                        'WorkRow.Item("BDMNG") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004, "BDMNG")
                        'WorkRow.Item("VBMNJ") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004, "VBMNJ")
                        'WorkRow.Item("CSPEM") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004, "CSPEM")
                        WorkRow.Item("CLABS_E") = clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004, "CLABS_E")


                        WorkRow.Item("CLABS") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CLABS_FULL")))) + _
                                 " " + "PL" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CLABS_PARTIAL")))) + _
                                 " " + "CT" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CLABS_SF")))) + _
                                 " " + "PZ"

                        WorkRow.Item("CINSM") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CINSM_FULL")))) + _
                                 " " + "PL" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CINSM_PARTIAL")))) + _
                                 " " + "CT" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CINSM_SF")))) + _
                                 " " + "PZ"

                        WorkRow.Item("CSPEM") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CSPEM_FULL")))) + _
                                 "PL" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CSPEM_PARTIAL")))) + _
                                 "CT" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "CSPEM_SF")))) + _
                                 "PZ"

                        WorkRow.Item("BDMNG") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "BDMNG_FULL")))) + _
                                 " " + "PL" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "BDMNG_PARTIAL")))) + _
                                 " " + "CT" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "BDMNG_SF")))) + _
                                 " " + "PZ"

                        WorkRow.Item("VBMNJ") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "VBMNJ_FULL")))) + _
                                 " " + "PL" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "VBMNJ_PARTIAL")))) + _
                                 " " + "CT" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "VBMNJ_SF")))) + _
                                 " " + "PZ"

                        WorkRow.Item("CLABS_E") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "CLABS_E_FULL")))) + _
                                 " " + "PL" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "CLABS_E_PARTIAL")))) + _
                                 " " + "CT" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "CLABS_E_SF")))) + _
                                 " " + "PZ"

                        WorkRow.Item("DISPO") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "DISPO_FULL")))) + _
                                 " " + "PL" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "DISPO_PARTIAL")))) + _
                                 " " + "CT" + "/" + _
                                 Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(ZE1_SS_00004_CONS, "DISPO_SF")))) + _
                                 " " + "PZ"



                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga


                    Next

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1147, "", " (GET_MAT_DISPO). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_GET_MATERIAL_DISPONIBILITA = RetCode
            Else
                Call_ZWS_MB_GET_MATERIAL_DISPONIBILITA = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_MATERIAL_LIST(ByVal inFilterCodiceMateriale As String, ByVal inFilterDivisione As String, ByVal inFilterPartitaMateriale As String, ByVal inFilterNrMagazzino As String, ByVal inFilterSKU As String, ByVal inMaxNumRowReturned As Long, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New StrctSapGetMaterialList

        Dim objWS As New WS_MB_GET_MATERIAL_LIST.ZWS_MB_GET_MATERIAL_LIST
        Dim stImportParams As New WS_MB_GET_MATERIAL_LIST.ZwmMbGetMaterialList
        Dim objWSResponse As New WS_MB_GET_MATERIAL_LIST.ZwmMbGetMaterialListResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_MATERIAL_LIST = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            'If (Len(inFilterCodiceMateriale) <= 0) Then
            '    RetCode = 10
            '    outSapFunctionError.ERROR_CODE = RetCode
            '    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1148, "", " GET_MATERIAL_LIST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Codice Materiale] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
            '    If (inShowMessageBox = True) Then
            '        MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
            '    End If
            '    Exit Function
            'End If

            If (Len(inFilterDivisione) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1148, "", " GET_MATERIAL_LIST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1081, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IWerks = inFilterDivisione
            stImportParams.IMatnr = inFilterCodiceMateriale
            stImportParams.ICharg = inFilterPartitaMateriale
            stImportParams.ILanguage = inLingua


            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_material_list/" & SapClient & "/zws_mb_get_material_list/zws_mb_get_material_list"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmMbGetMaterialList(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.EFoundData.Length > 0) Then
                    For Index = 0 To objWSResponse.EFoundData.Length - 1
                        SingoloRec.GetMaterialList_Rec = objWSResponse.EFoundData(Index)
                        If (Len(SingoloRec.GetMaterialList_Rec.Tmara.Matnr) > 0) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("Werks") = SingoloRec.GetMaterialList_Rec.Tmarc.Werks
                            WorkRow.Item("Matnr") = SingoloRec.GetMaterialList_Rec.Tmara.Matnr
                            WorkRow.Item("MAKTG") = SingoloRec.GetMaterialList_Rec.Tmakt.Maktg
                            WorkRow.Item("MTART") = SingoloRec.GetMaterialList_Rec.Tmara.Mtart
                            WorkRow.Item("MATKL") = SingoloRec.GetMaterialList_Rec.Tmara.Matkl
                            WorkRow.Item("MEINS") = SingoloRec.GetMaterialList_Rec.Tmara.Meins
                            WorkRow.Item("EKGRP") = SingoloRec.GetMaterialList_Rec.Tmarc.Ekgrp
                            WorkRow.Item("GEWEI") = SingoloRec.GetMaterialList_Rec.Tmara.Gewei 'Unità di peso
                            WorkRow.Item("BRGEW") = SingoloRec.GetMaterialList_Rec.Tmara.Brgew  'Peso lordo UDM BASE
                            WorkRow.Item("NTGEW") = SingoloRec.GetMaterialList_Rec.Tmara.Ntgew  'Peso netto UDM BASE

                            Try
                                WorkRow.Item("PESO_UDM_CONSEGNA") = SingoloRec.GetMaterialList_Rec.PesoUdmConsegna
                                WorkRow.Item("PESO_UDM_PALLET") = SingoloRec.GetMaterialList_Rec.PesoUdmPallet
                                WorkRow.Item("VOLUM") = SingoloRec.GetMaterialList_Rec.Tmara.Volum  'Volume
                                WorkRow.Item("VOLEH") = SingoloRec.GetMaterialList_Rec.Tmara.Voleh  'Unità di volume
                                WorkRow.Item("PZ_X_SC") = SingoloRec.GetMaterialList_Rec.VarianteImballo.PzXSc
                                WorkRow.Item("SC_X_PAL") = SingoloRec.GetMaterialList_Rec.VarianteImballo.ScXPal
                                WorkRow.Item("ETILE_UMBASE_UMCONSEGNA") = SingoloRec.GetMaterialList_Rec.ClassificazioneZ01.EtileUmbaseUmconsegna
                                WorkRow.Item("M2_X_PAL") = SingoloRec.GetMaterialList_Rec.VarianteImballo.M2XPal
                                WorkRow.Item("EAN11") = SingoloRec.GetMaterialList_Rec.MeanConsegna.Ean11
                                WorkRow.Item("LABOR") = SingoloRec.GetMaterialList_Rec.Tmara.Labor
                                WorkRow.Item("T024X") = SingoloRec.GetMaterialList_Rec.T024x.Lbtxt    'FORMATO
                                WorkRow.Item("MVGR5") = SingoloRec.GetMaterialList_Rec.Tvm5t.Mvgr5
                                WorkRow.Item("BEZEI") = SingoloRec.GetMaterialList_Rec.Tvm5t.Bezei
                                WorkRow.Item("Z_ORG_COMM_ETICH") = SingoloRec.GetMaterialList_Rec.Class001DatiProd.ZOrgCommEtich
                            Catch ex As Exception

                            End Try

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure


            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GET_MATERIAL_LIST")


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_Werks", inFilterDivisione)
            rfcFunction.SetValue("I_Matnr", inFilterCodiceMateriale)
            rfcFunction.SetValue("I_Charg", inFilterPartitaMateriale)
            rfcFunction.SetValue("I_Lgnum", inFilterNrMagazzino)

            rfcFunction.SetValue("I_SKU", inFilterSKU)

            If (inMaxNumRowReturned > 0) Then
                rfcFunction.SetValue("I_MAX_RET_ROWS", inMaxNumRowReturned)
            End If

            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcFunction.GetObject("E_Foundrows") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_FOUND_DATA")
                Dim Out_rfcStruct_TMARA As IRfcStructure = rfcTable.GetStructure("TMARA")
                'Dim Out_rfcStruct_TMARC As IRfcStructure = rfcTable.GetStructure("TMARC")
                'Dim Out_rfcStruct_TMAKT As IRfcStructure = rfcTable.GetStructure("TMAKT")
                'Dim Out_rfcStruct_TVM5T As IRfcStructure = rfcTable.GetStructure("TVM5T")
                'Dim Out_rfcStruct_T024X As IRfcStructure = rfcTable.GetStructure("T024X")
                'Dim Out_rfcStruct_MEAN_CONSEGNA As IRfcStructure = rfcTable.GetStructure("MEAN_CONSEGNA")
                'Dim Out_rfcStruct_VARIANTE_IMBALLO As IRfcStructure = rfcTable.GetStructure("VARIANTE_IMBALLO")
                'Dim Out_rfcStruct_CLASSIFICAZIONE_Z01 As IRfcStructure = rfcTable.GetStructure("CLASSIFICAZIONE_Z01")
                'Dim Out_rfcStruct_CLASS_001_DATI_PROD As IRfcStructure = rfcTable.GetStructure("CLASS_001_DATI_PROD")
                'Dim Out_rfcStruct_TMLGN As IRfcStructure = rfcTable.GetStructure("TMLGN")


                'If (rfcTable.ElementCount > 0) Then
                If (rfcTable.RowCount > 0) Then

                    If (Len(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMARA, "MATNR")) > 0) Then

                        For Each rfcRow In rfcTable


                            Dim Out_rfcStruct_TMARC As IRfcStructure = rfcRow.GetStructure("TMARC")
                            Dim Out_rfcStruct_TMAKT As IRfcStructure = rfcRow.GetStructure("TMAKT")
                            Dim Out_rfcStruct_TVM5T As IRfcStructure = rfcRow.GetStructure("TVM5T")
                            Dim Out_rfcStruct_T024X As IRfcStructure = rfcRow.GetStructure("T024X")
                            Dim Out_rfcStruct_MEAN_CONSEGNA As IRfcStructure = rfcRow.GetStructure("MEAN_CONSEGNA")
                            Dim Out_rfcStruct_VARIANTE_IMBALLO As IRfcStructure = rfcRow.GetStructure("VARIANTE_IMBALLO")
                            Dim Out_rfcStruct_CLASSIFICAZIONE_Z01 As IRfcStructure = rfcRow.GetStructure("CLASSIFICAZIONE_Z01")
                            Dim Out_rfcStruct_CLASS_001_DATI_PROD As IRfcStructure = rfcRow.GetStructure("CLASS_001_DATI_PROD")
                            Dim Out_rfcStruct_TMLGN As IRfcStructure = rfcRow.GetStructure("TMLGN")


                            WorkRow = outDataTable.NewRow()


                            WorkRow.Item("Werks") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMARC, "Werks")
                            WorkRow.Item("Matnr") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMARC, "Matnr")
                            WorkRow.Item("MAKTG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMAKT, "Maktg")
                            WorkRow.Item("MTART") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMARA, "Mtart")
                            WorkRow.Item("MATKL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMARA, "Matkl")
                            WorkRow.Item("MEINS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMARA, "Meins")
                            WorkRow.Item("EKGRP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMARC, "Ekgrp")
                            WorkRow.Item("GEWEI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMARA, "Gewei") 'Unità di peso
                            WorkRow.Item("BRGEW") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_TMARA, "Brgew") 'Peso lordo UDM BASE
                            WorkRow.Item("NTGEW") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_TMARA, "Ntgew") 'Peso netto UDM BASE

                            Try

                                WorkRow.Item("PESO_UDM_CONSEGNA") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "PESO_UDM_CONSEGNA")
                                WorkRow.Item("PESO_UDM_PALLET") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "PESO_UDM_PALLET")
                                WorkRow.Item("PZ_X_SC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_VARIANTE_IMBALLO, "PZ_X_SC")
                                WorkRow.Item("SC_X_PAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_VARIANTE_IMBALLO, "SC_X_PAL")
                                WorkRow.Item("ETILE_UMBASE_UMCONSEGNA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_CLASSIFICAZIONE_Z01, "ETILE_UMBASE_UMCONSEGNA")
                                WorkRow.Item("M2_X_PAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_VARIANTE_IMBALLO, "M2_X_PAL")
                                WorkRow.Item("EAN11") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_MEAN_CONSEGNA, "EAN11")
                                WorkRow.Item("LABOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMARA, "LABOR")
                                WorkRow.Item("T024X") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_T024X, "LBTXT") 'FORMATO
                                WorkRow.Item("MVGR5") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TVM5T, "MVGR5")
                                WorkRow.Item("BEZEI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TVM5T, "BEZEI")
                                WorkRow.Item("Z_ORG_COMM_ETICH") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_CLASS_001_DATI_PROD, "Z_ORG_COMM_ETICH")

                                WorkRow.Item("ZZSTORAGE_CODE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMLGN, "ZZSTORAGE_CODE")
                                WorkRow.Item("ZWAREHOUSE_CODE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_TMLGN, "ZWAREHOUSE_CODE")

                            Catch ex As Exception

                            End Try

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga

                        Next

                    End If
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & "" & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1149, "", "(GET_MATERIAL_LIST).") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & "" & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_GET_MATERIAL_LIST = RetCode
            Else
                Call_ZWS_MB_GET_MATERIAL_LIST = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_MATERIAL_DESCR(ByVal inFilterCodiceMateriale As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outStructMakt As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim SingoloRec As New StrctSapGetMaterialList

        Dim objWS As New WS_MB_GET_MATERIAL_DESCR.ZWS_MB_GET_MATERIAL_DESCR
        Dim stImportParams As New WS_MB_GET_MATERIAL_DESCR.ZwmMbGetMaterialDescr
        Dim objWSResponse As New WS_MB_GET_MATERIAL_DESCR.ZwmMbGetMaterialDescrResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_MATERIAL_DESCR = 1 'INIT AT ERROR

            outGetOk = False

            If (Len(inFilterCodiceMateriale) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1148, "", " GET_MATERIAL_LIST. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Codice Materiale] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IMatnr = inFilterCodiceMateriale
            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_material_descr/" & SapClient & "/zws_mb_get_material_descr/zws_mb_get_material_descr"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmMbGetMaterialDescr(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.EFoundrows > 0) Then
                    'WorkRow.Item("Werks") = SingoloRec.GetMaterialList_Rec.Tmarc.Werks
                    'WorkRow.Item("Matnr") = SingoloRec.GetMaterialList_Rec.Tmara.Matnr
                    'WorkRow.Item("MAKTG") = SingoloRec.GetMaterialList_Rec.Tmakt.Maktg
                    'WorkRow.Item("MTART") = SingoloRec.GetMaterialList_Rec.Tmara.Mtart
                    'WorkRow.Item("MATKL") = SingoloRec.GetMaterialList_Rec.Tmara.Matkl
                    'WorkRow.Item("MEINS") = SingoloRec.GetMaterialList_Rec.Tmara.Meins
                    'WorkRow.Item("GEWEI") = SingoloRec.GetMaterialList_Rec.Tmara.Gewei
                    'WorkRow.Item("EKGRP") = SingoloRec.GetMaterialList_Rec.Tmarc.Ekgrp
                    'WorkRow.Item("BRGEW") = SingoloRec.GetMaterialList_Rec.Tmara.Brgew  'Peso lordo
                    'WorkRow.Item("NTGEW") = SingoloRec.GetMaterialList_Rec.Tmara.Ntgew  'Peso netto
                    'WorkRow.Item("GEWEI") = SingoloRec.GetMaterialList_Rec.Tmara.Gewei  'Unità di peso
                    'WorkRow.Item("VOLUM") = SingoloRec.GetMaterialList_Rec.Tmara.Volum  'Volume
                    'WorkRow.Item("VOLEH") = SingoloRec.GetMaterialList_Rec.Tmara.Voleh  'Unità di volume
                End If
            End If

            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(964, "", "Estrazione dati errata (GET_GET_LQUA).Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_GET_MATERIAL_DESCR = RetCode
            Else
                Call_ZWS_MB_GET_MATERIAL_DESCR = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_MATNR_PARTITE(ByVal inFilterCodiceMateriale As String, ByVal inFilterDivisione As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New StrctSapGetMaterialList

        Dim objWS As New WS_GET_MATNR_PARTITE.ZWS_GET_MATNR_PARTITE
        Dim stImportParams As New WS_GET_MATNR_PARTITE.ZmbGetMatnrPartite
        Dim objWSResponse As New WS_GET_MATNR_PARTITE.ZmbGetMatnrPartiteResponse
        Dim GetTabPartitaList_Rec As New WS_GET_MATNR_PARTITE.Mcha
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_MATNR_PARTITE = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inFilterCodiceMateriale) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1150, "", " GET_MATNR_PARTITE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Codice Materiale] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inFilterDivisione) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1150, "", " GET_MATNR_PARTITE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1081, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If Not APPLICAZIONE_WIN32 = "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IWerks = inFilterDivisione
            stImportParams.IMatnr = inFilterCodiceMateriale

            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_matnr_partite/" & SapClient & "/zws_get_matnr_partite/zws_get_matnr_partite"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZmbGetMatnrPartite(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.ETabMcha.Length > 0) Then
                    For Index = 0 To objWSResponse.ETabMcha.Length - 1
                        GetTabPartitaList_Rec = objWSResponse.ETabMcha(Index)
                        If (clsUtility.IsStringValid(GetTabPartitaList_Rec.Matnr, True) = True) And (clsUtility.IsStringValid(GetTabPartitaList_Rec.Charg, True) = True) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("Werks") = GetTabPartitaList_Rec.Werks
                            WorkRow.Item("Matnr") = GetTabPartitaList_Rec.Matnr
                            WorkRow.Item("CHARG") = GetTabPartitaList_Rec.Charg
                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZMB_GET_MATNR_PARTITE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_WERKS", inFilterDivisione)
            rfcFunction.SetValue("I_MATNR", inFilterCodiceMateriale)
            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcFunction.GetObject("E_Foundrows") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_TAB_MCHA")


                'If (rfcTable.ElementCount > 0) Then
                If (rfcTable.RowCount > 0) Then

                    For Each rfcRow In rfcTable

                        If (clsUtility.IsStringValid(rfcRow.GetString(rfcTable.GetElementMetadata("MATNR").Name), True) = True) And (clsUtility.IsStringValid(rfcRow.GetString(rfcTable.GetElementMetadata("CHARG").Name), True) = True) Then

                            WorkRow = outDataTable.NewRow()

                            WorkRow.Item("WERKS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                            WorkRow.Item("MATNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                            WorkRow.Item("CHARG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")

                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga

                        End If

                    Next

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1151, "", " (GET_MATNR_PARTITE). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_GET_MATNR_PARTITE = RetCode
            Else
                Call_ZWS_MB_GET_MATNR_PARTITE = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_UBICAZIONI_INFO(ByRef inUbicazioneStruct As clsDataType.SapWmUbicazione, ByVal inStatoUbicazione As String, ByVal inGetUbiStock As Boolean, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByVal inMaxNumRowReturned As Long, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0

        Dim objWS As New WS_MB_GET_UBICAZIONI_INFO.ZWS_MB_GET_UBICAZIONI_INFO
        Dim stImportParams As New WS_MB_GET_UBICAZIONI_INFO.ZwmMbGetUbicazioniInfo
        Dim objWSResponse As New WS_MB_GET_UBICAZIONI_INFO.ZwmMbGetUbicazioniInfoResponse
        Dim SingoloRec As WS_MB_GET_UBICAZIONI_INFO.Ze1WsLagp

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_UBICAZIONI_INFO = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inUbicazioneStruct.NumeroMagazzino) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1152, "", " GET_UBICAZIONI_INFO. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Numero Magazzino] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inUbicazioneStruct.TipoMagazzino) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1152, "", " GET_UBICAZIONI_INFO. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Tipo Magazzino] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If Not APPLICAZIONE_WIN32 = "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.ILgnum = inUbicazioneStruct.NumeroMagazzino
            stImportParams.ILgtyp = inUbicazioneStruct.TipoMagazzino
            stImportParams.ILgpla = inUbicazioneStruct.Ubicazione

            stImportParams.ILanguage = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_ubicazioni_info/" & SapClient & "/zws_mb_get_ubicazioni_info/zws_mb_get_ubicazioni_info"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmMbGetUbicazioniInfo(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.ETabLagp.Length > 0) Then
                    For Index = 0 To objWSResponse.ETabLagp.Length - 1
                        SingoloRec = objWSResponse.ETabLagp(Index)
                        If (Len(SingoloRec.Lgpla) > 0) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("LGNUM") = SingoloRec.Lgnum
                            WorkRow.Item("LGTYP") = SingoloRec.Lgtyp
                            WorkRow.Item("LGPLA") = SingoloRec.Lgpla
                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure



            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GET_UBICAZIONI_INFO")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGNUM", inUbicazioneStruct.NumeroMagazzino)
            rfcFunction.SetValue("I_LGTYP", inUbicazioneStruct.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA", inUbicazioneStruct.Ubicazione)

            If (inGetUbiStock = True) Then
                rfcFunction.SetValue("I_GET_UBI_STOCK", "X")
            Else
                rfcFunction.SetValue("I_GET_UBI_STOCK", "")
            End If

            rfcFunction.SetValue("I_Language", inLingua)


            If inStatoUbicazione = "A" Then
                rfcFunction.SetValue("I_STATO_UBICAZIONE", inStatoUbicazione)
            ElseIf inStatoUbicazione = "E" Then
                rfcFunction.SetValue("I_STATO_UBICAZIONE", inStatoUbicazione)
            ElseIf inStatoUbicazione = "F" Then
                rfcFunction.SetValue("I_STATO_UBICAZIONE", inStatoUbicazione)
            End If



            If (inMaxNumRowReturned > 0) Then
                rfcFunction.SetValue("I_MAX_RET_ROWS", inMaxNumRowReturned)
            End If


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcFunction.GetObject("E_Foundrows") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_TAB_LAGP")


                'If (rfcTable.ElementCount > 0) Then
                If (rfcTable.RowCount > 0) Then

                    For Each rfcRow In rfcTable

                        WorkRow = outDataTable.NewRow()

                        WorkRow.Item("LGNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        WorkRow.Item("LGTYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                        WorkRow.Item("LGPLA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                        WorkRow.Item("KZLER") = clsSapUtility.GetRFCStructParamToString(rfcRow, "KZLER")
                        WorkRow.Item("KZVOL") = clsSapUtility.GetRFCStructParamToString(rfcRow, "KZVOL")
                        WorkRow.Item("UBI_PIENA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UBI_PIENA")
                        WorkRow.Item("LKAPV") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "LKAPV")

                        WorkRow.Item("ZWMS_UOM_CAP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_UOM_CAP")

                        WorkRow.Item("ZQTA_LGPLA") = Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "UBI_GESME_PAL")))) + " PL/ " + _
                        Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "UBI_GESME_PARTIAL")))) + " CT/ " + _
                        Trim(Str(Int(clsSapUtility.GetRFCStructParamToFloat(rfcRow, "UBI_GESME_SF")))) + " PC"


                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga

                    Next

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(964, "", "Estrazione dati errata (GET_GET_LQUA).Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_GET_UBICAZIONI_INFO = RetCode
            Else
                Call_ZWS_MB_GET_UBICAZIONI_INFO = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_SET_JOBSGROUP_ACTIVATE(ByVal inNumeroJobsGroup As String, ByVal inIdCarrellistaEsecuzione As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long
        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        Dim objWS As New WS_SET_JOBSGROUP_ACTIVATE.ZWS_SET_JOBSGROUP_ACTIVATE
        Dim stImportParams As New WS_SET_JOBSGROUP_ACTIVATE.ZwmsSetJobsgroupActivate
        Dim objWSResponse As New WS_SET_JOBSGROUP_ACTIVATE.ZwmsSetJobsgroupActivateResponse
        Dim SingoloRec As WS_SET_JOBSGROUP_ACTIVATE.ZwmsJobsInfo

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_SET_JOBSGROUP_ACTIVATE = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inNumeroJobsGroup) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1153, "", " SET_JOBGROUP_ACTIVATE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1093, "", "Numero inNumeroJobsGroup") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If Not APPLICAZIONE_WIN32 = "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.IZnrWmsJobsgrp = inNumeroJobsGroup
            stImportParams.IZcarrExec = inIdCarrellistaEsecuzione
            stImportParams.ISpras = inLingua

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_set_jobsgroup_activate/" & SapClient & "/zws_set_jobsgroup_activate/zws_set_jobsgroup_activate"

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            'chiamo function per eseguire CONTROLLO DOCUMENTO MATERIALE
            objWSResponse = objWS.ZwmsSetJobsgroupActivate(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") Then
                outGetOk = True 'UNICO CASO DI ESECUZIONE OK
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_SET_JOBSGROUP_ACTIVATE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_ZNR_WMS_JOBSGRP", inNumeroJobsGroup)
            rfcFunction.SetValue("I_ZCARR_EXEC", inIdCarrellistaEsecuzione)
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outGetOk = True 'UNICO CASO DI ESECUZIONE OK
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(964, "", "Estrazione dati errata (GET_GET_LQUA).Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_SET_JOBSGROUP_ACTIVATE = RetCode
            Else
                Call_ZWS_SET_JOBSGROUP_ACTIVATE = 0 'TUTTO OK
            End If
        End Try
    End Function

    Public Shared Function Call_ZWS_MB_RF_LOGIN(ByVal inUserId As String, ByVal inPassword As String, ByRef outErrorDescription As String, ByRef outUserStruct As clsDataType.StructSapWmsUser, ByRef outSapProfOper As Collection, ByRef outSuccess As String, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim strRetCode As String = ""
        Dim OkConnection As Boolean = False
        Dim OkLogin As Boolean = False
        Dim WorkRow As clsUserGrants.SapAppProfUsersStruct

        Dim objWS As New WS_MB_RF_LOGIN.ZWS_MB_EXEC_RF_LOGIN
        Dim stImportParams As New WS_MB_RF_LOGIN.ZwmMbExecRfLogin
        Dim objWSResponse As New WS_MB_RF_LOGIN.ZwmMbExecRfLoginResponse
        Dim SapExtUser As New WS_MB_RF_LOGIN.Ze1StExtUser
        Dim ProfUser As New WS_MB_RF_LOGIN.ZwmsProfUsers


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_RF_LOGIN = 1 'INIT AT ERROR

            ' PER PRIMA COSA VERIFICO SE LA CONNESSIONE CON SAP E' ATTIVA  E FUNZIONANTE
            RetCode = Call_ZWS_MB_CHECK_CONNECTION("", "", "", "", OkConnection)
            If (RetCode <> 0) Or (OkConnection <> True) Then
                If (inShowMessageBox = True) Then
                    outSuccess = clsAppTranslation.GetSingleParameterValue(1073, "", "Errore nella connessione con SAP.Verificare e riprovare.")
                    MessageBox.Show(outSuccess, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                RetCode = 100
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            'chiamo function per eseguire LOGIN UTENTE
            stImportParams.IBadgnr = ""
            stImportParams.IEnableDebug = ""
            stImportParams.ILanguage = ""
            stImportParams.IModuleArea = ""
            stImportParams.IPassword = inPassword
            stImportParams.IProgname = ""
            stImportParams.IReceiverId = ""
            stImportParams.ISenderId = ""
            stImportParams.IUserid = inUserId

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_exec_rf_login/" & SapClient & "/zws_mb_exec_rf_login/zws_mb_exec_rf_login"


            '>>>> ESECUZIONE CHIAMATA DEL WEB SERVICES
            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            objWSResponse = objWS.ZwmMbExecRfLogin(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            'Refresh collection traduzioni
            outSapProfOper.Clear()

            outSuccess = objWSResponse.ESuccess
            If (objWSResponse.ESuccess = "Y") Then
                OkLogin = True 'UNICO CASO DI LOGIN OK

                outUserStruct.MANDT = objWSResponse.EExtUser.Mandt
                outUserStruct.MODULE_AREA = objWSResponse.EExtUser.ModuleArea
                outUserStruct.PROGNAME = objWSResponse.EExtUser.Progname
                outUserStruct.USERID = objWSResponse.EExtUser.Userid
                outUserStruct.PASSWORD = objWSResponse.EExtUser.Password
                outUserStruct.PROFID = objWSResponse.EExtUser.Profid
                outUserStruct.NAME_FIRST = objWSResponse.EExtUser.NameFirst
                outUserStruct.NAME_LAST = objWSResponse.EExtUser.NameLast
                outUserStruct.LANGUAGE = objWSResponse.EExtUser.Language
                outUserStruct.BCDA1 = objWSResponse.EExtUser.Bcda1
                outUserStruct.MOB_NUMBER = objWSResponse.EExtUser.MobNumber
                outUserStruct.EMAIL = objWSResponse.EExtUser.Email
                outUserStruct.DESCRIPTION = objWSResponse.EExtUser.Description
                outUserStruct.ZCARR = objWSResponse.EExtUser.Zcarr
                outUserStruct.WERKS = objWSResponse.EExtUser.Werks
                outUserStruct.LGNUM = objWSResponse.EExtUser.Lgnum
                outUserStruct.LGTYP = objWSResponse.EExtUser.Lgtyp
                outUserStruct.ZID_WMS_FORKLIFT = objWSResponse.EExtUser.ZidWmsForklift
            End If


            'Leggo elenco operazioni permesse
            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EZwmsProfUsersTab.Length > 0) Then

                For Index = 0 To objWSResponse.EZwmsProfUsersTab.Length - 1
                    WorkRow.NrOperation = objWSResponse.EZwmsProfUsersTab(Index).ZwmsIdOperatio
                    outSapProfOper.Add(True, WorkRow.NrOperation) 'aggiungo la riga
                Next

            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_EXEC_RF_LOGIN")

            rfcFunction.SetValue("I_BADGNR", "")
            rfcFunction.SetValue("I_ENABLE_DEBUG", "")
            rfcFunction.SetValue("I_LANGUAGE", "")
            rfcFunction.SetValue("I_MODULE_AREA", "")
            rfcFunction.SetValue("I_PASSWORD", inPassword)
            rfcFunction.SetValue("I_PROGNAME", "")
            rfcFunction.SetValue("I_RECEIVER_ID", "")
            rfcFunction.SetValue("I_SENDER_ID", "")
            rfcFunction.SetValue("I_USERID", inUserId)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            'Refresh collection traduzioni
            outSapProfOper.Clear()

            outSuccess = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success")
            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                rfcRow = rfcFunction.GetStructure("E_EXT_USER")

                OkLogin = True 'UNICO CASO DI LOGIN OK

                outUserStruct.MANDT = clsSapUtility.GetRFCStructParamToString(rfcRow, "MANDT")
                outUserStruct.MODULE_AREA = clsSapUtility.GetRFCStructParamToString(rfcRow, "MODULE_AREA")
                outUserStruct.PROGNAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "PROGNAME")
                outUserStruct.USERID = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")
                outUserStruct.PASSWORD = clsSapUtility.GetRFCStructParamToString(rfcRow, "PASSWORD")
                outUserStruct.PROFID = clsSapUtility.GetRFCStructParamToString(rfcRow, "PROFID")
                outUserStruct.NAME_FIRST = clsSapUtility.GetRFCStructParamToString(rfcRow, "NAME_FIRST")
                outUserStruct.NAME_LAST = clsSapUtility.GetRFCStructParamToString(rfcRow, "NAME_LAST")
                outUserStruct.LANGUAGE = clsSapUtility.GetRFCStructParamToString(rfcRow, "LANGUAGE")
                outUserStruct.BCDA1 = clsSapUtility.GetRFCStructParamToString(rfcRow, "BCDA1")
                outUserStruct.MOB_NUMBER = clsSapUtility.GetRFCStructParamToString(rfcRow, "MOB_NUMBER")
                outUserStruct.EMAIL = clsSapUtility.GetRFCStructParamToString(rfcRow, "EMAIL")
                outUserStruct.DESCRIPTION = clsSapUtility.GetRFCStructParamToString(rfcRow, "DESCRIPTION")
                outUserStruct.ZCARR = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZCARR")
                outUserStruct.WERKS = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                outUserStruct.LGNUM = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                outUserStruct.LGTYP = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                outUserStruct.ZID_WMS_FORKLIFT = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZID_WMS_FORKLIFT")

            End If


            rfcTable = rfcFunction.GetTable("E_ZWMS_PROF_USERS_TAB")

            'Leggo elenco operazioni permesse
            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcTable.ElementCount > 0) Then


                For Each rfcRow In rfcTable

                    'For i = 0 To rfcTable.RowCount

                    WorkRow.NrOperation = rfcRow.Item("ZWMS_ID_OPERATIO").GetString
                    outSapProfOper.Add(i, WorkRow.NrOperation) 'aggiungo la riga
                    'Next
                    i += 1
                Next

            End If



#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (OkLogin = False) Then
                If (inShowMessageBox = True) Then
                    'outSuccess = clsAppTranslation.GetSingleParameterValue(1074, "", "Login non corretto.Verificare e riprovare.") & vbCrLf & outErrorDescription
                    '>>> ATTENZIONE! LE TRADUZIONI PRIMA DEL  LOGIN NON SONO CARICATE PER CUI SI USA LA LINGUA DI DEFAULT ( INGLESE )
                    outSuccess = "Incorrect Login.Verify and retry." & vbCrLf & outErrorDescription
                    MessageBox.Show(outSuccess, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                RetCode = 101
            Else
                Call_ZWS_MB_RF_LOGIN = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_MB_GET_SYSTEM_INFO(ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outSystStruct As StructGenericSapTableSyst, ByRef outGetOk As Boolean, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_GET_SYSTEM_INFO.ZWS_MB_GET_SYSTEM_INFO
        Dim objWSRequest As New WS_MB_GET_SYSTEM_INFO.ZwmMbGetSystemInfo
        Dim objWSResponse As New WS_MB_GET_SYSTEM_INFO.ZwmMbGetSystemInfoResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_GET_SYSTEM_INFO = 1 'INIT AT ERROR

            outGetOk = False 'INIT AT ERROR


#If APPLICAZIONE_WIN32 <> "SI" Then

            'chiamo function per eseguire LOGIN UTENTE
            objWSRequest.IUserid = ""

            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_get_system_info/" & SapClient & "/zws_mb_get_system_info/zws_mb_get_system_info"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            objWSResponse = objWS.ZwmMbGetSystemInfo(objWSRequest)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA


            If (objWSResponse.ESuccess = "Y") Then
                outGetOk = True 'UNICO CASO DI LOGIN OK
                outSystStruct.SystInfo_Rec = objWSResponse.SystInfo
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            Dim rfcABAPObj As IRfcAbapObject
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_GET_SYSTEM_INFO")


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcRow = rfcFunction.GetStructure("SYST_INFO")


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outGetOk = True 'UNICO CASO DI LOGIN OK

                SapSystemInfo.SystInfo_Rec.Sysid = clsSapUtility.GetRFCStructParamToString(rfcRow, "SYSID")
                SapSystemInfo.SystInfo_Rec.Mandt = clsSapUtility.GetRFCStructParamToString(rfcRow, "MANDT")
                SapSystemInfo.SystInfo_Rec.Dbsys = clsSapUtility.GetRFCStructParamToString(rfcRow, "DBSYS")
                SapSystemInfo.SystInfo_Rec.Saprl = clsSapUtility.GetRFCStructParamToString(rfcRow, "SAPRL")
                SapSystemInfo.SystInfo_Rec.Datum = clsSapUtility.GetRFCStructParamToString(rfcRow, "DATUM")
                SapSystemInfo.SystInfo_Rec.Uzeit = clsSapUtility.GetRFCStructParamToString(rfcRow, "UZEIT")
                SapSystemInfo.SystInfo_Rec.Uname = clsSapUtility.GetRFCStructParamToString(rfcRow, "UNAME")
                SapSystemInfo.SystInfo_Rec.Host = clsSapUtility.GetRFCStructParamToString(rfcRow, "HOST")
                SapSystemInfo.SystInfo_Rec.Datlo = clsSapUtility.GetRFCStructParamToString(rfcRow, "DATLO")
                SapSystemInfo.SystInfo_Rec.Timlo = clsSapUtility.GetRFCStructParamToString(rfcRow, "TIMLO")
                SapSystemInfo.SystInfo_Rec.Zonlo = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZONLO")
                SapSystemInfo.SystInfo_Rec.Tzone = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TZONE")
                SapSystemInfo.SystInfo_Rec.Dayst = clsSapUtility.GetRFCStructParamToString(rfcRow, "DAYST")
                SapSystemInfo.SystInfo_Rec.Fdayw = clsSapUtility.GetRFCStructParamToLong(rfcRow, "FDAYW")
                SapSystemInfo.SystInfo_Rec.Dbnam = clsSapUtility.GetRFCStructParamToString(rfcRow, "DBNAM")

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '*************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(912, "", "Errore in") & "[GET_SYSTEM_INFO]." & vbCrLf & clsAppTranslation.GetSingleParameterValue(348, "", "Verificare e riprovare")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_MB_GET_SYSTEM_INFO = RetCode
            Else
                Call_ZWS_MB_GET_SYSTEM_INFO = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_APPLICATION_PARAMS(ByVal InIWerks As String, ByVal InILgnum As String, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outDataTable As DataTable, ByRef outGetOk As Boolean, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        Dim objWS As New WS_GET_APPLICATION_PARAMS.ZWS_GET_APPLICATION_PARAMS
        Dim objWSRequest As New WS_GET_APPLICATION_PARAMS.ZwmsGetApplicationParams
        Dim objWSResponse As New WS_GET_APPLICATION_PARAMS.ZwmsGetApplicationParamsResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_APPLICATION_PARAMS = 1 'INIT AT ERROR

            outGetOk = False 'INIT AT ERROR


#If APPLICAZIONE_WIN32 <> "SI" Then


            'chiamo function per eseguire LOGIN UTENTE
            objWSRequest.IZappName = UCase(cstNomeApplicazione)
            If InIWerks Is Nothing Then
                objWSRequest.IWerks = ""
            Else
                objWSRequest.IWerks = InIWerks
            End If

            If InILgnum Is Nothing Then
                objWSRequest.ILgnum = ""
            Else
                objWSRequest.ILgnum = InILgnum
            End If

            'If IIdWmsDevices Is Nothing Then
            '    objWSRequest.IIdWmsDevices = ""
            'Else
            '    objWSRequest.IIdWmsDevices = IIdWmsDevices
            'End If

            'objWSRequest.IZidWmsAppParams = InIZidWmsAppParams


            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_application_params/" & SapClient & "/zws_get_application_params/zws_get_application_params"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            objWSResponse = objWS.ZwmsGetApplicationParams(objWSRequest)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA


            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.EZwmsAppParamsTab.Length > 0) Then
                    '>>> VERIFICO SE HO UN NUMERO DI ELEMENTI RITORNATI ECCESSIVO; IN QUESTO CASO LI LIMITO AI PRIMI "N"
                    For Index = 0 To objWSResponse.EZwmsAppParamsTab.Length - 1
                        If (Len(objWSResponse.EZwmsAppParamsTab(Index).ZappName) > 0) Then
                            WorkRow = outDataTable.NewRow()
                            WorkRow.Item("ZappName") = objWSResponse.EZwmsAppParamsTab(Index).ZappName
                            WorkRow.Item("Werks") = objWSResponse.EZwmsAppParamsTab(Index).Werks
                            WorkRow.Item("Lgnum") = objWSResponse.EZwmsAppParamsTab(Index).Lgnum
                            WorkRow.Item("IdWmsDevices") = objWSResponse.EZwmsAppParamsTab(Index).IdWmsDevices
                            WorkRow.Item("ZidWmsAppParams") = objWSResponse.EZwmsAppParamsTab(Index).ZidWmsAppParams
                            WorkRow.Item("ZvalueWmsAppParams") = objWSResponse.EZwmsAppParamsTab(Index).ZvalueWmsAppParams
                            WorkRow.Item("Enable") = objWSResponse.EZwmsAppParamsTab(Index).Enable
                            outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                        End If
                    Next
                End If
            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_APPLICATION_PARAMS")

            rfcFunction.SetValue("I_ZAPP_NAME", UCase(cstNomeApplicazione))
            rfcFunction.SetValue("I_WERKS", InIWerks)
            rfcFunction.SetValue("I_LGNUM", InILgnum)
            'rfcFunction.SetValue("I_ID_WMS_DEVICES", IIdWmsDevices)
            'rfcFunction.SetValue("I_ZID_WMS_APP_PARAMS", InIZidWmsAppParams)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_ZWMS_APP_PARAMS_TAB")


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcTable.ElementCount > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                For Each rfcRow In rfcTable

                    WorkRow = outDataTable.NewRow()

                    For i = 0 To rfcTable.RowCount

                        'WorkRow.Item("ZappName") = rfcRow.GetString(rfcTable.GetElementMetadata("ZAPP_NAME").Name)
                        'WorkRow.Item("Werks") = rfcRow.GetString(rfcTable.GetElementMetadata("WERKS").Name)
                        'WorkRow.Item("Lgnum") = rfcRow.GetString(rfcTable.GetElementMetadata("LGNUM").Name)
                        'WorkRow.Item("IdWmsDevices") = rfcRow.GetString(rfcTable.GetElementMetadata("ID_WMS_DEVICES").Name)
                        'WorkRow.Item("ZidWmsAppParams") = rfcRow.GetString(rfcTable.GetElementMetadata("ZID_WMS_APP_PARAMS").Name)
                        'WorkRow.Item("ZvalueWmsAppParams") = rfcRow.GetString(rfcTable.GetElementMetadata("ZVALUE_WMS_APP_PARAMS").Name)
                        'WorkRow.Item("Enable") = rfcRow.GetString(rfcTable.GetElementMetadata("ENABLE").Name)

                        WorkRow.Item("ZappName") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZAPP_NAME")
                        WorkRow.Item("Werks") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        WorkRow.Item("IdWmsDevices") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ID_WMS_DEVICES")
                        WorkRow.Item("ZidWmsAppParams") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZID_WMS_APP_PARAMS")
                        WorkRow.Item("ZvalueWmsAppParams") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZVALUE_WMS_APP_PARAMS")
                        WorkRow.Item("Enable") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ENABLE")


                    Next

                    outDataTable.Rows.Add(WorkRow)

                Next

            End If



#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '*************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(912, "", "Errore in") & clsAppTranslation.GetSingleParameterValue(1154, "", "[GET_APPLICATION_PARAMS].") & vbCrLf & clsAppTranslation.GetSingleParameterValue(348, "", "Verificare e riprovare")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_APPLICATION_PARAMS = RetCode
            Else
                Call_ZWS_GET_APPLICATION_PARAMS = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_APP_TRANSLATION(ByRef outDataTable As Collection, ByRef outGetOk As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean, ByVal MsgClass As String) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As clsAppTranslation.SapAppTransStruct

        Dim objWS As New WS_GET_APP_TRANSLATION.ZWS_GET_APP_TRANSLATION
        Dim objWSRequest As New WS_GET_APP_TRANSLATION.ZwmsGetAppTranslation
        Dim objWSResponse As New WS_GET_APP_TRANSLATION.ZwmsGetAppTranslationResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_APP_TRANSLATION = 1 'INIT AT ERROR

            outGetOk = False 'INIT AT ERROR


#If APPLICAZIONE_WIN32 <> "SI" Then

            'chiamo function 

            Dim ITabAppTransData As New WS_GET_APP_TRANSLATION.ZwmsAppTranslationRec

            ITabAppTransData.Msgnr = "" 'WorkRow.NrMsg
            ITabAppTransData.Text = "" 'WorkRow.Text

            ReDim objWSRequest.TranslationTab(0)
            objWSRequest.TranslationTab.SetValue(ITabAppTransData, 0)

            objWSRequest.IClasseMessaggio = MsgClass

            'Setto la lingua selezionata
            If (clsUtility.IsStringValid(clsUser.SapWmsUser.LANGUAGE, True) = False) Then
                objWSRequest.ISpras = DefaultSapUserLanguage
            Else
                objWSRequest.ISpras = Left(clsUser.SapWmsUser.LANGUAGE, 1)
            End If


            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_app_translation/" & SapClient & "/zws_get_app_translation/zws_get_app_translation"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            objWSResponse = objWS.ZwmsGetAppTranslation(objWSRequest)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA


            'Refresh collection traduzioni
            If MsgClass = "ZMWS_MOB_MSG" Then
                outDataTable.Clear()
            End If

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                '>>> VERIFICO SE HO UN NUMERO DI ELEMENTI RITORNATI ECCESSIVO; IN QUESTO CASO LI LIMITO AI PRIMI "N"

                If MsgClass = "ZMWS_MOB_MSG" Then
                    For Index = 0 To objWSResponse.EFoundrows - 1
                        WorkRow.NrMsg = objWSResponse.TranslationTab(Index).Msgnr
                        WorkRow.Text = objWSResponse.TranslationTab(Index).Text
                        outDataTable.Add(WorkRow.Text, WorkRow.NrMsg) 'aggiungo la riga
                    Next
                End If

                If MsgClass = "ZMWS_MOB_MSG_01" Then
                    For Index = 0 To objWSResponse.EFoundrows - 1
                        WorkRow.NrMsg = objWSResponse.TranslationTab(Index).Msgnr
                        WorkRow.Text = objWSResponse.TranslationTab(Index).Text
                        outDataTable.Add(WorkRow.Text, WorkRow.NrMsg + 1000) 'aggiungo la riga
                    Next
                End If

            End If

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
                      
            Dim CarLingua As String = ""
            Dim i As Integer



            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_APP_TRANSLATION")


            Dim ITabAppTransData As New DataTable

            'ITabAppTransData.Columns.Add("Msgnr") '= "" 'WorkRow.NrMsg
            ITabAppTransData.Columns.Add("Text") '= "" 'WorkRow.Text

            rfcFunction.SetValue("I_Classe_Messaggio", MsgClass)

            'Setto la lingua selezionata
            If (clsUtility.IsStringValid(clsUser.SapWmsUser.LANGUAGE, True) = False) Then
                rfcFunction.SetValue("I_SPRAS", DefaultSapUserLanguage)
            Else
                CarLingua = Left(clsUser.SapWmsUser.LANGUAGE, 1)
                rfcFunction.SetValue("I_SPRAS", CarLingua)
            End If


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                '>>> VERIFICO SE HO UN NUMERO DI ELEMENTI RITORNATI ECCESSIVO; IN QUESTO CASO LI LIMITO AI PRIMI "N"


                'Refresh collection traduzioni
                If MsgClass = "ZMWS_MOB_MSG" Then
                    outDataTable.Clear()
                End If


                rfcTable = rfcFunction.GetTable("TRANSLATION_TAB")


                If (rfcTable.RowCount > 0) Then


                    If MsgClass = "ZMWS_MOB_MSG" Then
                        For Each rfcRow In rfcTable
                            'WorkRow.NrMsg = rfcRow.Item("Msgnr").GetString
                            'WorkRow.Text = rfcRow.Item("Text").GetString
                            WorkRow.NrMsg = clsSapUtility.GetRFCStructParamToString(rfcRow, "Msgnr")
                            WorkRow.Text = clsSapUtility.GetRFCStructParamToString(rfcRow, "Text")
                            outDataTable.Add(WorkRow.Text, WorkRow.NrMsg) 'aggiungo la riga
                        Next
                    End If

                    If MsgClass = "ZMWS_MOB_MSG_01" Then
                        For Each rfcRow In rfcTable
                            WorkRow.NrMsg = clsSapUtility.GetRFCStructParamToString(rfcRow, "Msgnr")
                            WorkRow.Text = clsSapUtility.GetRFCStructParamToString(rfcRow, "Text")
                            outDataTable.Add(WorkRow.Text, WorkRow.NrMsg + 1000) 'aggiungo la riga
                        Next
                    End If

                End If

            End If


#End If


                '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '*************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(912, "", "Errore in") & "[GET_APP_TRANSLATION]." & vbCrLf & clsAppTranslation.GetSingleParameterValue(348, "", "Verificare e riprovare")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_APP_TRANSLATION = RetCode
            Else
                Call_ZWS_GET_APP_TRANSLATION = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_MB_CHECK_CONNECTION(ByVal inIEnableDebug As String, ByVal inIReceiverId As String, ByVal inISenderId As String, ByRef inIUserid As String, ByRef outCheckOk As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_CHECK_CONNECTION.ZWS_MB_CHECK_CONNECTION
        Dim WsRequestParams As New WS_MB_CHECK_CONNECTION.ZwmMbCheckConnection
        Dim WsResponse As New WS_MB_CHECK_CONNECTION.ZwmMbCheckConnectionResponse
        Dim MyHttpWebRequest As HttpWebRequest
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            ''Parametros de conexión de SAP
            'Dim SapParametros As New RfcConfigParameters
            'SapParametros(RfcConfigParameters.User) = "one"
            'SapParametros(RfcConfigParameters.Password) = "thebest"
            'SapParametros(RfcConfigParameters.SystemID) = "DEV"
            'SapParametros(RfcConfigParameters.Client) = "100"
            'SapParametros(RfcConfigParameters.Name) = "Panaria HANA DEV"
            'SapParametros(RfcConfigParameters.AppServerHost) = "10.126.70.10"
            'SapParametros(RfcConfigParameters.SystemNumber) = "40"
            'SapParametros(RfcConfigParameters.Language) = "IT"

            ''Dim RfcConnection As RfcDestinationManager

            'Dim destino As RfcDestination
            'destino = RfcDestinationManager.GetDestination(SapParametros)


            ''Nueva función para ejecutar la BAPI_PRODORDCONF_CREATE_TT
            'Dim funcion As IRfcFunction = destino.Repository.CreateFunction("ZWM_MB_CHECK_CONNECTION")

            ''Notificaciones para guardar en SAP
            ''Dim tbl_TIMETICKETS As IRfcTable = funcion.GetTable("TIMETICKETS")
            ''tbl_TIMETICKETS.Append()
            ''tbl_TIMETICKETS.SetValue("ORDERID", "000001001811") 'Orden de fabricación
            ''tbl_TIMETICKETS.SetValue("SEQUENCE", "000000") 'Sequencia
            ''tbl_TIMETICKETS.SetValue("OPERATION", "0010") 'Operación
            ''tbl_TIMETICKETS.SetValue("WORK_CNTR", "puesto_trabajo") 'Puesto de trabajo
            ''tbl_TIMETICKETS.SetValue("PLANT", "sap_centro") 'Centro
            ''tbl_TIMETICKETS.SetValue("YIELD", "400") 'Cantidad buena
            ''tbl_TIMETICKETS.SetValue("CONF_ACTIVITY1", "5") 'Tiempo a notificar
            ''tbl_TIMETICKETS.SetValue("RECORDTYPE", "L20")
            ''tbl_TIMETICKETS.SetValue("FIN_CONF", "")
            ''tbl_TIMETICKETS.SetValue("POSTG_DATE", Format(Now, "yyyyMMdd")) 'Fecha contable
            ''tbl_TIMETICKETS.SetValue("DEV_REASON", "P010")
            ''tbl_TIMETICKETS.SetValue("SCRAP", "2") 'Cantidad de rotura
            ''tbl_TIMETICKETS.SetValue("CONF_TEXT", "PRUEBAS") 'Texto notificación


            ''Ejecutar la BAPI
            'Dim ejecuta As New RfcTransaction
            'funcion.Invoke(destino)
            'ejecuta.AddFunction(funcion)
            'ejecuta.Commit(destino)

            'Resultados de la BAPI
            'Dim tbl_DETAIL_RETURN As IRfcTable = funcion.GetTable("DETAIL_RETURN")
            outCheckOk = False 'init

#If APPLICAZIONE_WIN32 <> "SI" Then

            WsRequestParams.IEnableDebug = inIEnableDebug
            WsRequestParams.IReceiverId = inIReceiverId
            WsRequestParams.ISenderId = inISenderId
            WsRequestParams.IUserid = inIUserid

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_check_connection/" & SapClient & "/zws_mb_check_connection/zws_mb_check_connection"

            '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            WsResponse = objWS.ZwmMbCheckConnection(WsRequestParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (WsResponse.ESuccess = "Y") Then
                outCheckOk = True
            End If


#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_CHECK_CONNECTION")

            rfcFunction.SetValue("I_ENABLE_DEBUG", inIEnableDebug)
            rfcFunction.SetValue("I_RECEIVER_ID", inIReceiverId)
            rfcFunction.SetValue("I_SENDER_ID", inISenderId)
            rfcFunction.SetValue("I_USERID", inIUserid)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outCheckOk = True
            End If



#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            Call_ZWS_MB_CHECK_CONNECTION = 1000
            '**************************************
        Finally 'HERE PUT NORMAL ANT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
        End Try
    End Function


    Public Shared Function Call_ZWS_MB_EXEC_WM_WMS_TO(ByVal inInfoPerOt As StrctSapWMSOtInfo, ByVal inEntrataMerceDaOdp As Boolean, ByRef outOkTransferExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outOT_Number As String, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0

        Dim objWS As New WS_MB_EXEC_WM_WMS_TO.ZWS_MB_EXEC_WM_WMS_TO
        Dim stWsResponse As New WS_MB_EXEC_WM_WMS_TO.ZwmMbExecWmWmsToResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_MB_EXEC_WM_WMS_TO = 1 'INIT AT ERROR

            outOkTransferExecuted = False 'INIT
            outOT_Number = "" 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)


#If Not APPLICAZIONE_WIN32 = "SI" Then

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (Len(inInfoPerOt.SapOtInfo_Rec.ILgnum) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Lgnum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerOt.SapOtInfo_Rec.IWerks) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Werks] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerOt.SapOtInfo_Rec.IBwlvs) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Bwlvs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerOt.SapOtInfo_Rec.IMatnr) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Matnr] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inInfoPerOt.SapOtInfo_Rec.IAnfme <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Anfme] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerOt.SapOtInfo_Rec.IAltme) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Altme] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoPerOt.SapOtInfo_Rec.IVlenr) > 0) Then
                If (Len(inInfoPerOt.SapOtInfo_Rec.IVlenr) <> 20) Then
                    inInfoPerOt.SapOtInfo_Rec.IVlenr = inInfoPerOt.SapOtInfo_Rec.IVlenr.PadLeft(20, "0")
                End If
            End If
            If (Len(inInfoPerOt.SapOtInfo_Rec.INlenr) > 0) Then
                If (Len(inInfoPerOt.SapOtInfo_Rec.INlenr) <> 20) Then
                    inInfoPerOt.SapOtInfo_Rec.INlenr = inInfoPerOt.SapOtInfo_Rec.INlenr.PadLeft(20, "0")
                End If
            End If

            '>>>> SE NON IMPOSTATO, SETTO LO USER DEL PALMARE PER LA TRACCIABILITA DELLE OPERAZIONI NEL SISTEMA
            If (clsUtility.IsStringValid(inInfoPerOt.SapOtInfo_Rec.IUseridRf, True) = False) Then
                inInfoPerOt.SapOtInfo_Rec.IUseridRf = clsUser.SapWmsUser.USERID
            End If

            'IMPOSTO VALORE FISSO PER TIPO MAGAZZINO DI SPUNTA
            inInfoPerOt.SapOtInfo_Rec.ILgtypSpunta = cstTipoMagZ0S

            'SETTO FLAG CHE INDICA ENTRATA MERCE PER ODP (PRODUZIONE)
            If (inEntrataMerceDaOdp = True) Then
                inInfoPerOt.SapOtInfo_Rec.IZemDaProd = "X"
            Else
                inInfoPerOt.SapOtInfo_Rec.IZemDaProd = ""
            End If

            'IMPOSTO LA LINGUA
            inInfoPerOt.SapOtInfo_Rec.ILanguage = clsUser.SapWmsUser.LANGUAGE

            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_mb_exec_wm_wms_to/" & SapClient & "/zws_mb_exec_wm_wms_to/zws_mb_exec_wm_wms_to"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            '>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            'chiamo function per eseguire l'OT
            stWsResponse = objWS.ZwmMbExecWmWmsTo(inInfoPerOt.SapOtInfo_Rec)
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA

            If ((stWsResponse.ESuccess = "Y") And (stWsResponse.ETanum > 0)) Then
                outOkTransferExecuted = True 'UNICO CASO DI LOGIN OK
                Call_ZWS_MB_EXEC_WM_WMS_TO = RetCode 'SE = 0 TUTTO OK
            Else
                outOkTransferExecuted = False  'Errore nel trasferimento
            End If


#Else

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (Len(inInfoPerOt.rfcSapOtInfo_Rec.ILgnum) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Lgnum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerOt.rfcSapOtInfo_Rec.IWerks) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Werks] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerOt.rfcSapOtInfo_Rec.IBwlvs) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Bwlvs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerOt.rfcSapOtInfo_Rec.IMatnr) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Matnr] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inInfoPerOt.rfcSapOtInfo_Rec.IAnfme <= 0) And (inInfoPerOt.rfcSapOtInfo_Rec.IQtaExecutedSfusi <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Anfme] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inInfoPerOt.rfcSapOtInfo_Rec.IAltme) <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " OT. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ Altme] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoPerOt.rfcSapOtInfo_Rec.IVlenr) > 0) Then
                If (Len(inInfoPerOt.rfcSapOtInfo_Rec.IVlenr) <> 20) Then
                    inInfoPerOt.rfcSapOtInfo_Rec.IVlenr = inInfoPerOt.rfcSapOtInfo_Rec.IVlenr.PadLeft(20, "0")
                End If
            End If
            If (Len(inInfoPerOt.rfcSapOtInfo_Rec.INlenr) > 0) Then
                If (Len(inInfoPerOt.rfcSapOtInfo_Rec.INlenr) <> 20) Then
                    inInfoPerOt.rfcSapOtInfo_Rec.INlenr = inInfoPerOt.rfcSapOtInfo_Rec.INlenr.PadLeft(20, "0")
                End If
            End If

            '>>>> SE NON IMPOSTATO, SETTO LO USER DEL PALMARE PER LA TRACCIABILITA DELLE OPERAZIONI NEL SISTEMA
            If (clsUtility.IsStringValid(inInfoPerOt.rfcSapOtInfo_Rec.IUseridRf, True) = False) Then
                inInfoPerOt.rfcSapOtInfo_Rec.IUseridRf = clsUser.SapWmsUser.USERID
            End If

            'IMPOSTO VALORE FISSO PER TIPO MAGAZZINO DI SPUNTA
            inInfoPerOt.rfcSapOtInfo_Rec.ILgtypSpunta = cstTipoMagZ0S

            'SETTO FLAG CHE INDICA ENTRATA MERCE PER ODP (PRODUZIONE)
            If (inEntrataMerceDaOdp = True) Then
                inInfoPerOt.rfcSapOtInfo_Rec.IZemDaProd = "X"
            Else
                inInfoPerOt.rfcSapOtInfo_Rec.IZemDaProd = ""
            End If

            'IMPOSTO LA LINGUA
            inInfoPerOt.rfcSapOtInfo_Rec.ILanguage = clsUser.SapWmsUser.LANGUAGE


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            
            


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_EXEC_WM_WMS_TO")


            rfcFunction.SetValue("I_LGNUM", inInfoPerOt.rfcSapOtInfo_Rec.ILgnum)
            rfcFunction.SetValue("I_WERKS", inInfoPerOt.rfcSapOtInfo_Rec.IWerks)
            rfcFunction.SetValue("I_BWLVS", inInfoPerOt.rfcSapOtInfo_Rec.IBwlvs)
            rfcFunction.SetValue("I_SQUIT", inInfoPerOt.rfcSapOtInfo_Rec.ISquit)
            rfcFunction.SetValue("I_MATNR", inInfoPerOt.rfcSapOtInfo_Rec.IMatnr)
            rfcFunction.SetValue("I_ANFME", inInfoPerOt.rfcSapOtInfo_Rec.IAnfme)
            rfcFunction.SetValue("I_ALTME", inInfoPerOt.rfcSapOtInfo_Rec.IAltme)
            rfcFunction.SetValue("I_BETYP", inInfoPerOt.rfcSapOtInfo_Rec.IBetyp)
            rfcFunction.SetValue("I_BENUM", inInfoPerOt.rfcSapOtInfo_Rec.IBenum)
            rfcFunction.SetValue("I_TBNUM", inInfoPerOt.rfcSapOtInfo_Rec.ITbnum)
            rfcFunction.SetValue("I_TBPOS", inInfoPerOt.rfcSapOtInfo_Rec.ITbpos)
            rfcFunction.SetValue("I_MBLNR", inInfoPerOt.rfcSapOtInfo_Rec.IMblnr)
            rfcFunction.SetValue("I_MJAHR", inInfoPerOt.rfcSapOtInfo_Rec.IMjahr)
            rfcFunction.SetValue("I_ZEILE", inInfoPerOt.rfcSapOtInfo_Rec.IZeile)
            rfcFunction.SetValue("I_LGORT", inInfoPerOt.rfcSapOtInfo_Rec.ILgort)
            rfcFunction.SetValue("I_CHARG", inInfoPerOt.rfcSapOtInfo_Rec.ICharg)
            rfcFunction.SetValue("I_BESTQ", inInfoPerOt.rfcSapOtInfo_Rec.IBestq)
            rfcFunction.SetValue("I_SOBKZ", inInfoPerOt.rfcSapOtInfo_Rec.ISobkz)
            rfcFunction.SetValue("I_SONUM", inInfoPerOt.rfcSapOtInfo_Rec.ISonum)
            rfcFunction.SetValue("I_LETYP", inInfoPerOt.rfcSapOtInfo_Rec.ILetyp)
            rfcFunction.SetValue("I_VLTYP", inInfoPerOt.rfcSapOtInfo_Rec.IVltyp)
            rfcFunction.SetValue("I_VLBER", inInfoPerOt.rfcSapOtInfo_Rec.IVlber)
            rfcFunction.SetValue("I_VLPLA", inInfoPerOt.rfcSapOtInfo_Rec.IVlpla)
            rfcFunction.SetValue("I_VPPOS", inInfoPerOt.rfcSapOtInfo_Rec.IVppos)
            rfcFunction.SetValue("I_VLENR", inInfoPerOt.rfcSapOtInfo_Rec.IVlenr)
            rfcFunction.SetValue("I_VLQNR", inInfoPerOt.rfcSapOtInfo_Rec.IVlqnr)
            rfcFunction.SetValue("I_NLTYP", inInfoPerOt.rfcSapOtInfo_Rec.INltyp)
            rfcFunction.SetValue("I_NLBER", inInfoPerOt.rfcSapOtInfo_Rec.INlber)
            rfcFunction.SetValue("I_NLPLA", inInfoPerOt.rfcSapOtInfo_Rec.INlpla)
            rfcFunction.SetValue("I_NPPOS", inInfoPerOt.rfcSapOtInfo_Rec.INppos)
            rfcFunction.SetValue("I_NLENR", inInfoPerOt.rfcSapOtInfo_Rec.INlenr)
            rfcFunction.SetValue("I_ABLAD", inInfoPerOt.rfcSapOtInfo_Rec.IAblad)
            rfcFunction.SetValue("I_QTA_EXECUTED_SFUSI", inInfoPerOt.rfcSapOtInfo_Rec.IQtaExecutedSfusi)
            rfcFunction.SetValue("I_BEM_ACT_ST_DT", inInfoPerOt.rfcSapOtInfo_Rec.IBemActStDt)
            rfcFunction.SetValue("I_BEM_ACT_ST_TM", inInfoPerOt.rfcSapOtInfo_Rec.IBemActStTm)
            rfcFunction.SetValue("I_BEM_ACT_EN_DT", inInfoPerOt.rfcSapOtInfo_Rec.IBemActEnDt)
            rfcFunction.SetValue("I_BEM_ACT_EN_TM", inInfoPerOt.rfcSapOtInfo_Rec.IBemActEnTm)
            rfcFunction.SetValue("I_BEM_ACT_DURATA", inInfoPerOt.rfcSapOtInfo_Rec.IBemActDurata)
            rfcFunction.SetValue("I_USERID_RF", inInfoPerOt.rfcSapOtInfo_Rec.IUseridRf)
            rfcFunction.SetValue("I_LGTYP_SPUNTA", inInfoPerOt.rfcSapOtInfo_Rec.ILgtypSpunta)
            rfcFunction.SetValue("I_ZEM_DA_PROD", inInfoPerOt.rfcSapOtInfo_Rec.IZemDaProd)
            rfcFunction.SetValue("I_LANGUAGE", inInfoPerOt.rfcSapOtInfo_Rec.ILanguage)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If ((clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Tanum") > 0)) Then
                outOkTransferExecuted = True 'UNICO CASO DI LOGIN OK
                Call_ZWS_MB_EXEC_WM_WMS_TO = RetCode 'SE = 0 TUTTO OK

                outOT_Number = clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Tanum")
            Else
                outOkTransferExecuted = False  'Errore nel trasferimento
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkTransferExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & stWsResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & stWsResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else

#If Not APPLICAZIONE_WIN32 = "SI" Then
                outOT_Number = stWsResponse.ETanum '>>> TORNO IL NUMERO DELL'OT
#End If

                Call_ZWS_MB_EXEC_WM_WMS_TO = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWMS_EXEC_ENT_MERCE_PRODUZIONE(ByRef inGiacenze() As clsDataType.SapWmGiacenza, ByVal inNrMagazzino As String, ByVal inUserId As String, ByVal inUserIdRF As String, ByVal inLingua As String, ByRef outOkTransferExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outOT_Number() As String, ByRef outDOC_MAT_INFO() As String, ByRef inSapWmGiacenza() As clsDataType.SapWmGiacenza, ByRef Out_WmsJobs As String, ByRef Out_JobsGroup As String, ByRef Out_TruckDayNr As String, ByRef Out_TrasfNumPallet As String, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim LoopIndex As Integer = 0
        Dim wkSapWmGiacenza As clsDataType.SapWmGiacenza
        Dim DimensioniExcludeUbi As Long

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_EXEC_ENT_MERCE_PRODUZIONE = 1 'INIT AT ERROR

            outOkTransferExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)


#If Not APPLICAZIONE_WIN32 = "SI" Then


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim Out_rfcStruct_E_OT_INFO_TAB As IRfcTable
            Dim Out_rfcStruct_E_DOC_MAT_INFO_TAB As IRfcTable
            Dim rfcRow As IRfcStructure
            
            


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (inNrMagazzino.Length <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inUserId.Length <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inUserIdRF.Length <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Bwlvs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_EXEC_ENT_MERCE_PRODUZIONE")


            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_STOCK_TAB")
            Dim rfc_stImportParams() As rfc_I_STOCK_TAB


            'VERIFICO SE CI SONO DELLE UBICAZIONI DA ESCLUDERE
            If (Not (inSapWmGiacenza Is Nothing)) Then
                DimensioniExcludeUbi = -1 'INIT
                For Each wkSapWmGiacenza In inSapWmGiacenza
                    If (clsUtility.IsStringValid(wkSapWmGiacenza.UbicazioneInfo.UnitaMagazzino, True) = True) Then
                        DimensioniExcludeUbi = DimensioniExcludeUbi + 1

                        ReDim Preserve rfc_stImportParams(DimensioniExcludeUbi)

                        In_rfcTable.Append()

                        rfc_stImportParams(DimensioniExcludeUbi).rfc_LENUM = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap((wkSapWmGiacenza.UbicazioneInfo.UnitaMagazzino))
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_WERKS = UCase(wkSapWmGiacenza.UbicazioneInfo.Divisione)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_MATNR = UCase(wkSapWmGiacenza.CodiceMateriale)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_CHARG = UCase(wkSapWmGiacenza.Partita)

                        'rfc_stImportParams(DimensioniExcludeUbi).rfc_GESME = UCase(wkSapWmGiacenza.QtaTotaleLquaInStock)
                        'rfc_stImportParams(DimensioniExcludeUbi).rfc_VERME = UCase(wkSapWmGiacenza.QtaTotaleLquaDisponibile)
                        'rfc_stImportParams(DimensioniExcludeUbi).rfc_MEINS = UCase(wkSapWmGiacenza.UnitaDiMisuraAcquisizione)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_GESME = UCase(wkSapWmGiacenza.QtaTotaleLquaInStockUdMAcq)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_VERME = UCase(wkSapWmGiacenza.QtaTotaleLquaDispoUdMAcq)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_MEINS = UCase(wkSapWmGiacenza.UnitaDiMisuraAcquisizione)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_ZFLAG_SKIPUNLOAD = UCase(wkSapWmGiacenza.ZFLAG_SKIPUNLOAD)

                        In_rfcTable.SetValue("LENUM", rfc_stImportParams(DimensioniExcludeUbi).rfc_LENUM)
                        In_rfcTable.SetValue("WERKS", rfc_stImportParams(DimensioniExcludeUbi).rfc_WERKS)
                        In_rfcTable.SetValue("MATNR", rfc_stImportParams(DimensioniExcludeUbi).rfc_MATNR)
                        In_rfcTable.SetValue("CHARG", rfc_stImportParams(DimensioniExcludeUbi).rfc_CHARG)
                        In_rfcTable.SetValue("GESME", rfc_stImportParams(DimensioniExcludeUbi).rfc_GESME)
                        In_rfcTable.SetValue("VERME", rfc_stImportParams(DimensioniExcludeUbi).rfc_VERME)
                        In_rfcTable.SetValue("MEINS", rfc_stImportParams(DimensioniExcludeUbi).rfc_MEINS)
                        In_rfcTable.SetValue("ZFLAG_SKIPUNLOAD", rfc_stImportParams(DimensioniExcludeUbi).rfc_ZFLAG_SKIPUNLOAD)

                    End If
                Next
            End If

            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse())
            rfcFunction.SetValue("I_LGNUM", inNrMagazzino)
            rfcFunction.SetValue("I_USERID", inUserId)
            rfcFunction.SetValue("I_USERID_RF", inUserIdRF)
            rfcFunction.SetValue("I_SPRAS", clsUser.SapWmsUser.LANGUAGE)
            rfcFunction.SetValue("I_ZWMS_COMPUTER", WorkStationName)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)
            'Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA


            Out_rfcStruct_E_OT_INFO_TAB = rfcFunction.GetTable("E_OT_INFO_TAB")
            Out_rfcStruct_E_DOC_MAT_INFO_TAB = rfcFunction.GetTable("E_DOC_MAT_INFO_TAB")


            LoopIndex = 0

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then 'And (objWSResponse.ETanum > 0)) Then

                Out_WmsJobs = rfcFunction.Item("E_ZNR_WMS_JOBS").GetString
                Out_JobsGroup = rfcFunction.Item("E_ZNR_WMS_JOBSGRP").GetString
                Out_TruckDayNr = rfcFunction.Item("E_ZMWS_TRUCK_DAYNR").GetString
                Out_TrasfNumPallet = rfcFunction.Item("E_ZTRASF_NUM_PALLE").GetString


                LoopIndex = 0

                If (Not Out_rfcStruct_E_OT_INFO_TAB Is Nothing) Then
                    If (Out_rfcStruct_E_OT_INFO_TAB.RowCount > 0) Then

                        ReDim outOT_Number(Out_rfcStruct_E_OT_INFO_TAB.RowCount - 1)

                        'For LoopIndex = 0 To Out_rfcStruct_E_OT_INFO_TAB.ElementCount - 1
                        For Each rfcRow In Out_rfcStruct_E_OT_INFO_TAB

                            If (Len(rfcRow.GetObject("Tanum")) > 0) Then
                                'outOT_Number(LoopIndex) = rfcRow.GetObject("Tanum")
                                outOT_Number(LoopIndex) = clsSapUtility.GetRFCStructParamToString(rfcRow, "Tanum")
                                outOkTransferExecuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If

                            LoopIndex += 1

                        Next

                    End If
                End If

                LoopIndex = 0

                If (Not Out_rfcStruct_E_DOC_MAT_INFO_TAB Is Nothing) Then
                    If (Out_rfcStruct_E_DOC_MAT_INFO_TAB.RowCount > 0) Then

                        ReDim outDOC_MAT_INFO(Out_rfcStruct_E_DOC_MAT_INFO_TAB.RowCount - 1)

                        'For LoopIndex = 0 To Out_rfcStruct_E_OT_INFO_TAB.ElementCount - 1
                        For Each rfcRow In Out_rfcStruct_E_DOC_MAT_INFO_TAB

                            If (Len(rfcRow.GetObject("MAT_DOC_NUM")) > 0) Then
                                'outDOC_MAT_INFO(LoopIndex) = rfcRow.GetObject("MAT_DOC_NUM")
                                outDOC_MAT_INFO(LoopIndex) = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAT_DOC_NUM")
                                'outOkTransferExecuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If

                            LoopIndex += 1

                        Next

                    End If
                End If

                outOkTransferExecuted = True
                Call_ZWMS_EXEC_ENT_MERCE_PRODUZIONE = RetCode 'SE = 0 TUTTO OK

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkTransferExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                'CASO ESECUZIONE OK
                Call_ZWMS_EXEC_ENT_MERCE_PRODUZIONE = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWMS_EXEC_ENT_MERCE_PROD_TRASF(ByRef inGiacenze() As clsDataType.SapWmGiacenza, ByVal inNrMagazzino As String, ByVal inUserId As String, ByVal inUserIdRF As String, ByVal inLingua As String, ByRef outOkTransferExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outOT_Number() As String, ByRef outDOC_MAT_INFO() As String, ByRef inSapWmGiacenza() As clsDataType.SapWmGiacenza, ByVal Out_JobsGroup As String, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim LoopIndex As Integer = 0
        Dim wkSapWmGiacenza As clsDataType.SapWmGiacenza
        Dim DimensioniExcludeUbi As Long

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_EXEC_ENT_MERCE_PROD_TRASF = 1 'INIT AT ERROR

            outOkTransferExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)


#If Not APPLICAZIONE_WIN32 = "SI" Then


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim Out_rfcStruct_E_OT_INFO_TAB As IRfcTable
            Dim Out_rfcStruct_E_DOC_MAT_INFO_TAB As IRfcTable
            Dim rfcRow As IRfcStructure
            
            


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (inNrMagazzino.Length <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inUserId.Length <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inUserIdRF.Length <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Bwlvs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_EXEC_ENT_MERCE_PROD_TRASF")


            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_STOCK_TAB")
            Dim rfc_stImportParams() As rfc_I_STOCK_TAB


            'VERIFICO SE HE DELLE UBICAZIONI DA EXCLUDERE
            If (Not (inSapWmGiacenza Is Nothing)) Then
                DimensioniExcludeUbi = -1 'INIT
                For Each wkSapWmGiacenza In inSapWmGiacenza
                    If (clsUtility.IsStringValid(wkSapWmGiacenza.UbicazioneInfo.UnitaMagazzino, True) = True) Then
                        DimensioniExcludeUbi = DimensioniExcludeUbi + 1

                        ReDim Preserve rfc_stImportParams(DimensioniExcludeUbi)

                        In_rfcTable.Append()

                        rfc_stImportParams(DimensioniExcludeUbi).rfc_LENUM = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap((wkSapWmGiacenza.UbicazioneInfo.UnitaMagazzino))
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_WERKS = UCase(wkSapWmGiacenza.UbicazioneInfo.Divisione)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_MATNR = UCase(wkSapWmGiacenza.CodiceMateriale)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_CHARG = UCase(wkSapWmGiacenza.Partita)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_GESME = UCase(wkSapWmGiacenza.QtaTotaleLquaInStockUdMAcq)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_VERME = UCase(wkSapWmGiacenza.QtaTotaleLquaDispoUdMAcq)
                        rfc_stImportParams(DimensioniExcludeUbi).rfc_MEINS = UCase(wkSapWmGiacenza.UnitaDiMisuraAcquisizione)
                        'rfc_stImportParams(DimensioniExcludeUbi).rfc_GESME = UCase(wkSapWmGiacenza.QtaTotaleLquaInStock)
                        'rfc_stImportParams(DimensioniExcludeUbi).rfc_VERME = UCase(wkSapWmGiacenza.QtaTotaleLquaDisponibile)
                        'rfc_stImportParams(DimensioniExcludeUbi).rfc_MEINS = UCase(wkSapWmGiacenza.UnitaDiMisuraAcquisizione)

                        In_rfcTable.SetValue("LENUM", rfc_stImportParams(DimensioniExcludeUbi).rfc_LENUM)
                        In_rfcTable.SetValue("WERKS", rfc_stImportParams(DimensioniExcludeUbi).rfc_WERKS)
                        In_rfcTable.SetValue("MATNR", rfc_stImportParams(DimensioniExcludeUbi).rfc_MATNR)
                        In_rfcTable.SetValue("CHARG", rfc_stImportParams(DimensioniExcludeUbi).rfc_CHARG)
                        In_rfcTable.SetValue("GESME", rfc_stImportParams(DimensioniExcludeUbi).rfc_GESME)
                        In_rfcTable.SetValue("VERME", rfc_stImportParams(DimensioniExcludeUbi).rfc_VERME)
                        In_rfcTable.SetValue("MEINS", rfc_stImportParams(DimensioniExcludeUbi).rfc_MEINS)

                    End If
                Next
            End If


            rfcFunction.SetValue("I_LGNUM", inNrMagazzino)
            rfcFunction.SetValue("I_USERID", inUserId)
            rfcFunction.SetValue("I_USERID_RF", inUserIdRF)
            rfcFunction.SetValue("I_SPRAS", clsUser.SapWmsUser.LANGUAGE)
            rfcFunction.SetValue("I_ZWMS_COMPUTER", WorkStationName)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)
            'Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            Out_rfcStruct_E_OT_INFO_TAB = rfcFunction.GetTable("E_OT_INFO_TAB")
            Out_rfcStruct_E_DOC_MAT_INFO_TAB = rfcFunction.GetTable("E_DOC_MAT_INFO_TAB")


            LoopIndex = 0

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then 'And (objWSResponse.ETanum > 0)) Then

                Out_JobsGroup = rfcFunction.Item("E_ZNR_WMS_JOBSGRP").GetString

                LoopIndex = 0

                If (Not Out_rfcStruct_E_OT_INFO_TAB Is Nothing) Then
                    If (Out_rfcStruct_E_OT_INFO_TAB.RowCount > 0) Then

                        ReDim outOT_Number(Out_rfcStruct_E_OT_INFO_TAB.RowCount - 1)

                        'For LoopIndex = 0 To Out_rfcStruct_E_OT_INFO_TAB.ElementCount - 1
                        For Each rfcRow In Out_rfcStruct_E_OT_INFO_TAB

                            If (Len(rfcRow.GetObject("Tanum")) > 0) Then
                                'outOT_Number(LoopIndex) = rfcRow.GetObject("Tanum")
                                outOT_Number(LoopIndex) = clsSapUtility.GetRFCStructParamToString(rfcRow, "Tanum")
                                outOkTransferExecuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If

                            LoopIndex += 1

                        Next

                    End If
                End If

                LoopIndex = 0

                If (Not Out_rfcStruct_E_DOC_MAT_INFO_TAB Is Nothing) Then
                    If (Out_rfcStruct_E_DOC_MAT_INFO_TAB.RowCount > 0) Then

                        ReDim outDOC_MAT_INFO(Out_rfcStruct_E_DOC_MAT_INFO_TAB.RowCount - 1)

                        'For LoopIndex = 0 To Out_rfcStruct_E_OT_INFO_TAB.ElementCount - 1
                        For Each rfcRow In Out_rfcStruct_E_DOC_MAT_INFO_TAB

                            If (Len(rfcRow.GetObject("MAT_DOC_NUM")) > 0) Then
                                'outDOC_MAT_INFO(LoopIndex) = rfcRow.GetObject("MAT_DOC_NUM")
                                outDOC_MAT_INFO(LoopIndex) = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAT_DOC_NUM")
                                'outOkTransferExecuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If

                            LoopIndex += 1

                        Next

                    End If
                End If

                outOkTransferExecuted = True
                Call_ZWMS_EXEC_ENT_MERCE_PROD_TRASF = RetCode 'SE = 0 TUTTO OK

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkTransferExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                'CASO ESECUZIONE OK
                Call_ZWMS_EXEC_ENT_MERCE_PROD_TRASF = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWMS_CHECK_MATERIAL_SKU(ByVal inSKUCode As String, ByVal inNrMagazzino As String, ByVal inCodiceMateriale As String, ByVal inUnitaMagazzino As String, ByVal inUserIdRF As String, ByVal inLingua As String, ByVal inCheckProdInfo As Boolean, ByRef CheckSkuOk As Boolean, ByRef outFlagErrorSkuElaboration As clsDataType.FlagErrorSkuElaborationStruct, ByRef outSapGiacenzaScelta As clsDataType.SapDatiProduzioneScelta, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim CheckProdInfo As String = ""

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_CHECK_MATERIAL_SKU = 1 'INIT AT ERROR

            CheckSkuOk = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)


#If Not APPLICAZIONE_WIN32 = "SI" Then


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcRow As IRfcStructure
            
            


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (inSKUCode.Length <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(234, "", "Errore in esecuzione OT (ZWMS_CHECK_MATERIAL_SKU). Parametro") & " [I_ZWMS_SKU_PALLET] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inNrMagazzino.Length <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(234, "", "Errore in esecuzione OT (ZWMS_CHECK_MATERIAL_SKU). Parametro") & " [I_LGNUM] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inCodiceMateriale.Length <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(234, "", "Errore in esecuzione OT (ZWMS_CHECK_MATERIAL_SKU). Parametro") & " [I_MATNR] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inUnitaMagazzino.Length <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(234, "", "Errore in esecuzione OT (ZWMS_CHECK_MATERIAL_SKU). Parametro") & " [I_LENUM] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inUserIdRF.Length <= 0) Then
                RetCode = 205
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(234, "", "Errore in esecuzione OT (ZWMS_CHECK_MATERIAL_SKU). Parametro") & " [I_USERID_RF] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If inCheckProdInfo Then
                CheckProdInfo = "X"
            Else
                CheckProdInfo = ""
            End If


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_CHECK_MATERIAL_SKU")

            rfcFunction.SetValue("I_ZWMS_SKU_PALLET", inSKUCode)
            rfcFunction.SetValue("I_LGNUM", inNrMagazzino)
            rfcFunction.SetValue("I_MATNR", inCodiceMateriale)
            rfcFunction.SetValue("I_LENUM", inUnitaMagazzino)
            rfcFunction.SetValue("I_USERID_RF", inUserIdRF)
            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)
            rfcFunction.SetValue("I_CHECK_PROD_INFO", CheckProdInfo)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcRow = rfcFunction.GetStructure("E_PROD_INFO")


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then


                'VERIFICO EVENTUALI FLAG DELLA ELABORAZIONE DELLA SKU
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_MATNR_FROM_SKU") = "X") Then
                    outFlagErrorSkuElaboration.FlagErrorSku_MATNR = True
                Else
                    outFlagErrorSkuElaboration.FlagErrorSku_MATNR = False
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_CHARG_FROM_SKU") = "X") Then
                    outFlagErrorSkuElaboration.FlagErrorSku_CHARG = True
                Else
                    outFlagErrorSkuElaboration.FlagErrorSku_CHARG = False
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_SHADE_NOT_FOUND") = "X") Then
                    outFlagErrorSkuElaboration.FlagErrorSku_ShadeNotFound = True
                Else
                    outFlagErrorSkuElaboration.FlagErrorSku_ShadeNotFound = False
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_MATNR_FROM_SKU") = "X") Then
                    outFlagErrorSkuElaboration.FlagErrorSku_DiffMatnr = True
                Else
                    outFlagErrorSkuElaboration.FlagErrorSku_DiffMatnr = False
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_MATNR_CLASS_001") = "X") Then
                    outFlagErrorSkuElaboration.FlagErrorSku_MatnrClass001 = True
                Else
                    outFlagErrorSkuElaboration.FlagErrorSku_MatnrClass001 = False
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_CLASS_FROM_SKU") = "X") Then
                    outFlagErrorSkuElaboration.FlagErrorSku_DiffClass001 = True
                Else
                    outFlagErrorSkuElaboration.FlagErrorSku_DiffClass001 = False
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_TONO_FROM_SKU") = "X") Then
                    outFlagErrorSkuElaboration.FlagErrorSku_DiffTono = True
                Else
                    outFlagErrorSkuElaboration.FlagErrorSku_DiffTono = False
                End If
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_CALIBRO_FROM_SKU") = "X") Then
                    outFlagErrorSkuElaboration.FlagErrorSku_DiffCalibro = True
                Else
                    outFlagErrorSkuElaboration.FlagErrorSku_DiffCalibro = False
                End If



                'Nuova gestione messaggi di errore ritornati
                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHARG_SKU") <> "") Then
                    outFlagErrorSkuElaboration.EChargSku = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHARG_SKU")
                Else
                    outFlagErrorSkuElaboration.EChargSku = ""
                End If

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHARG_ALTE_SKU") <> "") Then
                    outFlagErrorSkuElaboration.EChargAlteSku = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHARG_ALTE_SKU")
                Else
                    outFlagErrorSkuElaboration.EChargAlteSku = ""
                End If

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHARG_EXPECTED") <> "") Then
                    outFlagErrorSkuElaboration.EChargExpected = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHARG_EXPECTED")
                Else
                    outFlagErrorSkuElaboration.EChargExpected = ""
                End If



                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_OK") = "Y") Then

                    CheckSkuOk = True

                    outSapGiacenzaScelta.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                    outSapGiacenzaScelta.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "PALLET_ID")
                    outSapGiacenzaScelta.DataProduzione = clsUtility.FormatDateString(clsSapUtility.GetRFCStructParamToString(rfcRow, "DATA_PRODUZIONE"))
                    outSapGiacenzaScelta.OraProduzione = clsSapUtility.GetRFCStructParamToString(rfcRow, "ORA_PRODUZIONE")
                    outSapGiacenzaScelta.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                    outSapGiacenzaScelta.NumeroOrdineProduzione = clsSapUtility.GetRFCStructParamToString(rfcRow, "AUFNR")
                    outSapGiacenzaScelta.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                    outSapGiacenzaScelta.CodiceMaterialeAlternativo = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR_ALTERNATIV")
                    outSapGiacenzaScelta.Scelta = clsSapUtility.GetRFCStructParamToString(rfcRow, "SCELTA")
                    outSapGiacenzaScelta.Tono = clsSapUtility.GetRFCStructParamToString(rfcRow, "TONO")
                    outSapGiacenzaScelta.Calibro = clsSapUtility.GetRFCStructParamToString(rfcRow, "CALIBRO")
                    outSapGiacenzaScelta.Qualita = clsSapUtility.GetRFCStructParamToString(rfcRow, "QUALITA")
                    outSapGiacenzaScelta.ProgressivoProd = clsSapUtility.GetRFCStructParamToString(rfcRow, "PROGRESSIVO_PROD")
                    outSapGiacenzaScelta.CodiceVarianteImballo = clsSapUtility.GetRFCStructParamToString(rfcRow, "VARIANTE_IMBALLO")
                    outSapGiacenzaScelta.Lotto = clsSapUtility.GetRFCStructParamToString(rfcRow, "LOTTO")
                    outSapGiacenzaScelta.OperatoreProd = clsSapUtility.GetRFCStructParamToString(rfcRow, "OPERATORE_PRODUZ")


                    Call_ZWMS_CHECK_MATERIAL_SKU = RetCode 'SE = 0 TUTTO OK

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            CheckSkuOk = False
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (CheckSkuOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                'CASO ESECUZIONE OK
                Call_ZWMS_CHECK_MATERIAL_SKU = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWM_GET_JOB_UDS_INFO(ByVal InIWerks As String, ByRef inInfoStock As clsDataType.SapWmGiacenza, ByRef InUDSOnWork As clsUDS, ByRef outDataTable As DataTable, ByVal inCheckLenum As Boolean, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outSapUDSInfo As clsDataType.SapUDSInfo, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWM_GET_JOB_UDS_INFO = 1 'INIT AT ERROR

            If (Len(inInfoStock.UbicazioneInfo.UnitaMagazzino) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1333, "", " GET_JOB_UDS_INFO. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure

            Dim rfcFunction_ZWMS_UBI_SPECIAL As IRfcStructure

            Dim i As Integer


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_GET_JOB_UDS_INFO")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            If (inCheckLenum = True) Then
                rfcFunction.SetValue("I_CHECK_LENUM", "X")
            Else
                rfcFunction.SetValue("I_CHECK_LENUM", "")
            End If


            rfcFunction.SetValue("I_WERKS", InIWerks)
            rfcFunction.SetValue("I_LENUM", inInfoStock.UbicazioneInfo.UnitaMagazzino)
            rfcFunction.SetValue("I_LGNUM", clsUser.SapWmsUser.LGNUM)
            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_OK_UDS_MOVE") = "X") Then
                InUDSOnWork.OkUDSMove = True
            Else
                InUDSOnWork.OkUDSMove = False
            End If
            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_OK_UDS_MOVE_WRAP") = "X") Then
                InUDSOnWork.OkUDSMoveWrapping = True
            Else
                InUDSOnWork.OkUDSMoveWrapping = False
            End If

            InUDSOnWork.OkUDSMoveErr = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_OK_UDS_MOVE_ERR")


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_OK_UDS_LOAD") = "X") Then
                InUDSOnWork.OkUDSLoad = True
            Else
                InUDSOnWork.OkUDSLoad = False
            End If



            InUDSOnWork.OkUDSLoadErr = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_OK_UDS_LOAD_ERR")



            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then


                'GESTIONE FLAG PER RICONOSCERE SE UM E' IN LOCAZIONE STAGING DOOR
                rfcFunction_ZWMS_UBI_SPECIAL = rfcFunction.GetStructure("E_ZWMS_UBI_SPECIAL")


                rfcTable = rfcFunction.GetTable("E_ZWMS_UDS_MATNR_TAB")

                If (rfcTable.RowCount > 0) Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK

                    i = 0
                    ReDim outSapUDSInfo.Componenti(rfcTable.RowCount - 1)

                    For Each rfcRow In rfcTable

                        'Completo tutti i campi della struttura SapUDSInfo
                        If (i = 0) Then
                            outSapUDSInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                            outSapUDSInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                            outSapUDSInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                            outSapUDSInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                            outSapUDSInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                            outSapUDSInfo.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                            outSapUDSInfo.Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")
                            'outSapUDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                            outSapUDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZNR_WMS_JOBS", 0)
                            outSapUDSInfo.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                            outSapUDSInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                            outSapUDSInfo.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                            outSapUDSInfo.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                            outSapUDSInfo.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                            outSapUDSInfo.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                            outSapUDSInfo.QtaPrelevataInUdMPezzo = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_PZ")
                            outSapUDSInfo.UdmQtaPrelevataInUdMPezzo = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_PZ")
                            outSapUDSInfo.PesoMaterialeNettoEU = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_EU")
                            outSapUDSInfo.UnitaDiPesoMatEU = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_EU")
                            outSapUDSInfo.PesoMaterialeNettoUSA = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_USA")
                            outSapUDSInfo.UnitaDiPesoMatUSA = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_USA")
                            outSapUDSInfo.DataCreazione = rfcRow.Item("DATA_CREAZIONE").GetString
                            outSapUDSInfo.OraCreazione = rfcRow.Item("ORA_CREAZIONE").GetString
                            outSapUDSInfo.DataModifica = rfcRow.Item("DATA_MODIFICA").GetString
                            outSapUDSInfo.OraModifica = rfcRow.Item("DATA_MODIFICA").GetString
                            outSapUDSInfo.UserIdRFCrea = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_CREA")
                            outSapUDSInfo.UserIdRFMod = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_MOD")
                            outSapUDSInfo.UserId = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")
                            outSapUDSInfo.ZAG_NAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZAG_NAME")
                            outSapUDSInfo.Consegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "NUM_CONS_VBELV")
                            outSapUDSInfo.PosConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "POS_CONS_POSNV")
                            outSapUDSInfo.StopSequence = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_STOP_SEQ")
                            outSapUDSInfo.DropSequence = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_DROP_SEQ")
                            outSapUDSInfo.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGORT")
                            outSapUDSInfo.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAKTG")
                            outSapUDSInfo.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(rfcRow, "SOBKZ")
                            outSapUDSInfo.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(rfcRow, "SONUM")
                            outSapUDSInfo.TipoStock = clsSapUtility.GetRFCStructParamToString(rfcRow, "BESTQ")
                            'outSapUDSInfo.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToString(rfcRow, "TBNUM")
                            outSapUDSInfo.NrTrasporto = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TKNUM")
                            outSapUDSInfo.CodicePartnerAg = clsSapUtility.GetRFCStructParamToString(rfcRow, "KUNNR_AG")
                            outSapUDSInfo.CodicePartnerWE = clsSapUtility.GetRFCStructParamToString(rfcRow, "KUNNR_WE")
                            'outSapUDSInfo.CO = clsSapUtility.GetRFCStructParamToString(rfcRow, "KUNNR_RG")
                            outSapUDSInfo.ZAG_NAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZAG_NAME")
                            outSapUDSInfo.ZWE_NAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWE_NAME")
                            outSapUDSInfo.LGNUM_STAG_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM_STAG_DOOR")
                            outSapUDSInfo.LGTYP_STAG_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP_STAG_DOOR")
                            outSapUDSInfo.LGPLA_STAG_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA_STAG_DOOR")
                            outSapUDSInfo.LGNUM_DOCK_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM_DOOCK_DOOR")
                            outSapUDSInfo.LGTYP_DOCK_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP_DOOCK_DOOR")
                            outSapUDSInfo.LGPLA_DOCK_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA_DOOCK_DOOR")


                            'GESTIONE FLAG PER RICONOSCERE SE UM E' IN LOCAZIONE STAGING DOOR
                            If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_STAG_DOOR") = "X") Then
                                outSapUDSInfo.UbicazioneInfo.FlagLocationStagingDoor = True
                            Else
                                outSapUDSInfo.UbicazioneInfo.FlagLocationStagingDoor = False
                            End If


                        End If


                        'Completo i campi della sottostruttura Componenti
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCParameterToString(rfcFunction, "Lgtyp")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCParameterToString(rfcFunction, "Lgpla")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCParameterToString(rfcFunction, "LETYP")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                        outSapUDSInfo.Componenti(i).MagazzinoLogico = ""

                        outSapUDSInfo.Componenti(i).Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")

                        'GESTIONE INFO DATI SCARICO NAVETTA
                        If Not (clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS") Is Nothing) Then
                            'outSapUDSInfo.Componenti(i).NrWmsJobs = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                            outSapUDSInfo.Componenti(i).NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZNR_WMS_JOBS", 0)
                        End If
                        If Not (clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP") Is Nothing) Then
                            outSapUDSInfo.Componenti(i).CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                        End If


                        outSapUDSInfo.Componenti(i).QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QuantitaInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")

                        'Determino il Codice Materiale complessivo del Pallet
                        If (i > 0) Then
                            outSapUDSInfo.CodiceMaterialeComplessivo = clsAppTranslation.GetSingleParameterValue(1334, "", "VARIO")
                        Else
                            outSapUDSInfo.CodiceMaterialeComplessivo = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        End If

                        'QTA TOTALI DELLA UDS
                        outSapUDSInfo.TotQtaPalletInUdMBase = outSapUDSInfo.TotQtaPalletInUdMBase + clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.TotQtaPalletInUdMConsegna = outSapUDSInfo.TotQtaPalletInUdMConsegna + clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")

                        'Aggiorno indice
                        i += 1

                        'Totale Componenti nel Pallet
                        outSapUDSInfo.NrTotComponenti = i

                        WorkRow = outDataTable.NewRow()

                        'Tabella per descrizioni

                        WorkRow.Item("WERKS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        WorkRow.Item("LGNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        WorkRow.Item("LENUM") = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        WorkRow.Item("MATNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        WorkRow.Item("CHARG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")
                        WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                        WorkRow.Item("LETYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                        WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                        WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_PZ")
                        WorkRow.Item("UDM_QTAPR_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_PZ")

                        WorkRow.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_SF")

                        WorkRow.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_EU")
                        WorkRow.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_EU")
                        WorkRow.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_USA")
                        WorkRow.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_USA")
                        WorkRow.Item("DATA_CREAZIONE") = rfcRow.GetString(rfcTable.GetElementMetadata("DATA_CREAZIONE").Name)
                        WorkRow.Item("ORA_CREAZIONE") = rfcRow.GetString(rfcTable.GetElementMetadata("ORA_CREAZIONE").Name)
                        WorkRow.Item("DATA_MODIFICA") = rfcRow.GetString(rfcTable.GetElementMetadata("DATA_MODIFICA").Name)
                        WorkRow.Item("ORA_MODIFICA") = rfcRow.GetString(rfcTable.GetElementMetadata("ORA_MODIFICA").Name)
                        WorkRow.Item("USERID_RF_CREA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_CREA")
                        WorkRow.Item("USERID_RF_MOD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_MOD")
                        WorkRow.Item("USERID") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")

                        '??? GESTIRE TOTALE SCATOLE E NUMERO UDS ( ? )
                        outDataTable.Rows.Add(WorkRow)

                    Next
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWM_GET_JOB_UDS_INFO = RetCode 'errore
            Else
                Call_ZWM_GET_JOB_UDS_INFO = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_CHECK_DOOCK_DOOR(ByVal inInfoRicercaUbicazione As clsDataType.SapWmUbicazione, ByRef outCheckOk As Boolean, ByRef outUbicazioneStruct As clsDataType.SapWmUbicazione, ByRef outDatiGiacenze() As clsDataType.SapWmGiacenza, ByRef outNrUDC As Long, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0


        Dim WorkGiacenza As clsDataType.SapWmGiacenza
        Dim WorkLoopIndex As Long = 0
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_DOOCK_DOOR = 1 'INIT AT ERROR

            outNrUDC = 0

            If (Len(inInfoRicercaUbicazione.Ubicazione) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1122, "", " CHECK UBICAZIONE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1089, "", "Ubicazione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP WEB SERVICE

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_CHECK_DOOCK_DOOR")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGPLA", inInfoRicercaUbicazione.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoRicercaUbicazione.TipoMagazzino)
            rfcFunction.SetValue("I_LGNUM", inInfoRicercaUbicazione.NumeroMagazzino)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_FOUNDROWS") > 0) And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Check_Ok") = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK

                outNrUDC = rfcFunction.GetElementMetadata("E_NUM_UDC").NucLength 'RITORNO NUMERO DI UDC

                'RITORNO DATI DELL'UBICAZIONE TROVATA
                outUbicazioneStruct.Divisione = rfcFunction.Item("E_WERKS").GetString

                rfcRow = rfcFunction.GetStructure("E_DATA")

                outUbicazioneStruct.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                outUbicazioneStruct.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                outUbicazioneStruct.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")

                outUbicazioneStruct.UnitaMagazzino = ""

                If (rfcFunction.GetObject("E_GESTIONE_UM_ATTIVA") = "X") Then
                    outUbicazioneStruct.AbilitaUnitaMagazzino = True
                Else
                    outUbicazioneStruct.AbilitaUnitaMagazzino = False
                End If

                outUbicazioneStruct.NumeroUdcInUbicazione = rfcFunction.GetElementMetadata("E_NUM_UDC").NucLength 'NUMERO DI UDC CONTENUTI NELL'UBICAZIONE


                rfcTable = rfcFunction.GetTable("E_TAB_STOCK_MATERIAL")


                'If (rfcTable.ElementCount > 0) Then
                If (rfcTable.RowCount > 0) Then

                    'ReDim outDatiGiacenze(rfcTable.ElementCount - 1)
                    ReDim outDatiGiacenze(rfcTable.RowCount - 1)

                    'For WorkLoopIndex = 0 To (rfcTable.ElementCount - 1)
                    For Each rfcRow In rfcTable

                        WorkGiacenza.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Letyp")
                        WorkGiacenza.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                        WorkGiacenza.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgort")
                        WorkGiacenza.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                        WorkGiacenza.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                        WorkGiacenza.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Werks")
                        WorkGiacenza.UbicazioneInfo.CapacitaUdcUbicazione = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Lagp_Lkapv")
                        WorkGiacenza.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "Matnr")
                        WorkGiacenza.Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "Charg")
                        WorkGiacenza.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "Maktg")
                        WorkGiacenza.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "Meins")
                        WorkGiacenza.UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Vrkme")
                        WorkGiacenza.QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Ausme")
                        WorkGiacenza.QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Ausme_Cons")
                        WorkGiacenza.QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Einme")
                        WorkGiacenza.QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Einme_Cons")
                        WorkGiacenza.QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme")
                        WorkGiacenza.QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme_Cons")
                        WorkGiacenza.QtaTotaleInStockInUdmPZ = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme_Pz")
                        WorkGiacenza.QtaTotaleInStockSfusi = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme_SF")
                        WorkGiacenza.QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme")
                        WorkGiacenza.QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme_Cons")
                        WorkGiacenza.QtaTotaleDispoInUdmPZ = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme_Pz")
                        WorkGiacenza.QtaTotaleDispoSfusi = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme_SF")

                        outDatiGiacenze(WorkLoopIndex) = WorkGiacenza
                    Next
                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1060, "", "Ubicazione non definita.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_CHECK_DOOCK_DOOR = RetCode 'caso di errore
            Else
                Call_ZWS_CHECK_DOOCK_DOOR = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_CHECK_STAGING_DOOR(ByVal inInfoRicercaUbicazione As clsDataType.SapWmUbicazione, ByRef outCheckOk As Boolean, ByRef outUbicazioneStruct As clsDataType.SapWmUbicazione, ByRef outDatiGiacenze() As clsDataType.SapWmGiacenza, ByRef outNrUDC As Long, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0


        Dim WorkGiacenza As clsDataType.SapWmGiacenza
        Dim WorkLoopIndex As Long = 0
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_CHECK_STAGING_DOOR = 1 'INIT AT ERROR

            outNrUDC = 0

            If (Len(inInfoRicercaUbicazione.Ubicazione) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1122, "", " CHECK UBICAZIONE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1089, "", "Ubicazione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP WEB SERVICE

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_CHECK_STAGING_DOOR")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGPLA", inInfoRicercaUbicazione.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoRicercaUbicazione.TipoMagazzino)
            rfcFunction.SetValue("I_LGNUM", inInfoRicercaUbicazione.NumeroMagazzino)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_FOUNDROWS") > 0) And (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Check_Ok") = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK

                outNrUDC = rfcFunction.GetElementMetadata("E_NUM_UDC").NucLength 'RITORNO NUMERO DI UDC

                'RITORNO DATI DELL'UBICAZIONE TROVATA
                outUbicazioneStruct.Divisione = rfcFunction.GetElementMetadata("E_WERKS").Name

                rfcRow = rfcFunction.GetStructure("E_DATA")

                outUbicazioneStruct.Ubicazione = rfcRow.GetString(rfcRow.GetElementMetadata("Lgpla").Name)
                outUbicazioneStruct.TipoMagazzino = rfcRow.GetString(rfcRow.GetElementMetadata("Lgtyp").Name)
                outUbicazioneStruct.NumeroMagazzino = rfcRow.GetString(rfcRow.GetElementMetadata("Lgnum").Name)

                outUbicazioneStruct.UnitaMagazzino = ""

                If (rfcFunction.GetObject("E_GESTIONE_UM_ATTIVA") = "X") Then
                    outUbicazioneStruct.AbilitaUnitaMagazzino = True
                Else
                    outUbicazioneStruct.AbilitaUnitaMagazzino = False
                End If

                outUbicazioneStruct.NumeroUdcInUbicazione = rfcFunction.GetElementMetadata("E_NUM_UDC").NucLength 'NUMERO DI UDC CONTENUTI NELL'UBICAZIONE


                rfcTable = rfcFunction.GetTable("E_TAB_STOCK_MATERIAL")


                If (rfcTable.RowCount > 0) Then

                    ReDim outDatiGiacenze(rfcTable.RowCount - 1)

                    For Each rfcRow In rfcTable

                        WorkGiacenza.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Letyp")
                        WorkGiacenza.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                        WorkGiacenza.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgort")
                        WorkGiacenza.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                        WorkGiacenza.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                        WorkGiacenza.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Werks")
                        WorkGiacenza.UbicazioneInfo.CapacitaUdcUbicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lagp_Lkapv")
                        WorkGiacenza.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "Matnr")
                        WorkGiacenza.Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "Charg")
                        WorkGiacenza.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "Maktg")
                        WorkGiacenza.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "Meins")
                        WorkGiacenza.UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Vrkme")
                        WorkGiacenza.QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCStructParamToString(rfcRow, "Ausme")
                        WorkGiacenza.QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCStructParamToString(rfcRow, "Ausme_Cons")
                        WorkGiacenza.QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCStructParamToString(rfcRow, "Einme")
                        WorkGiacenza.QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCStructParamToString(rfcRow, "Einme_Cons")
                        WorkGiacenza.QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToString(rfcRow, "Gesme")
                        WorkGiacenza.QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToString(rfcRow, "Gesme_Cons")
                        WorkGiacenza.QtaTotaleInStockInUdmPZ = clsSapUtility.GetRFCStructParamToString(rfcRow, "Gesme_Pz")
                        WorkGiacenza.QtaTotaleInStockSfusi = clsSapUtility.GetRFCStructParamToString(rfcRow, "Gesme_SF")
                        WorkGiacenza.QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToString(rfcRow, "Verme")
                        WorkGiacenza.QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToString(rfcRow, "Verme_Cons")
                        WorkGiacenza.QtaTotaleDispoInUdmPZ = clsSapUtility.GetRFCStructParamToString(rfcRow, "Verme_Pz")
                        WorkGiacenza.QtaTotaleDispoSfusi = clsSapUtility.GetRFCStructParamToString(rfcRow, "Verme_SF")

                        outDatiGiacenze(WorkLoopIndex) = WorkGiacenza
                    Next
                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1060, "", "Ubicazione non definita.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_CHECK_STAGING_DOOR = RetCode 'caso di errore
            Else
                Call_ZWS_CHECK_STAGING_DOOR = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWMS_JOB_UDS_TRUCK_LOAD(ByRef inWorkSapUDSInfo() As clsDataType.SapUDSInfo, ByVal InIWerks As String, ByVal InUbicazioneDest As clsDataType.SapWmUbicazione, ByVal inLingua As String, ByRef outDataTable As DataTable, ByRef outOT_Number() As String, ByRef outOkTransferExecuted As Boolean, ByRef outCheckOk As Boolean, ByRef outDatiGiacenza As clsDataType.SapUDSInfo, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        Dim LoopIndex As Integer = 0
        Dim wkSapUDSInfo As clsDataType.SapUDSInfo
        Dim NrUDSTruckLoad As Long

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_JOB_UDS_TRUCK_LOAD = 1 'INIT AT ERROR

            If (Len(inWorkSapUDSInfo(0).UnitaMagazzino) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1333, "", " GET_JOB_UDS_INFO. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            '>>> TODO controlli su lgnum lgtyp lgpla
            '...
            '>>>

#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            'Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
             
            Dim Out_rfcTable_E_OT_INFO_TAB As IRfcTable
            Dim rfcTable_E_ZWMS_UDS_TAB As IRfcTable
            Dim rfcFunction_E_UDS_TRUCK_LOAD_INFO As IRfcStructure
            'Dim rfcFunction_ZWMS_UDS As IRfcStructure
            Dim i As Integer


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_JOB_UDS_TRUCK_LOAD")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE


            '>>> Ciclo sulla tabella di ingresso con i dati Truck Load...
            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_ZWMS_UDS_LOAD_TAB")
            Dim rfc_stImportParams() As rfc_I_UDS_TRUCK_LOAD_TAB


            If (Not (inWorkSapUDSInfo Is Nothing)) Then
                NrUDSTruckLoad = -1 'INIT
                For Each wkSapUDSInfo In inWorkSapUDSInfo
                    If (clsUtility.IsStringValid(wkSapUDSInfo.UnitaMagazzino, True) = True) Then
                        NrUDSTruckLoad = NrUDSTruckLoad + 1

                        ReDim Preserve rfc_stImportParams(NrUDSTruckLoad)

                        In_rfcTable.Append()

                        rfc_stImportParams(NrUDSTruckLoad).rfc_WERKS = UCase(wkSapUDSInfo.Divisione)
                        rfc_stImportParams(NrUDSTruckLoad).rfc_LGNUM = UCase(wkSapUDSInfo.NumeroMagazzino)
                        rfc_stImportParams(NrUDSTruckLoad).rfc_LENUM = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap((wkSapUDSInfo.UnitaMagazzino))
                        rfc_stImportParams(NrUDSTruckLoad).rfc_ZUDS_BARCODE = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap((wkSapUDSInfo.UnitaMagazzino))
                        'rfc_stImportParams(NrUDSMove).rfc_ZUDS_BARCODE = UCase(wkWorkSapUDSInfo.ZUDS_BARCODE)

                        Dim In_Werks As IRfcStructure = In_rfcTable.GetStructure("WERKS")
                        In_Werks.SetValue("WERKS", rfc_stImportParams(NrUDSTruckLoad).rfc_WERKS)

                        In_rfcTable.SetValue("LGNUM", rfc_stImportParams(NrUDSTruckLoad).rfc_LGNUM)
                        In_rfcTable.SetValue("LENUM", rfc_stImportParams(NrUDSTruckLoad).rfc_LENUM)
                        In_rfcTable.SetValue("ZUDS_BARCODE", rfc_stImportParams(NrUDSTruckLoad).rfc_ZUDS_BARCODE)

                    End If
                Next
            End If

            '>>>


            rfcFunction.SetValue("I_WERKS", InIWerks)
            rfcFunction.SetValue("I_LGNUM_DEST", InUbicazioneDest.NumeroMagazzino)
            rfcFunction.SetValue("I_LGTYP_DEST", InUbicazioneDest.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA_DEST", InUbicazioneDest.Ubicazione)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_SPRAS", inLingua)



            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outCheckOk = True 'UNICO CASO DI CHECK OK

                Out_rfcTable_E_OT_INFO_TAB = rfcFunction.GetTable("E_OT_INFO_TAB")
                rfcTable_E_ZWMS_UDS_TAB = rfcFunction.GetTable("E_ZWMS_UDS_OK_TAB")
                'rfcFunction_ZWMS_UDS = rfcTable_E_ZWMS_UDS_TAB.GetStructure("ZTWMS_UDS")
                rfcFunction_E_UDS_TRUCK_LOAD_INFO = rfcFunction.GetStructure("E_UDS_TRUCK_LOAD_INFO")


                If (Not Out_rfcTable_E_OT_INFO_TAB Is Nothing) Then
                    If (Out_rfcTable_E_OT_INFO_TAB.RowCount > 0) Then
                        ReDim outOT_Number(Out_rfcTable_E_OT_INFO_TAB.RowCount - 1)

                        For Each rfcRow In Out_rfcTable_E_OT_INFO_TAB
                            If (Out_rfcTable_E_OT_INFO_TAB.GetObject("Tanum") > 0) Then
                                outOT_Number(LoopIndex) = clsSapUtility.GetRFCStructParamToString(rfcRow, "Tanum")
                                'outOT_Number(LoopIndex) = Out_rfcTable_E_OT_INFO_TAB.GetObject("Ltap")
                                outOkTransferExecuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If

                            LoopIndex += 1

                        Next

                    End If
                End If


                'For Each rfcRow In rfcTable_E_ZWMS_UDS_TAB

                '    WorkRow = outDataTable.NewRow()

                '    For i = 0 To rfcTable_E_ZWMS_UDS_TAB.RowCount

                '        WorkRow.Item("WERKS") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("WERKS").Name)
                '        WorkRow.Item("LGNUM") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LGNUM").Name)
                '        WorkRow.Item("LENUM") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LENUM").Name)
                '        WorkRow.Item("VBELN") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("VBELN").Name)
                '        WorkRow.Item("ZNR_WMS_JOBSGRP") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ZNR_WMS_JOBSGRP").Name)
                '        WorkRow.Item("ZUDS_BARCODE") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ZUDS_BARCODE").Name)
                '        WorkRow.Item("LETYP") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LETYP").Name)
                '        WorkRow.Item("LGTYP") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LGTYP").Name)
                '        WorkRow.Item("LGPLA") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LGPLA").Name)
                '        WorkRow.Item("ZUDS_LOADED_TRUC") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ZUDS_LOADED_TRUC").Name)
                '        WorkRow.Item("DATA_TRUCK_LOAD") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("DATA_TRUCK_LOAD").Name)
                '        WorkRow.Item("ORA_TRUCK_LOAD") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ORA_TRUCK_LOAD").Name)
                '        WorkRow.Item("USERID_RF_TRUCLD") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("USERID_RF_TRUCLD").Name)
                '        WorkRow.Item("USERID") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("USERID").Name)

                '    Next

                '    outDataTable.Rows.Add(WorkRow)

                'Next


                '>>> 
                outDatiGiacenza.UDSTruckPalLoad = clsSapUtility.GetRFCStructParamToLong(rfcFunction_E_UDS_TRUCK_LOAD_INFO, "ZNUM_PAL_LOAD")
                outDatiGiacenza.UDSTruckPalToLoad = clsSapUtility.GetRFCStructParamToFloat(rfcFunction_E_UDS_TRUCK_LOAD_INFO, "ZNUM_PAL_TOLOAD")
                outDatiGiacenza.UDSTruckNumPallet = clsSapUtility.GetRFCStructParamToFloat(rfcFunction_E_UDS_TRUCK_LOAD_INFO, "ZPICK_NUM_PAL")
                outDatiGiacenza.UDSTruckLoadMerci = clsSapUtility.GetRFCStructParamToFloat(rfcFunction_E_UDS_TRUCK_LOAD_INFO, "ZWMS_LOAD_MERCI")


            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_JOB_UDS_TRUCK_LOAD = RetCode 'errore
            Else
                Call_ZWMS_JOB_UDS_TRUCK_LOAD = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWMS_JOB_UDS_MOVE(ByRef inWorkSapUDSInfo() As clsDataType.SapUDSInfo, ByVal InIWerks As String, ByVal InILgnumDest As String, ByVal InILgtypDest As String, ByVal InILgplaDest As String, ByVal inLingua As String, ByRef outDataTable As DataTable, ByRef outOT_Number() As String, ByRef outOTMoveUdsExecvuted As Boolean, ByRef outSuccesOk As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        Dim LoopIndex As Integer = 0
        Dim wkWorkSapUDSInfo As clsDataType.SapUDSInfo
        Dim NrUDSMove As Long

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_JOB_UDS_MOVE = 1 'INIT AT ERROR

            If (inWorkSapUDSInfo.Length <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1479, "", "SapUDSInfo") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            For Index = 0 To (inWorkSapUDSInfo.Length - 1)
                If (clsUtility.IsStringValid(inWorkSapUDSInfo(Index).UnitaMagazzino, True) = False) Then
                    RetCode = 201
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                    If (inShowMessageBox = True) Then
                        MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                    End If
                    Exit Function
                End If
            Next



#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim Out_rfcTable_E_OT_INFO_TAB As IRfcTable
            Dim rfcTable_E_ZWMS_UDS_TAB As IRfcTable
            Dim rfcFunction_E_UDS_TRUCK_LOAD_INFO As IRfcStructure
            Dim rfcFunction_ZWMS_UDS As IRfcStructure
            Dim i As Integer

            Dim Table As New DataTable

            outOTMoveUdsExecvuted = False
            outSuccesOk = False

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_JOB_UDS_MOVE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE


            '>>> Ciclo sulla tabella di ingresso con i dati Truck Load...
            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_ZWMS_UDS_MOVE_TAB")
            Dim rfc_stImportParams() As rfc_I_UDS_TRUCK_LOAD_TAB


            If (Not (inWorkSapUDSInfo Is Nothing)) Then
                NrUDSMove = -1 'INIT
                For Each wkWorkSapUDSInfo In inWorkSapUDSInfo
                    If (clsUtility.IsStringValid(wkWorkSapUDSInfo.UnitaMagazzino, True) = True) Then
                        NrUDSMove = NrUDSMove + 1

                        ReDim Preserve rfc_stImportParams(NrUDSMove)

                        In_rfcTable.Append()

                        rfc_stImportParams(NrUDSMove).rfc_WERKS = UCase(wkWorkSapUDSInfo.Divisione)
                        rfc_stImportParams(NrUDSMove).rfc_LGNUM = UCase(wkWorkSapUDSInfo.NumeroMagazzino)
                        rfc_stImportParams(NrUDSMove).rfc_LENUM = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap((wkWorkSapUDSInfo.UnitaMagazzino))
                        rfc_stImportParams(NrUDSMove).rfc_ZUDS_BARCODE = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap((wkWorkSapUDSInfo.UnitaMagazzino))
                        'rfc_stImportParams(NrUDSMove).rfc_ZUDS_BARCODE = UCase(wkWorkSapUDSInfo.ZUDS_BARCODE)

                        Dim In_Werks As IRfcStructure = In_rfcTable.GetStructure("WERKS")
                        In_Werks.SetValue("WERKS", rfc_stImportParams(NrUDSMove).rfc_WERKS)
                        In_rfcTable.SetValue("WERKS", In_Werks)
                        In_rfcTable.SetValue("LGNUM", rfc_stImportParams(NrUDSMove).rfc_LGNUM)
                        In_rfcTable.SetValue("LENUM", rfc_stImportParams(NrUDSMove).rfc_LENUM)
                        In_rfcTable.SetValue("ZUDS_BARCODE", rfc_stImportParams(NrUDSMove).rfc_ZUDS_BARCODE)

                    End If
                Next
            End If

            '>>>
            rfcFunction.SetValue("I_WERKS", InIWerks)
            rfcFunction.SetValue("I_LGNUM_DEST", InILgnumDest)
            rfcFunction.SetValue("I_LGTYP_DEST", InILgtypDest)
            rfcFunction.SetValue("I_LGPLA_DEST", InILgplaDest)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outSuccesOk = True 'UNICO CASO DI CHECK OK

                Out_rfcTable_E_OT_INFO_TAB = rfcFunction.GetTable("E_OT_INFO_TAB")
                rfcTable_E_ZWMS_UDS_TAB = rfcFunction.GetTable("E_ZWMS_UDS_TAB")
                If (Not Out_rfcTable_E_OT_INFO_TAB Is Nothing) Then
                    If (Out_rfcTable_E_OT_INFO_TAB.ElementCount > 0) Then

                        ReDim outOT_Number(Out_rfcTable_E_OT_INFO_TAB.ElementCount - 1)
                        For Each rfcRow In Out_rfcTable_E_OT_INFO_TAB

                            If (Out_rfcTable_E_OT_INFO_TAB.GetObject("Tanum") > 0) Then
                                outOT_Number(LoopIndex) = clsSapUtility.GetRFCStructParamToString(rfcRow, "Tanum")
                                outOTMoveUdsExecvuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If
                            LoopIndex += 1
                        Next
                    End If
                End If


                For Each rfcRow In rfcTable_E_ZWMS_UDS_TAB
                    WorkRow = outDataTable.NewRow()
                    For i = 0 To rfcTable_E_ZWMS_UDS_TAB.RowCount
                        WorkRow.Item("WERKS") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("WERKS").Name)
                        WorkRow.Item("LGNUM") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LGNUM").Name)
                        WorkRow.Item("LENUM") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LENUM").Name)
                        WorkRow.Item("VBELN") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("VBELN").Name)
                        WorkRow.Item("ZNR_WMS_JOBSGRP") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ZNR_WMS_JOBSGRP").Name)
                        WorkRow.Item("ZUDS_BARCODE") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ZUDS_BARCODE").Name)
                        WorkRow.Item("LETYP") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LETYP").Name)
                        WorkRow.Item("LGTYP") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LGTYP").Name)
                        WorkRow.Item("LGPLA") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LGPLA").Name)
                        WorkRow.Item("ZUDS_LOADED_TRUC") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ZUDS_LOADED_TRUC").Name)
                        WorkRow.Item("DATA_TRUCK_LOAD") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("DATA_TRUCK_LOAD").Name)
                        WorkRow.Item("ORA_TRUCK_LOAD") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ORA_TRUCK_LOAD").Name)
                        WorkRow.Item("USERID_RF_TRUCLD") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("USERID_RF_TRUCLD").Name)
                        WorkRow.Item("USERID") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("USERID").Name)
                    Next

                    outDataTable.Rows.Add(WorkRow)
                Next
            End If

#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outSuccesOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_JOB_UDS_MOVE = RetCode 'errore
            Else
                Call_ZWMS_JOB_UDS_MOVE = 0 'TUTTO OK
            End If
        End Try

    End Function
    Public Shared Function Call_ZWMS_JOB_UDS_DROP(ByRef inCurrentForLift As clsDataType.SapForkLiftStruct, ByRef inWorkSapUDSInfo() As clsDataType.SapUDSInfo, ByRef inUbicazioneDestinazione As clsDataType.SapWmUbicazione, ByVal inLingua As String, ByRef outDataTable As DataTable, ByRef outOT_Number() As String, ByRef outOTMoveUdsExecvuted As Boolean, ByRef outSuccesOk As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim LoopIndex As Integer = 0
        Dim wkWorkSapUDSInfo As clsDataType.SapUDSInfo
        Dim NrUDSMove As Long

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_JOB_UDS_DROP = 1 'INIT AT ERROR



            If (clsUtility.IsStringValid(inCurrentForLift.IdForkLift, True) = False) Then
                RetCode = 180
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1162, "", "IdForkLift") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (inWorkSapUDSInfo Is Nothing) Then
                RetCode = 190
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1479, "", "SapUDSInfo") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (inWorkSapUDSInfo.Length <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1479, "", "SapUDSInfo") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (clsUtility.IsStringValid(inUbicazioneDestinazione.Divisione, True) = False) Then
                RetCode = 210
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(6, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (clsUtility.IsStringValid(inUbicazioneDestinazione.NumeroMagazzino, True) = False) Then
                RetCode = 220
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(263, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (clsUtility.IsStringValid(inUbicazioneDestinazione.TipoMagazzino, True) = False) Then
                RetCode = 230
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (clsUtility.IsStringValid(inUbicazioneDestinazione.Ubicazione, True) = False) Then
                RetCode = 240
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1089, "", "Ubicazione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            For Index = 0 To (inWorkSapUDSInfo.Length - 1)
                If (clsUtility.IsStringValid(inWorkSapUDSInfo(Index).UnitaMagazzino, True) = False) Then
                    RetCode = 201
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1478, "", " JOB_UDS_MOVE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                    If (inShowMessageBox = True) Then
                        MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                    End If
                    Exit Function
                End If
            Next



#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim Out_rfcTable_E_OT_INFO_TAB As IRfcTable
            Dim rfcTable_E_ZWMS_UDS_TAB As IRfcTable
            Dim rfcFunction_E_UDS_TRUCK_LOAD_INFO As IRfcStructure
            Dim rfcFunction_ZWMS_UDS As IRfcStructure
            Dim i As Integer

            Dim Table As New DataTable

            outOTMoveUdsExecvuted = False
            outSuccesOk = False

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_JOB_UDS_DROP")

            '***********************************************************************************
            ' >>> IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            '***********************************************************************************

            '>>> Ciclo sulla tabella di ingresso con i dati della UDS da DROPPARE...
            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_ZWMS_UDS_MOVE_TAB")
            Dim rfc_stImportParams() As rfc_I_UDS_TRUCK_LOAD_TAB


            If (Not (inWorkSapUDSInfo Is Nothing)) Then
                NrUDSMove = -1 'INIT
                For Each wkWorkSapUDSInfo In inWorkSapUDSInfo
                    If (clsUtility.IsStringValid(wkWorkSapUDSInfo.UnitaMagazzino, True) = True) Then
                        NrUDSMove = NrUDSMove + 1

                        ReDim Preserve rfc_stImportParams(NrUDSMove)

                        In_rfcTable.Append()

                        rfc_stImportParams(NrUDSMove).rfc_WERKS = UCase(wkWorkSapUDSInfo.UbicazioneInfo.Divisione)
                        rfc_stImportParams(NrUDSMove).rfc_LGNUM = UCase(wkWorkSapUDSInfo.UbicazioneInfo.NumeroMagazzino)
                        rfc_stImportParams(NrUDSMove).rfc_LENUM = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap((wkWorkSapUDSInfo.UnitaMagazzino))
                        rfc_stImportParams(NrUDSMove).rfc_ZUDS_BARCODE = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap((wkWorkSapUDSInfo.UnitaMagazzino))
                        'rfc_stImportParams(NrUDSMove).rfc_ZUDS_BARCODE = UCase(wkWorkSapUDSInfo.ZUDS_BARCODE)

                        Dim In_Werks As IRfcStructure = In_rfcTable.GetStructure("WERKS")
                        In_Werks.SetValue("WERKS", rfc_stImportParams(NrUDSMove).rfc_WERKS)
                        In_rfcTable.SetValue("WERKS", In_Werks)
                        In_rfcTable.SetValue("LGNUM", rfc_stImportParams(NrUDSMove).rfc_LGNUM)
                        In_rfcTable.SetValue("LENUM", rfc_stImportParams(NrUDSMove).rfc_LENUM)
                        In_rfcTable.SetValue("ZUDS_BARCODE", rfc_stImportParams(NrUDSMove).rfc_ZUDS_BARCODE)

                    End If
                Next
            End If

            '>>> IMPOSTO I PARAMETRI DELLA FUNCTION
            rfcFunction.SetValue("I_ZID_WMS_FORKLIFT", inCurrentForLift.IdForkLift)
            rfcFunction.SetValue("I_LGNUM", clsUser.GetUserNumeroMagazzinoToUse)
            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse)
            rfcFunction.SetValue("I_LGNUM_DEST", inUbicazioneDestinazione.NumeroMagazzino)
            rfcFunction.SetValue("I_LGTYP_DEST", inUbicazioneDestinazione.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA_DEST", inUbicazioneDestinazione.Ubicazione)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_SPRAS", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outSuccesOk = True 'UNICO CASO DI CHECK OK

                Out_rfcTable_E_OT_INFO_TAB = rfcFunction.GetTable("E_OT_INFO_TAB")
                rfcTable_E_ZWMS_UDS_TAB = rfcFunction.GetTable("E_ZWMS_UDS_TAB")
                If (Not Out_rfcTable_E_OT_INFO_TAB Is Nothing) Then
                    If (Out_rfcTable_E_OT_INFO_TAB.RowCount > 0) Then
                        LoopIndex = 0
                        ReDim outOT_Number(Out_rfcTable_E_OT_INFO_TAB.RowCount - 1)
                        For Each rfcRow In Out_rfcTable_E_OT_INFO_TAB
                            If (Out_rfcTable_E_OT_INFO_TAB.GetObject("Tanum") > 0) Then
                                outOT_Number(LoopIndex) = clsSapUtility.GetRFCStructParamToString(rfcRow, "Tanum")
                                outOTMoveUdsExecvuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If
                            LoopIndex += 1
                        Next
                    End If
                End If


                For Each rfcRow In rfcTable_E_ZWMS_UDS_TAB
                    WorkRow = outDataTable.NewRow()
                    For i = 0 To rfcTable_E_ZWMS_UDS_TAB.RowCount
                        WorkRow.Item("WERKS") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("WERKS").Name)
                        WorkRow.Item("LGNUM") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LGNUM").Name)
                        WorkRow.Item("LENUM") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LENUM").Name)
                        WorkRow.Item("VBELN") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("VBELN").Name)
                        WorkRow.Item("ZNR_WMS_JOBSGRP") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ZNR_WMS_JOBSGRP").Name)
                        WorkRow.Item("ZUDS_BARCODE") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ZUDS_BARCODE").Name)
                        WorkRow.Item("LETYP") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LETYP").Name)
                        WorkRow.Item("LGTYP") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LGTYP").Name)
                        WorkRow.Item("LGPLA") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("LGPLA").Name)
                        WorkRow.Item("ZUDS_LOADED_TRUC") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ZUDS_LOADED_TRUC").Name)
                        WorkRow.Item("DATA_TRUCK_LOAD") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("DATA_TRUCK_LOAD").Name)
                        WorkRow.Item("ORA_TRUCK_LOAD") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("ORA_TRUCK_LOAD").Name)
                        WorkRow.Item("USERID_RF_TRUCLD") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("USERID_RF_TRUCLD").Name)
                        WorkRow.Item("USERID") = rfcRow.GetString(rfcTable_E_ZWMS_UDS_TAB.GetElementMetadata("USERID").Name)
                    Next

                    outDataTable.Rows.Add(WorkRow)
                Next
            End If

#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outSuccesOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_JOB_UDS_DROP = RetCode 'errore
            Else
                Call_ZWMS_JOB_UDS_DROP = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWM_CHECK_DROP_UBICAZIONE(ByVal inInfoRicercaUbicazione As clsDataType.SapWmUbicazione, ByRef outCheckOk As Boolean, ByRef outUbicazioneStruct As clsDataType.SapWmUbicazione, ByRef outDatiGiacenze() As clsDataType.SapWmGiacenza, ByRef outNrUDC As Long, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0


        Dim WorkGiacenza As clsDataType.SapWmGiacenza
        Dim WorkLoopIndex As Long = 0
        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWM_CHECK_DROP_UBICAZIONE = 1 'INIT AT ERROR

            outNrUDC = 0
            outCheckOk = False

            If (Len(inInfoRicercaUbicazione.Ubicazione) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1122, "", " CHECK UBICAZIONE. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1089, "", "Ubicazione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP WEB SERVICE

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer
            Dim rfcFunction_ZWMS_UBI_SPECIAL As IRfcStructure

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_CHECK_DROP_UBICAZIONE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGPLA", inInfoRicercaUbicazione.Ubicazione)
            rfcFunction.SetValue("I_LGTYP", inInfoRicercaUbicazione.TipoMagazzino)
            rfcFunction.SetValue("I_LGNUM", inInfoRicercaUbicazione.NumeroMagazzino)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then


                rfcFunction_ZWMS_UBI_SPECIAL = rfcFunction.GetStructure("E_ZWMS_UBI_SPECIAL")

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Check_Ok") = "Y") Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK
                End If

                outNrUDC = rfcFunction.GetElementMetadata("E_NUM_UDC").NucLength 'RITORNO NUMERO DI UDC

                'RITORNO DATI DELL'UBICAZIONE TROVATA
                outUbicazioneStruct.Divisione = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_WERKS")

                rfcRow = rfcFunction.GetStructure("E_DATA")

                outUbicazioneStruct.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                outUbicazioneStruct.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                outUbicazioneStruct.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                outUbicazioneStruct.UnitaMagazzino = ""
                'RECUPERO DATI DELL'UBICAZIONE DALLA STRUTTURA DELLE UBICAZIONI SPECIALI
                If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_DOOR") = "X") Then
                    outUbicazioneStruct.FlagLocationDoor = True
                Else
                    outUbicazioneStruct.FlagLocationDoor = False
                End If
                If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_STAG_DOOR") = "X") Then
                    outUbicazioneStruct.FlagLocationStagingDoor = True
                Else
                    outUbicazioneStruct.FlagLocationStagingDoor = False
                End If
                If (clsSapUtility.GetRFCStructParamToString(rfcFunction_ZWMS_UBI_SPECIAL, "ZFLAG_WRAP") = "X") Then
                    outUbicazioneStruct.FlagLocationWrapping = True
                Else
                    outUbicazioneStruct.FlagLocationWrapping = False
                End If


                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_GESTIONE_UM_ATTIVA") = "X") Then
                    outUbicazioneStruct.AbilitaUnitaMagazzino = True
                Else
                    outUbicazioneStruct.AbilitaUnitaMagazzino = False
                End If

                outUbicazioneStruct.NumeroUdcInUbicazione = rfcFunction.GetElementMetadata("E_NUM_UDC").NucLength 'NUMERO DI UDC CONTENUTI NELL'UBICAZIONE


                rfcTable = rfcFunction.GetTable("E_TAB_STOCK_MATERIAL")

                If (rfcTable.RowCount > 0) Then
                    ReDim outDatiGiacenze(rfcTable.RowCount - 1)

                    For Each rfcRow In rfcTable

                        WorkGiacenza.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Letyp")
                        WorkGiacenza.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                        WorkGiacenza.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgort")
                        WorkGiacenza.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                        WorkGiacenza.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                        WorkGiacenza.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Werks")
                        WorkGiacenza.UbicazioneInfo.CapacitaUdcUbicazione = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Lagp_Lkapv")
                        WorkGiacenza.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "Matnr")
                        WorkGiacenza.Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "Charg")
                        WorkGiacenza.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "Maktg")
                        WorkGiacenza.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "Meins")
                        WorkGiacenza.UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToString(rfcRow, "Vrkme")
                        WorkGiacenza.QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Ausme")
                        WorkGiacenza.QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Ausme_Cons")
                        WorkGiacenza.QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Einme")
                        WorkGiacenza.QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Einme_Cons")
                        WorkGiacenza.QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme")
                        WorkGiacenza.QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme_Cons")
                        WorkGiacenza.QtaTotaleInStockInUdmPZ = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme_Pz")
                        WorkGiacenza.QtaTotaleInStockSfusi = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Gesme_SF")
                        WorkGiacenza.QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme")
                        WorkGiacenza.QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme_Cons")
                        WorkGiacenza.QtaTotaleDispoInUdmPZ = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme_Pz")
                        WorkGiacenza.QtaTotaleDispoSfusi = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "Verme_SF")
                        outDatiGiacenze(WorkLoopIndex) = WorkGiacenza
                    Next
                End If
            End If

#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1060, "", "Ubicazione non definita.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWM_CHECK_DROP_UBICAZIONE = RetCode 'caso di errore
            Else
                Call_ZWM_CHECK_DROP_UBICAZIONE = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWS_GET_UBI_DROP(ByVal inNrMagazzino As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0

        Dim objWS As New WS_GET_UBI_SPUNTA.ZWS_GET_UBI_SPUNTA
        Dim stImportParams As New WS_GET_UBI_SPUNTA.ZwmsGetUbiSpunta
        Dim objWSResponse As New WS_GET_UBI_SPUNTA.ZwmsGetUbiSpuntaResponse


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_UBI_DROP = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


            If (Len(inNrMagazzino) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            stImportParams.ILgnum = inNrMagazzino


            '>>>> IMPOSTO LE CREDENZIALI DELLO USER
            objNetworkCredential.UserName = UserRfcWs
            objNetworkCredential.Password = PswUserRfcWs
            objWS.Credentials = objNetworkCredential

            '>>> IMPOSTO URL DINAMICO PER GESTIRE I DIVERSI AMBIENTI (DEV/TEST/PRODUZIONE)
            objWS.Url = "http://" & WsHostName & ":" & WsPortNumber & "/sap/bc/srt/rfc/sap/zws_get_ubi_spunta/" & SapClient & "/zws_get_ubi_spunta/zws_get_ubi_spunta"


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            objWSResponse = objWS.ZwmsGetUbiSpunta(stImportParams)
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA

            If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK
                If (objWSResponse.EZwmsUbiSpuntaTab.Length > 0) Then
                    For Index = 0 To objWSResponse.EZwmsUbiSpuntaTab.Length - 1
                        WorkRow = outDataTable.NewRow()
                        WorkRow.Item("Lgnum") = objWSResponse.EZwmsUbiSpuntaTab(Index).Lgnum
                        WorkRow.Item("Lgpla") = objWSResponse.EZwmsUbiSpuntaTab(Index).Lgpla
                        WorkRow.Item("Lgtyp") = objWSResponse.EZwmsUbiSpuntaTab(Index).Lgtyp
                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga
                    Next
                End If
            End If


#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_UBI_DROP")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGNUM", inNrMagazzino)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (rfcFunction.GetObject("E_Foundrows") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_ZWMS_UBI_DROP_TAB")


                'If (rfcTable.ElementCount > 0) Then
                If (rfcTable.RowCount > 0) Then

                    For Each rfcRow In rfcTable

                        WorkRow = outDataTable.NewRow()

                        WorkRow.Item("Lgtyp") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                        WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                        WorkRow.Item("Lgpla") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                        WorkRow.Item("ZWMSUBI_DESCR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMSUBI_DESCR")
                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga

                    Next
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_UBI_DROP = RetCode
            Else
                Call_ZWS_GET_UBI_DROP = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWMS_JOB_PICK_INTO_UDS(ByRef inWorkPickedGiacenze() As clsDataType.SapWmGiacenza, ByVal inFlagForcedStepEnded As Boolean, ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByRef inCurrentTaskLinesInfo As clsDataType.SapTaskLinesInfo, ByRef inCurrentTaskLines As clsDataType.SapTaskLinesSingle, ByRef outClsUDS As clsUDS, ByVal InDivisione As String, ByVal InNumeroMagazzino As String, ByRef inSapForkLiftStruct As clsDataType.SapForkLiftStruct, ByRef inUbicazioneDestinazione As clsDataType.SapWmUbicazione, ByVal inLingua As String, ByRef outOT_Number() As clsDataType.SapWmOtInfo, ByRef outPickOk As Boolean, ByRef outZwmsJobsRec As clsDataType.SapWmWmsJob, ByRef outDataRowActiveJob As DataRow, ByRef outDataRowActiveTaskLines As DataRow, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        Dim LoopIndex As Integer = 0
        Dim wkWorkSapUDSInfo As clsDataType.SapWmGiacenza
        Dim NrUDSMove As Long

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_JOB_PICK_INTO_UDS = 1 'INIT AT ERROR

            outPickOk = False 'INIT

            If (clsUtility.IsStringValid(InDivisione, True) = False) Then
                RetCode = 180
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(6, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (clsUtility.IsStringValid(inUbicazioneDestinazione.NumeroMagazzino, True) = False) Then
                RetCode = 181
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (clsUtility.IsStringValid(inUbicazioneDestinazione.TipoMagazzino, True) = False) Then
                RetCode = 182
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (clsUtility.IsStringValid(inUbicazioneDestinazione.Ubicazione, True) = False) Then
                RetCode = 182
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1089, "", "Ubicazione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If



            If (inWorkPickedGiacenze.Length <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            'FACCIO IL CONTROLLO SOLO SE SONO IN TIPO MAGAZZINO CON  GESTION UM
            If (inWorkPickedGiacenze(0).UbicazioneInfo.AbilitaUnitaMagazzino = True) Then
                If (Len(inWorkPickedGiacenze(0).UbicazioneInfo.UnitaMagazzino) <= 0) Then
                    RetCode = 220
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                    If (inShowMessageBox = True) Then
                        MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                    End If
                    Exit Function
                End If
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service

#Else


            'SAP RFC
            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim Out_rfcTable_E_OT_INFO_TAB As IRfcTable
            Dim rfcTable_E_ZWMS_UDS_TAB As IRfcTable
            Dim rfcFunction_E_UDS_TRUCK_LOAD_INFO As IRfcStructure
            Dim rfcFunction_ZWMS_UDS As IRfcStructure
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_JOB_PICK_INTO_UDS")

            '**********************************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            '**********************************************************************************************
            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_ZWMS_JOB_PICK_TAB")
            Dim rfc_stImportParams() As rfc_I_ZWMS_JOB_PICK_TAB


            If (Not (inWorkPickedGiacenze Is Nothing)) Then
                NrUDSMove = -1 'INIT
                For Each wkWorkSapUDSInfo In inWorkPickedGiacenze
                    If (clsUtility.IsStringValid(wkWorkSapUDSInfo.CodiceMateriale, True) = True) Then
                        NrUDSMove = NrUDSMove + 1

                        ReDim Preserve rfc_stImportParams(NrUDSMove)

                        In_rfcTable.Append()

                        rfc_stImportParams(NrUDSMove).rfc_ZUDS_BARCODE = clsSapUtility.FormattaStringaUnitaMagazzinoPerSap((wkWorkSapUDSInfo.UbicazioneInfo.UnitaMagazzino))
                        rfc_stImportParams(NrUDSMove).rfc_ZNR_WMS_JOBS = UCase(wkWorkSapUDSInfo.NrWmsJobs)
                        rfc_stImportParams(NrUDSMove).rfc_MATNR_ORI = UCase(wkWorkSapUDSInfo.CodiceMateriale)
                        rfc_stImportParams(NrUDSMove).rfc_WERKS_ORI = UCase(wkWorkSapUDSInfo.UbicazioneInfo.Divisione)
                        rfc_stImportParams(NrUDSMove).rfc_LGORT_ORI = UCase(wkWorkSapUDSInfo.MagazzinoLogico)
                        rfc_stImportParams(NrUDSMove).rfc_CHARG_ORI = UCase(wkWorkSapUDSInfo.Partita)
                        rfc_stImportParams(NrUDSMove).rfc_LGNUM_ORI = UCase(wkWorkSapUDSInfo.UbicazioneInfo.NumeroMagazzino)
                        rfc_stImportParams(NrUDSMove).rfc_LGTYP_ORI = UCase(wkWorkSapUDSInfo.UbicazioneInfo.TipoMagazzino)
                        rfc_stImportParams(NrUDSMove).rfc_LGPLA_ORI = UCase(wkWorkSapUDSInfo.UbicazioneInfo.Ubicazione)
                        rfc_stImportParams(NrUDSMove).rfc_LENUM_ORI = UCase(wkWorkSapUDSInfo.UbicazioneInfo.UnitaMagazzino)
                        If (clsUtility.IsStringValid(clsWmsJob.UDSOnWork.UDSInfo.UbicazioneInfo.TipoUnitaMagazzino, True) = False) Then
                            rfc_stImportParams(NrUDSMove).rfc_LETYP = "PP"
                        Else
                            rfc_stImportParams(NrUDSMove).rfc_LETYP = "PP"
                            '                            rfc_stImportParams(NrUDSMove).rfc_LETYP = UCase(wkWorkSapUDSInfo.UbicazioneInfo.TipoUnitaMagazzino)
                        End If



                        rfc_stImportParams(NrUDSMove).rfc_MATNR_DEST = UCase(wkWorkSapUDSInfo.CodiceMateriale)
                        rfc_stImportParams(NrUDSMove).rfc_WERKS_DEST = UCase(wkWorkSapUDSInfo.UbicazioneInfo.Divisione)
                        rfc_stImportParams(NrUDSMove).rfc_LGORT_DEST = UCase(wkWorkSapUDSInfo.MagazzinoLogico)
                        rfc_stImportParams(NrUDSMove).rfc_CHARG_DEST = UCase(wkWorkSapUDSInfo.Partita)
                        rfc_stImportParams(NrUDSMove).rfc_LGNUM_DEST = UCase(inUbicazioneDestinazione.NumeroMagazzino)
                        rfc_stImportParams(NrUDSMove).rfc_LGTYP_DEST = UCase(inUbicazioneDestinazione.TipoMagazzino)
                        rfc_stImportParams(NrUDSMove).rfc_LGPLA_DEST = UCase(inUbicazioneDestinazione.Ubicazione)
                        rfc_stImportParams(NrUDSMove).rfc_LENUM_DEST = UCase(inUbicazioneDestinazione.UnitaMagazzino)

                        'rfc_stImportParams(NrUDSMove).rfc_BESTQ = UCase(wkWorkSapUDSInfo.UbicazioneInfo.UnitaMagazzino)
                        'rfc_stImportParams(NrUDSMove).rfc_SOBKZ = UCase(wkWorkSapUDSInfo.UbicazioneInfo.UnitaMagazzino)
                        'rfc_stImportParams(NrUDSMove).rfc_SONUM = UCase(wkWorkSapUDSInfo.UbicazioneInfo.UnitaMagazzino)
                        rfc_stImportParams(NrUDSMove).rfc_QTA_PICKED = UCase(wkWorkSapUDSInfo.QuantitaConfermataOperatore)
                        rfc_stImportParams(NrUDSMove).rfc_UDM_QTA_PICKED = UCase(wkWorkSapUDSInfo.UnitaDiMisuraAcquisizione)
                        rfc_stImportParams(NrUDSMove).rfc_FLAG_PICK_ENDED = UCase(inFlagForcedStepEnded)
                        rfc_stImportParams(NrUDSMove).rfc_ZINFO_PRELIEVO = UCase(inSapWmWmsJob.InfoPrelievo)


                        In_rfcTable.SetValue("ZUDS_BARCODE", rfc_stImportParams(NrUDSMove).rfc_ZUDS_BARCODE)
                        In_rfcTable.SetValue("ZNR_WMS_JOBS", rfc_stImportParams(NrUDSMove).rfc_ZNR_WMS_JOBS)
                        In_rfcTable.SetValue("ZNR_TASK_LINES", inCurrentTaskLines.NrTaskLines)
                        In_rfcTable.SetValue("WERKS_ORI", rfc_stImportParams(NrUDSMove).rfc_WERKS_ORI)
                        In_rfcTable.SetValue("MATNR_ORI", rfc_stImportParams(NrUDSMove).rfc_MATNR_ORI)

                        'Dim In_Werks As IRfcStructure = In_rfcTable.GetStructure("WERKS")
                        'In_Werks.SetValue("WERKS", rfc_stImportParams(NrUDSMove).rfc_WERKS_ORI)
                        'In_rfcTable.SetValue("WERKS", In_Werks)

                        In_rfcTable.SetValue("LGORT_ORI", rfc_stImportParams(NrUDSMove).rfc_LGORT_ORI)
                        In_rfcTable.SetValue("CHARG_ORI", rfc_stImportParams(NrUDSMove).rfc_CHARG_ORI)
                        In_rfcTable.SetValue("LGNUM_ORI", rfc_stImportParams(NrUDSMove).rfc_LGNUM_ORI)
                        In_rfcTable.SetValue("LGTYP_ORI", rfc_stImportParams(NrUDSMove).rfc_LGTYP_ORI)
                        In_rfcTable.SetValue("LGPLA_ORI", rfc_stImportParams(NrUDSMove).rfc_LGPLA_ORI)
                        In_rfcTable.SetValue("LENUM_ORI", rfc_stImportParams(NrUDSMove).rfc_LENUM_ORI)
                        In_rfcTable.SetValue("LETYP", rfc_stImportParams(NrUDSMove).rfc_LETYP)

                        In_rfcTable.SetValue("MATNR_DEST", rfc_stImportParams(NrUDSMove).rfc_MATNR_DEST)
                        In_rfcTable.SetValue("WERKS_DEST", rfc_stImportParams(NrUDSMove).rfc_WERKS_DEST)
                        In_rfcTable.SetValue("LGORT_DEST", rfc_stImportParams(NrUDSMove).rfc_LGORT_DEST)
                        In_rfcTable.SetValue("CHARG_DEST", rfc_stImportParams(NrUDSMove).rfc_CHARG_DEST)
                        In_rfcTable.SetValue("LGNUM_DEST", rfc_stImportParams(NrUDSMove).rfc_LGNUM_DEST)
                        In_rfcTable.SetValue("LGTYP_DEST", rfc_stImportParams(NrUDSMove).rfc_LGTYP_DEST)
                        In_rfcTable.SetValue("LGPLA_DEST", rfc_stImportParams(NrUDSMove).rfc_LGPLA_DEST)
                        In_rfcTable.SetValue("LENUM_DEST", rfc_stImportParams(NrUDSMove).rfc_LENUM_DEST)

                        'rfc_stImportParams(NrUDSMove).rfc_BESTQ = UCase(wkWorkSapUDSInfo.UbicazioneInfo.UnitaMagazzino)
                        'rfc_stImportParams(NrUDSMove).rfc_SOBKZ = UCase(wkWorkSapUDSInfo.UbicazioneInfo.UnitaMagazzino)
                        'rfc_stImportParams(NrUDSMove).rfc_SONUM = UCase(wkWorkSapUDSInfo.UbicazioneInfo.UnitaMagazzino)
                        In_rfcTable.SetValue("QTA_PICKED", rfc_stImportParams(NrUDSMove).rfc_QTA_PICKED)
                        In_rfcTable.SetValue("UDM_QTA_PICKED", rfc_stImportParams(NrUDSMove).rfc_UDM_QTA_PICKED)
                        In_rfcTable.SetValue("FLAG_PICK_ENDED", rfc_stImportParams(NrUDSMove).rfc_FLAG_PICK_ENDED)
                        In_rfcTable.SetValue("ZINFO_PRELIEVO", rfc_stImportParams(NrUDSMove).rfc_ZINFO_PRELIEVO)

                        In_rfcTable.SetValue("ZUDS_CHANGE_OPER", rfc_stImportParams(NrUDSMove).rfc_ZUDS_CHANGE_OPER)

                    End If
                Next
            End If


            '>>> IMPOSTO I PARAMETRI SINGOLI DELLA FUNZIONE 
            rfcFunction.SetValue("I_LGNUM", InNumeroMagazzino)
            rfcFunction.SetValue("I_WERKS", InDivisione)
            rfcFunction.SetValue("I_ZID_WMS_FORKLIFT", inSapForkLiftStruct.IdForkLift)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_ZID_PICK_QUEUE", clsUser.SapWmsUser.ZID_PICK_QUEUE)
            rfcFunction.SetValue("I_ZWMS_COMPUTER", clsUtility.GetWorkStationName())
            Dim WorkVersion As String = ""
#If APPLICAZIONE_WIN32 = "SI" Then

            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion("", WorkVersion))
#Else
            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion())
#End If




            rfcFunction.SetValue("I_SPRAS", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            '*************************************************************************************************
            ' >>> VERIFICO ESECUZIONE DEL PICKING NELL'UDS
            '*************************************************************************************************
            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then


                Dim Out_rfcStruct_FORKLIFT As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_FORKLIFT")
                Dim Out_rfcStruct_UDS_WEIGHT_INFO As IRfcStructure = rfcFunction.GetStructure("E_UDS_WEIGHT_INFO")
                Dim Out_rfcStruct_ZWMS_UDS_MAIN_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_UDS_MAIN_INFO")
                Dim Out_rfcStruct_ZWMS_TASK_LINES As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_TASK_LINES")
                Dim Out_rfcStruct_ZWMS_TASK_LINES_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_TASK_LINES_INFO")
                Dim Out_rfcTable_ZWMS_UDS_MATNR_TAB As IRfcTable = rfcFunction.GetTable("E_ZWMS_UDS_MATNR_TAB")
                Dim Out_rfcTable_ZWMS_JOBS As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_REC")
                Dim Out_rfcTable_ZWMS_JOBS_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_INFO_REC")
                Dim Out_rfcTable_ZWMS_JOBS_TYPE As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_TYPE_REC")
                'Dim VarianteImballo As IRfcStructure = rfcFunction.GetStructure("VARIANTE_IMBALLO")

                Out_rfcTable_E_OT_INFO_TAB = rfcFunction.GetTable("E_OT_INFO_TAB")


                '>>> RITORNO DATI DELL'OT
                If (Not Out_rfcTable_E_OT_INFO_TAB Is Nothing) Then
                    If (Out_rfcTable_E_OT_INFO_TAB.RowCount > 0) Then
                        LoopIndex = 0
                        ReDim outOT_Number(Out_rfcTable_E_OT_INFO_TAB.RowCount - 1)
                        For Each rfcRow In Out_rfcTable_E_OT_INFO_TAB
                            If (Out_rfcTable_E_OT_INFO_TAB.GetObject("Tanum") > 0) Then
                                outOT_Number(LoopIndex).NumeroOrdineDiTrasferimento = clsSapUtility.GetRFCStructParamToString(rfcRow, "Tanum")
                                outPickOk = True 'UNICO CASO DI ESECUZIONE OK
                            End If
                            LoopIndex += 1
                        Next
                    End If
                End If

                inSapForkLiftStruct.Divisione = "" 'clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "ZNR_WMS_JOBS")
                inSapForkLiftStruct.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "LGNUM")
                inSapForkLiftStruct.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "LGTYP")
                inSapForkLiftStruct.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "LGPLA")
                inSapForkLiftStruct.IdForkLift = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "ZID_WMS_FORKLIFT")
                inSapForkLiftStruct.DescrizioneForkLift = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "ZDESCR_WMS_FORKLIFT")
                inSapForkLiftStruct.ForkLiftMaxPesoCarico = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_FORKLIFT, "ZFORKLIFT_MAX_PESO")
                inSapForkLiftStruct.UdmPeso = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_FORKLIFT, "GEWEI")
                'INFO RECUPERATA DA UN PARAMETRO SINGOLO DELLA FUNCTION
                inSapForkLiftStruct.NumUdsOnForklift = clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_NUM_UDS_ON_FORKLIFT")


                '*********************************************************************************************************************************************
                'RECUPERO DATI DELL'EVENTUALE UDS A BORDO DEL CARRELLO 
                '*********************************************************************************************************************************************
                If (outClsUDS Is Nothing) Then
                    outClsUDS = New clsUDS
                End If
                If (inSapForkLiftStruct.NumUdsOnForklift > 0) Then
                    'HO UN UDS A BORDO DEL FORKLIFT ( RECUPERO INFO DEL PESO )
                    outClsUDS.UDSWeightInfo.PesoTotaleUDS_Kg = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_UDS_WEIGHT_INFO, "ZWMS_PESOMAT_EU")
                    outClsUDS.UDSWeightInfo.UdmPesoKg = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_UDS_WEIGHT_INFO, "GEWEI_EU")
                    outClsUDS.UDSWeightInfo.PesoTotaleUDS_Lb = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_UDS_WEIGHT_INFO, "ZWMS_PESOMAT_USA")
                    outClsUDS.UDSWeightInfo.UdmPesoLb = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_UDS_WEIGHT_INFO, "GEWEI_USA")

                    '>>> RITORNO LE INFORMAZIONI PRINCIPALI DELLA UDS
                    If (Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS") Is Nothing)) Then
                        'outClsUDS.UDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS")
                        outClsUDS.UDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS", 0)
                    End If
                    If (Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBSGRP") Is Nothing)) Then
                        outClsUDS.UDSInfo.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBSGRP")
                    End If

                    outClsUDS.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LENUM"))

                    outClsUDS.UDSInfo.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "MAKTG")
                    outClsUDS.UDSInfo.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZQTA_PREL_BASE")
                    outClsUDS.UDSInfo.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "UDM_QTAPR_MEINS")
                    outClsUDS.UDSInfo.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZQTA_PREL_CONS")
                    outClsUDS.UDSInfo.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "UDM_QTAPR_CONS")
                    outClsUDS.UDSInfo.QtaPrelevataInUdMPezzo = 0
                    outClsUDS.UDSInfo.UdmQtaPrelevataInUdMPezzo = ""

                    outClsUDS.UDSInfo.PickSUCompleto = False

                    outClsUDS.UDSInfo.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "WERKS")
                    outClsUDS.UDSInfo.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGNUM")
                    outClsUDS.UDSInfo.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGTYP")
                    outClsUDS.UDSInfo.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGPLA")
                    outClsUDS.UDSInfo.UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                    outClsUDS.UDSInfo.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LETYP")
                    outClsUDS.UDSInfo.UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                    outClsUDS.UDSInfo.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGORT")

                    '>>> SE NECESSARIO VALORIZZO IL CODICE MATERIALE
                    If (outClsUDS.UDSInfo.CodiceMateriale = "") And (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "MATNR"), True) = True) Then
                        outClsUDS.UDSInfo.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "MATNR")
                    End If

                    '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE (SE NE HO UNA VALIDA PRENDO QUELLA
                    If (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "CHARG"), True) = True) Then
                        outClsUDS.UDSInfo.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "CHARG")
                    End If

                    outClsUDS.UDSInfo.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "SOBKZ")
                    outClsUDS.UDSInfo.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "SONUM")
                    outClsUDS.UDSInfo.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "BESTQ")
                    outClsUDS.UDSInfo.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "TBNUM")

                    outClsUDS.UDSInfo.TruckDayNr = ""
                    outClsUDS.UDSInfo.TrasfNumPallet = 0

                    'SE E' PRESENTE UN UDS A BORDO DEL FORKLIFT RITORNO LE INFO DEI COMPONENTI DEL FORKLIFT
                    If (Out_rfcTable_ZWMS_UDS_MATNR_TAB.RowCount > 0) Then
                        ReDim outClsUDS.UDSInfo.Componenti(Out_rfcTable_ZWMS_UDS_MATNR_TAB.RowCount - 1)

                        'ESEGUO LOOP SU TUTTI I COMPONENTI DELLA UDS
                        Dim LoopIndexUdsMatn As Long = 0
                        For Each rfcRow In Out_rfcTable_ZWMS_UDS_MATNR_TAB

                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))

                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAKTG")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).QtaPrelevataInUdMPezzo = 0
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UdmQtaPrelevataInUdMPezzo = ""

                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).PickSUCompleto = False

                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).MagazzinoLogico = ""

                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                            outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")

                            LoopIndexUdsMatn = LoopIndexUdsMatn + 1
                        Next
                    End If

                End If



                '******************************************************************************************************************************************
                ' >>> RECUPERO DATI DELLA SINGOLA TASK LINE AGGIORNATA DOPO L'OPERAZIONE
                '******************************************************************************************************************************************
                Dim WorkTaskLinesInfoNrWmsJobs As String
                WorkTaskLinesInfoNrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "ZNR_WMS_JOBS")

                If (inCurrentTaskLinesInfo.NrWmsJobs = WorkTaskLinesInfoNrWmsJobs) Then
                    'RITORNO LE INFO PRINCIPALI DELLE TASK LINES
                    'inCurrentTaskLinesInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZNR_WMS_JOBS")
                    inCurrentTaskLinesInfo.TotalTaskLines = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES")
                    inCurrentTaskLinesInfo.TotalTaskLinesFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_FULL")
                    inCurrentTaskLinesInfo.TotalTaskLinesPartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_PARTIAL")
                    inCurrentTaskLinesInfo.TotalTaskLinesDone = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE")
                    inCurrentTaskLinesInfo.TotalTaskLinesDoneFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE_FL")
                    inCurrentTaskLinesInfo.TotalTaskLinesDonePartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE_PAR")
                    inCurrentTaskLinesInfo.TotalTaskLineOpen = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN")
                    inCurrentTaskLinesInfo.TotalTaskLinesOpenFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN_FL")
                    inCurrentTaskLinesInfo.TotalTaskLinesOpenPartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN_PAR")
                End If

                Dim WorkNrTaskLines As String
                WorkNrTaskLines = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "ZNR_TASK_LINES")
                If (inCurrentTaskLines.NrTaskLines = WorkNrTaskLines) Then
                    inCurrentTaskLines.NrTaskLines = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "ZNR_TASK_LINES")
                    'WorkRowTaskLines.Item("DATA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString
                    'WorkRowTaskLines.Item("ORA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString

                    'inCurrentTaskLines.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "ZNR_WMS_JOBS")
                    inCurrentTaskLines.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_TASK_LINES, "ZNR_WMS_JOBS", 0)

                    'inCurrentTaskLines. = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "ZTASK_LINES_SEQ")
                    inCurrentTaskLines.PickFullPartialType = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "ZPICKFULLPARTIAL")
                    inCurrentTaskLines.IdTaskLinesStatus = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "IDSTATUS")

                    inCurrentTaskLines.QtaJobRichiestaInUdmBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_ORI_BASE")
                    inCurrentTaskLines.UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "MEINS_BASE")
                    inCurrentTaskLines.QtaJobRichiestaInUdmConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_ORI_CONS")
                    inCurrentTaskLines.UnitaDiMisuraConsegna = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "MEINS_CONS")
                    inCurrentTaskLines.QtaJobRichiestaFullPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_FULL_PALL")
                    inCurrentTaskLines.QtaJobRichiestaPartialPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_PARTIAL")
                    inCurrentTaskLines.QtaJobRichiestaSfusiInPZ = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_SFUSI_PZ")


                    inCurrentTaskLines.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_BASE")
                    inCurrentTaskLines.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "UDM_QTAPR_BASE")
                    inCurrentTaskLines.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_CONS")
                    inCurrentTaskLines.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "UDM_QTAPR_CONS")

                    inCurrentTaskLines.QtaPrelevataInUdMPezzo = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_PZ")
                    'inCurrentTaskLines.Q = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_SC")
                    'WorkRowTaskLines.Item("ZQTA_PREL_PAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PAL")
                    inCurrentTaskLines.QtaPrelevataFullPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_FULL")
                    inCurrentTaskLines.QtaPrelevataPartialPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_PARTIA")
                    inCurrentTaskLines.QtaPrelevataSfusi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_SF")

                    inCurrentTaskLines.PesoTotaleMaterialeTaskLine_Kg = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZWMS_PESOMAT_EU")
                    inCurrentTaskLines.UdmPesoKg = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "GEWEI_EU")
                    inCurrentTaskLines.PesoTotaleMaterialeTaskLine_Lb = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZWMS_PESOMAT_USA")
                    inCurrentTaskLines.UdmPesoLb = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "GEWEI_USA")
                    inCurrentTaskLines.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "USERID_RF")

                    If (Not outDataRowActiveTaskLines Is Nothing) Then

                        'outDataRowActiveTaskLines.Item("ZNR_TASK_LINES") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZNR_TASK_LINES")

                        outDataRowActiveTaskLines.Item("DATA_CREAZIONE") = Out_rfcStruct_ZWMS_TASK_LINES.Item("DATA_CREAZIONE").GetString
                        outDataRowActiveTaskLines.Item("ORA_CREAZIONE") = Out_rfcStruct_ZWMS_TASK_LINES.Item("ORA_CREAZIONE").GetString

                        outDataRowActiveTaskLines.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "ZNR_WMS_JOBS")
                        outDataRowActiveTaskLines.Item("ZTASK_LINES_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "ZTASK_LINES_SEQ")
                        outDataRowActiveTaskLines.Item("ZPICKFULLPARTIAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "ZPICKFULLPARTIAL")
                        outDataRowActiveTaskLines.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "IDSTATUS")

                        outDataRowActiveTaskLines.Item("ZQTAPK_ORI_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_ORI_BASE")
                        outDataRowActiveTaskLines.Item("MEINS_BASE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "MEINS_BASE")
                        outDataRowActiveTaskLines.Item("ZQTAPK_ORI_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_ORI_CONS")
                        outDataRowActiveTaskLines.Item("MEINS_CONS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "MEINS_CONS")
                        outDataRowActiveTaskLines.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_FULL_PALL")
                        outDataRowActiveTaskLines.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_PARTIAL")
                        outDataRowActiveTaskLines.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTAPK_SFUSI_PZ")


                        outDataRowActiveTaskLines.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_BASE")
                        outDataRowActiveTaskLines.Item("UDM_QTAPR_BASE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "UDM_QTAPR_BASE")
                        outDataRowActiveTaskLines.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_CONS")
                        outDataRowActiveTaskLines.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "UDM_QTAPR_CONS")

                        outDataRowActiveTaskLines.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_PZ")
                        outDataRowActiveTaskLines.Item("ZQTA_PREL_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_SC")
                        outDataRowActiveTaskLines.Item("ZQTA_PREL_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_PAL")
                        outDataRowActiveTaskLines.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_FULL")
                        outDataRowActiveTaskLines.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_PARTIA")
                        outDataRowActiveTaskLines.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZQTA_PREL_SF")

                        outDataRowActiveTaskLines.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZWMS_PESOMAT_EU")
                        outDataRowActiveTaskLines.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "GEWEI_EU")
                        outDataRowActiveTaskLines.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES, "ZWMS_PESOMAT_USA")
                        outDataRowActiveTaskLines.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "GEWEI_USA")
                        outDataRowActiveTaskLines.Item("USERID_RF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_TASK_LINES, "USERID_RF")

                    End If
                End If
                '******************************************************************************************************************************************
                ' >>> RECUPERO DATI DELLA MISSIONE AGGIORNATI DOPO L'OPERAZIONE
                '******************************************************************************************************************************************
                Dim WorkNrWmsJobs As Long
                'WorkNrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_JOBS")
                WorkNrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_JOBS", 0)
                If (outZwmsJobsRec.NrWmsJobs = WorkNrWmsJobs) Then
                    'outZwmsJobsRec.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_JOBS")
                    'outZwmsJobsRec.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_JOBSGRP")
                    'outZwmsJobsRec.CodiceRaggruppoEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_GRPEXEC")
                    outZwmsJobsRec.IdWmsJobStatus = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "IDSTATUS")
                    outZwmsJobsRec.IdWmsJobStatusDescription = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_INFO, "STATUS")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "WERKS_ORI")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgort_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Matnr_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Charg_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Bestq_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sobkz_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sonum_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgnum_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgtyp_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgpla_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lenum_Ori")


                    ''>>> DATI QTA DA PRELEVARE E QTA PRELEVATE
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Meins_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmOriginale = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zqtapk_Ori")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.UnitaDiMisuraPezzo = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Meins_Pz")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmPZ = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zqtapk_Ori_Pz")

                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmSC = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zqtapk_Ori_Sc")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmPL = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zqtapk_Ori_Pl")

                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaFullPallet = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_FULL_PALL")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaPartialPallet = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_PARTIAL")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaSfusiInPZ = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zqtapk_Ori_Pz")

                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "Zqta_Prel_Base")
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Udm_Qtapr_Meins")
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "Zqta_Prel_Cons")
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Udm_Qtapr_Cons")

                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataFullPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_FULL")
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataPartialPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_PARTIA")
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataSfusi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_SF")
                    outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMPezzo = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_PZ")

                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.DescrizioneMateriale = SingoloRec.Maktg

                    '>>> DATI DESTINAZIONE
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Werks_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgort_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Matnr_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Charg_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Bestq_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sobkz_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sonum_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgnum_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgtyp_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lgpla_Dest")
                    'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Lenum_Dest")

                    'outZwmsJobsRec.Sequence = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sequence")
                    'outZwmsJobsRec.CurrentStep = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Current_Step")
                    'outZwmsJobsRec.NumeroStepTotali = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Num_Steps_Total")
                    'outZwmsJobsRec.DataCreazione = Out_rfcTable_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Data_Creazione")
                    'outZwmsJobsRec.OraCreazione = Out_rfcTable_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Ora_Creazione")
                    'outZwmsJobsRec.PickDbNumero = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Znrpick")
                    'outZwmsJobsRec.PickDbPosizione = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zpospk")
                    'outZwmsJobsRec.NumeroOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Vbeln")
                    'outZwmsJobsRec.NumeroPosizioneOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Posnr")
                    'outZwmsJobsRec.ConsegnaNumero = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Num_Cons_Vbelv")
                    'outZwmsJobsRec.ConsegnaPosizione = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Pos_Cons_Posnv")
                    'outZwmsJobsRec.IdWmsJobType = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Id_Jobs_Type")

                    'outZwmsJobsRec.IdWmsJobTypeDescription = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Descr_Jobs_Type")
                    'outZwmsJobsRec.TipoDirezioneMissioneKZEAR = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Kzear")

                    'outZwmsJobsRec.Priorita = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Priorita")
                    'outZwmsJobsRec.FlagRilevanteWM = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zflawm")

                    'WorkString = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "PalletInteri")
                    'If (WorkString = "X") Then
                    '    outZwmsJobsRec.FlagPalletInteri = True
                    'Else
                    '    outZwmsJobsRec.FlagPalletInteri = False
                    'End If
                    'WorkString = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ScatoleIntere")
                    'If (WorkString = "X") Then
                    '    outZwmsJobsRec.FlagScatoleIntere = True
                    'Else
                    '    outZwmsJobsRec.FlagScatoleIntere = False
                    'End If

                    'outZwmsJobsRec.FlagPartitaTassativa = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ChargTassativa")
                    outZwmsJobsRec.IdCarrellistaProposto = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZcarrProp")
                    outZwmsJobsRec.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZcarrExec")
                    'outZwmsJobsRec.TipoDocumento = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Zdoc")

                    'If (outZwmsJobsRec.TipoDocumento = clsSapUtility.cstSapTipoDocumentoReso) Then
                    '    outZwmsJobsRec.CondizioneDiReso = True
                    'Else
                    '    outZwmsJobsRec.CondizioneDiReso = False
                    'End If

                    'outZwmsJobsRec.Memo = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Memo")
                    'outZwmsJobsRec.DistintaDiCarico = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZzNdis")
                    outZwmsJobsRec.InfoPrelievo = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Info_Prelievo")

                    ''>>> GESTIONE VARIANTE IMBALLO
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.CodiceImballo = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Imballo")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.PezziPerScatola = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Pz_X_Sc")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.ScatolePerPallet = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "Sc_X_Pal")
                    'outZwmsJobsRec.MaterialeGiacenzaOrigine.VarianteImballo.M2PerPallet = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "M2_X_Pal")

                    'SE PASSATO IL DATA ROW AGGIORNO I DATI DELLA MISSIONE
                    Dim RowIDSTATUS As String
                    If (Not outDataRowActiveJob Is Nothing) Then
                        '****************************************************************************
                        '>>> GESTISCO CAMPO VIRTUALE CHE INDICA ALL'OPERATORE STATO DELLA RIGA
                        '****************************************************************************
                        Dim QtaDaPrelevareInUdmBase As Double = 0
                        Dim QtaPrelevataInUdmBase As Double = 0
                        Dim WorkQtaJobRichiestaFullPallet As Double = 0
                        Dim WorkQtaPrelevataFullPallet As Double = 0
                        Dim WorkQtaJobRichiestaPartialPallet As Double = 0
                        Dim WorkQtaPrelevataPartialPallet As Double = 0
                        Dim WorkQtaJobRichiestaSfusi As Double = 0
                        Dim WorkQtaPrelevataSfusi As Double = 0

                        QtaDaPrelevareInUdmBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_ORI_BASE")
                        QtaPrelevataInUdmBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_BASE")
                        WorkQtaJobRichiestaFullPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_FULL_PALL")
                        WorkQtaPrelevataFullPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_FULL")
                        WorkQtaJobRichiestaPartialPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_PARTIAL")
                        WorkQtaPrelevataPartialPallet = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_PARTIA")
                        WorkQtaJobRichiestaSfusi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_SFUSI_PZ")
                        WorkQtaPrelevataSfusi = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_SF")

                        RowIDSTATUS = clsSapUtility.GetRFCStructParamToLong(Out_rfcTable_ZWMS_JOBS, "IDSTATUS")
                        If ((RowIDSTATUS >= clsWmsJob.cstIdJobStatus_Verificato) Or (QtaPrelevataInUdmBase >= QtaDaPrelevareInUdmBase)) Then
                            outDataRowActiveJob.Item("GRID_EXECUTED") = "*"
                        ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Cancellato) Then
                            outDataRowActiveJob.Item("GRID_EXECUTED") = "D"
                        ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Sospeso) Then
                            outDataRowActiveJob.Item("GRID_EXECUTED") = "S"
                        ElseIf (clsWmsJob.IsLastStepJobDecori(WorkRow, False) = True) Then
                            outDataRowActiveJob.Item("GRID_EXECUTED") = "/"
                        ElseIf (RowIDSTATUS = clsWmsJob.cstIdJobStatus_Iniziato) Then
                            outDataRowActiveJob.Item("GRID_EXECUTED") = "W" 'IN LAVORAZIONE
                        Else
                            outDataRowActiveJob.Item("GRID_EXECUTED") = ""
                        End If

                        If (inCurrentTaskLines.PickFullPartialType = clsTaskLines.cstTaskLinesPickType_FullPallet) Then
                            ' >>> VERIFICO SE HO TERMINATO IL PRELIEVO DEI FULL PALLET
                            If (WorkQtaPrelevataFullPallet >= WorkQtaJobRichiestaFullPallet) And (WorkQtaJobRichiestaFullPallet > 0) Then
                                outDataRowActiveJob.Item("GRID_EXECUTED") = "*"
                            Else
                                '>>> CASO PARTICOLARE DEI  FULL PALLET. SE HO PIU DI 10 PALLET DA PRELEVARE HO DEI BLOCCHI DI TASK LINES DA
                                If (inCurrentTaskLinesInfo.TotalTaskLinesOpenFull = 0) Then
                                    outDataRowActiveJob.Item("GRID_EXECUTED") = "*"
                                End If
                            End If
                        ElseIf (inCurrentTaskLines.PickFullPartialType = clsTaskLines.cstTaskLinesPickType_PartialPallet) Then
                            'VERIFICO SE HO TERMINATO IL PRELIEVO DEL ( CASO PARTIAL PALLET )
                            If (WorkQtaPrelevataPartialPallet >= WorkQtaJobRichiestaPartialPallet) And (WorkQtaJobRichiestaPartialPallet > 0) And (WorkQtaJobRichiestaSfusi <= 0) Then
                                outDataRowActiveJob.Item("GRID_EXECUTED") = "*"
                            End If
                            If ((WorkQtaPrelevataPartialPallet >= WorkQtaJobRichiestaPartialPallet) And (WorkQtaJobRichiestaPartialPallet > 0)) And
                                 ((WorkQtaPrelevataSfusi >= WorkQtaJobRichiestaSfusi) And (WorkQtaJobRichiestaSfusi > 0)) Then
                                outDataRowActiveJob.Item("GRID_EXECUTED") = "*"
                            End If
                        ElseIf (inCurrentTaskLines.PickFullPartialType = clsTaskLines.cstTaskLinesPickType_PickPieces) Then
                            'VERIFICO SE HO TERMINATO IL PRELIEVO DEL ( CASO SFUSI )
                            If ((WorkQtaPrelevataPartialPallet >= WorkQtaJobRichiestaPartialPallet) And (WorkQtaJobRichiestaPartialPallet > 0)) And
                                ((WorkQtaPrelevataSfusi >= WorkQtaJobRichiestaSfusi) And (WorkQtaJobRichiestaSfusi > 0)) Then
                                outDataRowActiveJob.Item("GRID_EXECUTED") = "*"
                            End If
                            If (WorkQtaJobRichiestaPartialPallet <= 0) And ((WorkQtaPrelevataSfusi >= WorkQtaJobRichiestaSfusi) And (WorkQtaJobRichiestaSfusi > 0)) Then
                                outDataRowActiveJob.Item("GRID_EXECUTED") = "*"
                            End If
                        End If


                        outDataRowActiveJob.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_JOBS")
                        outDataRowActiveJob.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_JOBSGRP")
                        outDataRowActiveJob.Item("ZNR_WMS_GRPEXEC") = clsSapUtility.GetRFCStructParamToLong(Out_rfcTable_ZWMS_JOBS, "ZNR_WMS_GRPEXEC")
                        outDataRowActiveJob.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToLong(Out_rfcTable_ZWMS_JOBS, "IDSTATUS")

                        outDataRowActiveJob.Item("STATUS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_INFO, "STATUS")
                        outDataRowActiveJob.Item("STATUS_DESCR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_INFO, "STATUS_DESCR")
                        outDataRowActiveJob.Item("TKNUM") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_INFO, "TKNUM")
                        outDataRowActiveJob.Item("MAKTG") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_INFO, "MAKTG")

                        outDataRowActiveJob.Item("WERKS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "WERKS_ORI")
                        outDataRowActiveJob.Item("LGORT_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGORT_ORI")
                        outDataRowActiveJob.Item("MATNR_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "MATNR_ORI")
                        outDataRowActiveJob.Item("CHARG_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "CHARG_ORI")
                        outDataRowActiveJob.Item("BESTQ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "BESTQ_ORI")
                        outDataRowActiveJob.Item("SOBKZ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "SOBKZ_ORI")
                        outDataRowActiveJob.Item("SONUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "SONUM_ORI")
                        outDataRowActiveJob.Item("LGNUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGNUM_ORI")
                        outDataRowActiveJob.Item("LGTYP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGTYP_ORI")
                        outDataRowActiveJob.Item("LGPLA_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGPLA_ORI")
                        outDataRowActiveJob.Item("LENUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LENUM_ORI")
                        outDataRowActiveJob.Item("MEINS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "MEINS_ORI")
                        outDataRowActiveJob.Item("ZQTAPK_ORI") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_ORI")
                        outDataRowActiveJob.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "MEINS_PZ")
                        outDataRowActiveJob.Item("MEINS_SC") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "MEINS_SC")
                        outDataRowActiveJob.Item("MEINS_PAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "MEINS_PAL")
                        outDataRowActiveJob.Item("ZQTAPK_ORI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_ORI_PZ")
                        outDataRowActiveJob.Item("ZQTAPK_ORI_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_ORI_SC")
                        outDataRowActiveJob.Item("ZQTAPK_ORI_PL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_ORI_PL")

                        outDataRowActiveJob.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_FULL_PALL")
                        outDataRowActiveJob.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_PARTIAL")

                        outDataRowActiveJob.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTAPK_SFUSI_PZ")
                        outDataRowActiveJob.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_BASE")
                        outDataRowActiveJob.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "UDM_QTAPR_MEINS")
                        outDataRowActiveJob.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_CONS")
                        outDataRowActiveJob.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "UDM_QTAPR_CONS")

                        outDataRowActiveJob.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_FULL")
                        outDataRowActiveJob.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_PARTIA")
                        outDataRowActiveJob.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_SF")

                        outDataRowActiveJob.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcTable_ZWMS_JOBS, "ZQTA_PREL_PZ")
                        outDataRowActiveJob.Item("WERKS_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "WERKS_DEST")
                        outDataRowActiveJob.Item("LGORT_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGORT_DEST")
                        outDataRowActiveJob.Item("MATNR_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "MATNR_DEST")
                        outDataRowActiveJob.Item("CHARG_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "CHARG_DEST")
                        outDataRowActiveJob.Item("BESTQ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "BESTQ_DEST")
                        outDataRowActiveJob.Item("SOBKZ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "SOBKZ_DEST")
                        outDataRowActiveJob.Item("SONUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "SONUM_DEST")
                        outDataRowActiveJob.Item("LGNUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGNUM_DEST")
                        outDataRowActiveJob.Item("LGTYP_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGTYP_DEST")
                        outDataRowActiveJob.Item("LGPLA_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGPLA_DEST")
                        outDataRowActiveJob.Item("LENUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LENUM_DEST")
                        outDataRowActiveJob.Item("ZPICKFULLPARTIAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZPICKFULLPARTIAL")
                        outDataRowActiveJob.Item("SEQUENCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "SEQUENCE")
                        outDataRowActiveJob.Item("CURRENT_STEP") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "CURRENT_STEP")
                        outDataRowActiveJob.Item("NUM_STEPS_TOTAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "NUM_STEPS_TOTAL")
                        outDataRowActiveJob.Item("DATA_CREAZIONE") = Out_rfcTable_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString
                        outDataRowActiveJob.Item("ORA_CREAZIONE") = Out_rfcTable_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString
                        outDataRowActiveJob.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZNRPICK")
                        outDataRowActiveJob.Item("ZPOSPK") = clsSapUtility.GetRFCStructParamToLong(Out_rfcTable_ZWMS_JOBS, "ZPOSPK")
                        outDataRowActiveJob.Item("VBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "VBELN")
                        outDataRowActiveJob.Item("POSNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "POSNR")

                        outDataRowActiveJob.Item("NUM_CONS_VBELV") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "NUM_CONS_VBELV")
                        outDataRowActiveJob.Item("POS_CONS_POSNV") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "POS_CONS_POSNV")

                        outDataRowActiveJob.Item("ZWMS_STOP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZWMS_STOP_SEQ")
                        outDataRowActiveJob.Item("ZWMS_DROP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZWMS_DROP_SEQ")
                        outDataRowActiveJob.Item("EBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "EBELN")
                        outDataRowActiveJob.Item("EBELP") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "EBELP")

                        outDataRowActiveJob.Item("KUNNR_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "KUNNR_AG")
                        outDataRowActiveJob.Item("KUNNR_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "KUNNR_WE")
                        outDataRowActiveJob.Item("KUNNR_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "KUNNR_RG")

                        '>>> DESCRIZIONI CLIENTI ( STRUTTURA AD UN LIVELLO DIVERSO )
                        outDataRowActiveJob.Item("NAME_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_INFO, "NAME_AG")
                        outDataRowActiveJob.Item("NAME_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_INFO, "NAME_WE")
                        outDataRowActiveJob.Item("NAME_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_INFO, "NAME_RG")


                        outDataRowActiveJob.Item("ID_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ID_JOBS_TYPE")
                        outDataRowActiveJob.Item("DESCR_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_TYPE, "DESCR_JOBS_TYPE")
                        outDataRowActiveJob.Item("JOBS_TYPE_KZEAR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS_TYPE, "KZEAR")
                        outDataRowActiveJob.Item("PRIORITA") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "PRIORITA")
                        outDataRowActiveJob.Item("URGENTE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "URGENTE")
                        outDataRowActiveJob.Item("ZFLAWM") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZFLAWM")
                        outDataRowActiveJob.Item("PALLET_INTERI") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "PALLET_INTERI")
                        outDataRowActiveJob.Item("SCATOLE_INTERE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "SCATOLE_INTERE")
                        outDataRowActiveJob.Item("ZTIPO_ENTMERCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZTIPO_ENTMERCE")
                        outDataRowActiveJob.Item("ZFORCEDDEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZFORCEDDEST")
                        outDataRowActiveJob.Item("ZFORCSPUNTACONF") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZFORCSPUNTACONF")
                        outDataRowActiveJob.Item("CHARG_TASSATIVA") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "CHARG_TASSATIVA")
                        outDataRowActiveJob.Item("LGNUM_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGNUM_STAG_DOOR")
                        outDataRowActiveJob.Item("LGTYP_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGTYP_STAG_DOOR")
                        outDataRowActiveJob.Item("LGPLA_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGPLA_STAG_DOOR")
                        outDataRowActiveJob.Item("LGNUM_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGNUM_DOOCK_DOOR")
                        outDataRowActiveJob.Item("LGTYP_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGTYP_DOOCK_DOOR")
                        outDataRowActiveJob.Item("LGPLA_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "LGPLA_DOOCK_DOOR")
                        outDataRowActiveJob.Item("ZCARR_PROP") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZCARR_PROP")
                        outDataRowActiveJob.Item("ZCARR_EXEC") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZCARR_EXEC")
                        outDataRowActiveJob.Item("ZDOC") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZDOC")
                        outDataRowActiveJob.Item("MEMO") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "MEMO")
                        outDataRowActiveJob.Item("ZZ_NDIS") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "ZZ_NDIS")
                        outDataRowActiveJob.Item("INFO_PRELIEVO") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "INFO_PRELIEVO")
                        outDataRowActiveJob.Item("IMBALLO") = clsSapUtility.GetRFCStructParamToString(Out_rfcTable_ZWMS_JOBS, "IMBALLO")
                        'outDataRowActiveJob.Item("PZ_X_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "PZ_X_SC")
                        'outDataRowActiveJob.Item("SC_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "SC_X_PAL")
                        'outDataRowActiveJob.Item("M2_X_PAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_VARIANTE_IMBALLO, "M2_X_PAL")
                    End If
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outPickOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_JOB_PICK_INTO_UDS = RetCode 'errore
            Else
                Call_ZWMS_JOB_PICK_INTO_UDS = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_UDS_TO_MOVE(ByVal inDivisione As String, ByVal inGetUdsToStaging As Boolean, ByVal inGetUdsToLoad As Boolean, ByVal inUnitaMagazzino As String, ByVal inNumeroTrasporto As String, ByVal inNumeroConsegna As String, ByVal inUbicazione As String, ByVal inStagingDestinazione As String, ByVal inDockDestination As String, ByVal inGetOnlyNotLoaded As Boolean, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_UDS_TO_MOVE = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


            If (Len(inDivisione) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_UDS_TO_MOVE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_WERKS", inDivisione)
            rfcFunction.SetValue("I_LGNUM", clsUser.SapWmsUser.LGNUM)

            If (inUnitaMagazzino <> "") Then
                Dim In_rfcTable_I_LENUM_TAB As IRfcTable = rfcFunction.GetTable("I_LENUM_TAB")
                In_rfcTable_I_LENUM_TAB.Append()

                In_rfcTable_I_LENUM_TAB.SetValue("SIGN", "I")
                In_rfcTable_I_LENUM_TAB.SetValue("OPTION", "EQ")
                In_rfcTable_I_LENUM_TAB.SetValue("LOW", inUnitaMagazzino)
                In_rfcTable_I_LENUM_TAB.SetValue("HIGH", "")
            End If

            If (inNumeroConsegna <> "") Then
                Dim In_rfcTable_I_NUM_CONS_TAB As IRfcTable = rfcFunction.GetTable("I_NUM_CONS_TAB")
                In_rfcTable_I_NUM_CONS_TAB.Append()

                In_rfcTable_I_NUM_CONS_TAB.SetValue("SIGN", "I")
                In_rfcTable_I_NUM_CONS_TAB.SetValue("OPTION", "EQ")
                In_rfcTable_I_NUM_CONS_TAB.SetValue("LOW", inNumeroConsegna)
                In_rfcTable_I_NUM_CONS_TAB.SetValue("HIGH", "")
            End If


            rfcFunction.SetValue("I_TKNUM", inNumeroTrasporto)
            rfcFunction.SetValue("I_LGPLA", inUbicazione)

            If (clsUtility.IsStringValid(inStagingDestinazione, True) = True) Then
                rfcFunction.SetValue("I_LGTYP_STGDOOR", DefaultTipoMagStaging)
                rfcFunction.SetValue("I_LGPLA_STGDOOR", inStagingDestinazione)
            End If
            If (clsUtility.IsStringValid(inDockDestination, True) = True) Then
                rfcFunction.SetValue("I_LGTYP_DOOCK_DOOR", DefaultTipoMagDockDoor)
                rfcFunction.SetValue("I_LGPLA_DOOCK_DOOR", inDockDestination)
            End If

            If (inGetUdsToStaging = True) Then
                rfcFunction.SetValue("I_GET_UDS_TO_STAGING", "X")
            End If
            If (inGetUdsToLoad = True) Then
                rfcFunction.SetValue("I_GET_UDS_TO_LOAD", "X")
            End If

            rfcFunction.SetValue("I_GET_ONLY_NOT_LOADED", "X")

            rfcFunction.SetValue("I_SPRAS", clsUser.SapWmsUser.LANGUAGE)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK


                rfcTable = rfcFunction.GetTable("E_UDS_MATNR_TAB")


                If (rfcTable.RowCount > 0) Then

                    For Each rfcRow In rfcTable

                        WorkRow = outDataTable.NewRow()


                        WorkRow.Item("WERKS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        WorkRow.Item("LGNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        WorkRow.Item("ICON_ID") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ICON_ID")
                        WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                        WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                        WorkRow.Item("NUM_CONS_VBELV") = clsSapUtility.GetRFCStructParamToString(rfcRow, "NUM_CONS_VBELV")
                        WorkRow.Item("POS_CONS_POSNV") = clsSapUtility.GetRFCStructParamToString(rfcRow, "POS_CONS_POSNV")
                        WorkRow.Item("TKNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "TKNUM")
                        WorkRow.Item("ZWMS_STOP_SEQ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_STOP_SEQ")
                        WorkRow.Item("ZWMS_DROP_SEQ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_DROP_SEQ")
                        WorkRow.Item("LENUM") = clsSapUtility.FormattaStringaCodiceMateriale(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        WorkRow.Item("MATNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        WorkRow.Item("CHARG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")
                        WorkRow.Item("LETYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                        WorkRow.Item("LGTYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                        WorkRow.Item("LGPLA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                        WorkRow.Item("LGNUM_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM_STGDOOR")
                        WorkRow.Item("LGTYP_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP_STGDOOR")
                        WorkRow.Item("LGPLA_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA_STGDOOR")
                        WorkRow.Item("LGNUM_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM_DOOCK_DOOR")
                        WorkRow.Item("LGTYP_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP_DOOCK_DOOR")
                        WorkRow.Item("LGPLA_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA_DOOCK_DOOR")
                        WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_BASE")
                        WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_CONS")
                        WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                        WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_PZ")
                        WorkRow.Item("UDM_QTAPR_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_PZ")
                        WorkRow.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZWMS_PESOMAT_EU")
                        WorkRow.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_EU")
                        WorkRow.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZWMS_PESOMAT_USA")
                        WorkRow.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_USA")
                        WorkRow.Item("DATA_CREAZIONE") = rfcRow.Item("DATA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(rfcRow, "DATA_CREAZIONE")
                        WorkRow.Item("ORA_CREAZIONE") = rfcRow.Item("ORA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(rfcRow, "ORA_CREAZIONE")
                        WorkRow.Item("DATA_MODIFICA") = rfcRow.Item("DATA_MODIFICA").GetString 'clsSapUtility.GetRFCStructParamToString(rfcRow, "DATA_MODIFICA")
                        WorkRow.Item("ORA_MODIFICA") = rfcRow.Item("ORA_MODIFICA").GetString 'clsSapUtility.GetRFCStructParamToString(rfcRow, "ORA_MODIFICA")
                        WorkRow.Item("USERID_RF_CREA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_CREA")
                        WorkRow.Item("USERID_RF_MOD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_MOD")
                        WorkRow.Item("USERID") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")
                        WorkRow.Item("ZUDS_CHECK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZUDS_CHECK")
                        WorkRow.Item("ZQTA_PREL_BASE_CHK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_BASE_CHK")
                        WorkRow.Item("ZQTA_PREL_CONS_CHK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_CONS_CHK")
                        WorkRow.Item("ZWMS_LOAD_MERCI") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_LOAD_MERCI")
                        WorkRow.Item("ZLOADSTATUS_DESCR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZLOADSTATUS_DESCR")
                        WorkRow.Item("DATA_LOAD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "DATA_LOAD")
                        WorkRow.Item("ORA_LOAD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ORA_LOAD")


                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga

                    Next
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_UDS_TO_MOVE = RetCode 'errore
            Else
                Call_ZWS_GET_UDS_TO_MOVE = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_UDC_TO_MOVE(ByVal inDivisione As String, ByVal inGetOnly902 As Boolean, ByVal inGetOnlySpunta As Boolean, ByVal inGetOnlyProd As Boolean, ByVal inGetOnlyExt As Boolean, ByVal inGetOnlyStaging As Boolean, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_UDC_TO_MOVE = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


            If (Len(inDivisione) <= 0) Then
                RetCode = 11
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure


            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_UDC_TO_MOVE")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_WERKS", inDivisione)
            rfcFunction.SetValue("I_LGNUM", clsUser.SapWmsUser.LGNUM)

            If (inGetOnly902) Then
                rfcFunction.SetValue("I_GET_ONLY_902", "X")
            Else
                rfcFunction.SetValue("I_GET_ONLY_902", "")
            End If

            If (inGetOnlySpunta) Then
                rfcFunction.SetValue("I_GET_ONLY_SPUNTA", "X")
            Else
                rfcFunction.SetValue("I_GET_ONLY_SPUNTA", "")
            End If

            If (inGetOnlyProd) Then
                rfcFunction.SetValue("I_LGPLA", "PRDST1")
                rfcFunction.SetValue("I_GET_ONLY_SPUNTA", "X")
            ElseIf (inGetOnlyExt) Then
                rfcFunction.SetValue("I_LGPLA", "IMPSE1")
                rfcFunction.SetValue("I_GET_ONLY_SPUNTA", "X")
            Else
                rfcFunction.SetValue("I_LGPLA", "")
            End If


            If (inGetOnlyStaging) Then
                rfcFunction.SetValue("I_GET_ONLY_STAGING", "X")
            Else
                rfcFunction.SetValue("I_GET_ONLY_STAGING", "")
            End If

            'DETERMINO IL NUMERO MAX DI RECORD RITORNATI
            rfcFunction.SetValue("I_MAX_RET_ROWS", DefaultEM_List_MaxNumRowReturned)


            rfcFunction.SetValue("I_SPRAS", clsUser.SapWmsUser.LANGUAGE)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") And (clsSapUtility.GetRFCParameterToLong(rfcFunction, "E_Foundrows") > 0) Then
                outGetOk = True 'UNICO CASO DI CHECK OK


                rfcTable = rfcFunction.GetTable("E_UDC_MATNR_TAB")


                If (rfcTable.RowCount > 0) Then

                    For Each rfcRow In rfcTable

                        WorkRow = outDataTable.NewRow()


                        WorkRow.Item("WERKS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        WorkRow.Item("LGNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        WorkRow.Item("ICON_ID") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ICON_ID")
                        'WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                        'WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                        WorkRow.Item("NUM_CONS_VBELV") = clsSapUtility.GetRFCStructParamToString(rfcRow, "NUM_CONS_VBELV")
                        'WorkRow.Item("POS_CONS_POSNV") = clsSapUtility.GetRFCStructParamToString(rfcRow, "POS_CONS_POSNV")
                        WorkRow.Item("TKNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "TKNUM")
                        WorkRow.Item("ZWMS_STOP_SEQ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_STOP_SEQ")
                        WorkRow.Item("ZWMS_DROP_SEQ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_DROP_SEQ")
                        WorkRow.Item("LENUM") = clsSapUtility.FormattaStringaCodiceMateriale(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        WorkRow.Item("MATNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        WorkRow.Item("CHARG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")

                        WorkRow.Item("MBLNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MBLNR")
                        WorkRow.Item("MJAHR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MJAHR")
                        WorkRow.Item("ZEILE") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZEILE")

                        'WorkRow.Item("LETYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                        WorkRow.Item("LGTYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                        WorkRow.Item("LGPLA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                        'WorkRow.Item("LGNUM_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM_DOOCK_DOOR")
                        WorkRow.Item("LGTYP_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP_DOOCK_DOOR")
                        WorkRow.Item("LGPLA_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA_DOOCK_DOOR")
                        'WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_BASE")
                        'WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        'WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_CONS")
                        'WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                        'WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_PZ")
                        'WorkRow.Item("UDM_QTAPR_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_PZ")
                        'WorkRow.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_PESOMAT_EU")
                        'WorkRow.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_EU")
                        'WorkRow.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_PESOMAT_USA")
                        'WorkRow.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_USA")
                        'WorkRow.Item("DATA_CREAZIONE") = rfcRow.Item("DATA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(rfcRow, "DATA_CREAZIONE")
                        'WorkRow.Item("ORA_CREAZIONE") = rfcRow.Item("ORA_CREAZIONE").GetString 'clsSapUtility.GetRFCStructParamToString(rfcRow, "ORA_CREAZIONE")
                        'WorkRow.Item("DATA_MODIFICA") = rfcRow.Item("DATA_MODIFICA").GetString 'clsSapUtility.GetRFCStructParamToString(rfcRow, "DATA_MODIFICA")
                        'WorkRow.Item("ORA_MODIFICA") = rfcRow.Item("ORA_MODIFICA").GetString 'clsSapUtility.GetRFCStructParamToString(rfcRow, "ORA_MODIFICA")
                        'WorkRow.Item("USERID_RF_CREA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_CREA")
                        'WorkRow.Item("USERID_RF_MOD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_MOD")
                        'WorkRow.Item("USERID") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")
                        'WorkRow.Item("ZUDS_CHECK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZUDS_CHECK")
                        'WorkRow.Item("ZQTA_PREL_BASE_CHK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_BASE_CHK")
                        'WorkRow.Item("ZQTA_PREL_CONS_CHK") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZQTA_PREL_CONS_CHK")
                        'WorkRow.Item("ZWMS_LOAD_MERCI") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_LOAD_MERCI")
                        'WorkRow.Item("ZLOADSTATUS_DESCR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZLOADSTATUS_DESCR")
                        'WorkRow.Item("DATA_LOAD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "DATA_LOAD")
                        'WorkRow.Item("ORA_LOAD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ORA_LOAD")


                        outDataTable.Rows.Add(WorkRow) 'aggiungo la riga

                    Next
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_UDC_TO_MOVE = RetCode 'errore
            Else
                Call_ZWS_GET_UDC_TO_MOVE = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWMS_CHECK_ID_FORKLIFT(ByVal inNumMagazzino As String, ByVal inIdCarrellistaEsecuzione As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long
        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_CHECK_ID_FORKLIFT = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


#If Not APPLICAZIONE_WIN32 = "SI" Then
			'Solo RFCFunction
#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            
            

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_CHECK_ID_FORKLIFT")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGNUM", inNumMagazzino)
            rfcFunction.SetValue("I_ZID_WMS_FORKLIFT", clsUser.SapWmsUser.ZID_WMS_FORKLIFT)
            'rfcFunction.SetValue("I_ZID_PICK_QUEUE", ...)			
            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                'outGetOk = True 'UNICO CASO DI ESECUZIONE OK

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_FORKLIFT_OK") = "X") Then
                    outGetOk = True 'CONDIZIONE DI FORKLIFT OK
                End If


            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_CHECK_ID_FORKLIFT = RetCode 'errore
            Else
                Call_ZWMS_CHECK_ID_FORKLIFT = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWM_CHECK_UDS_OK_FOR_JOB_PICK(ByVal inUnitaMagazzino As String, ByVal inFlagNewPicking As Boolean, ByVal inFlagForcedStepEnded As Boolean, ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByRef inCurrentTaskLinesInfo As clsDataType.SapTaskLinesInfo, ByRef inCurrentTaskLines As clsDataType.SapTaskLinesSingle, ByRef outClsUDS As clsUDS, ByVal InDivisione As String, ByVal InNumeroMagazzino As String, ByRef inSapForkLiftStruct As clsDataType.SapForkLiftStruct, ByRef inUbicazioneDestinazione As clsDataType.SapWmUbicazione, ByVal inLingua As String, ByRef outE_CHECK_UDS_OK As String, ByRef outE_CHECK_NEW_UDS As String, ByRef outE_ERROR_DIFF_TKNUM As String, ByRef outE_ERROR_DIFF_KUNNR_WE As String, ByRef outCheckOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapUDSInfo As clsDataType.SapUDSInfo, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        Dim LoopIndex As Integer = 0
        Dim wkWorkSapUDSInfo As clsDataType.SapWmGiacenza
        Dim NrUDSMove As Long

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWM_CHECK_UDS_OK_FOR_JOB_PICK = 1 'INIT AT ERROR

            outCheckOk = False 'INIT

            If (clsUtility.IsStringValid(InDivisione, True) = False) Then
                RetCode = 180
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(6, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (clsUtility.IsStringValid(InNumeroMagazzino, True) = False) Then
                RetCode = 181
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If



#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service
#Else


            'SAP RFC
            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim Out_rfcTable_E_OT_INFO_TAB As IRfcTable
            Dim rfcTable_E_ZWMS_UDS_TAB As IRfcTable
            Dim rfcFunction_E_UDS_TRUCK_LOAD_INFO As IRfcStructure
            Dim rfcFunction_ZWMS_UDS As IRfcStructure
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_CHECK_UDS_OK_FOR_JOB_PICK")


            '>>> IMPOSTO I PARAMETRI SINGOLI DELLA FUNZIONE 
            rfcFunction.SetValue("I_WERKS", InDivisione)
            rfcFunction.SetValue("I_LGNUM", InNumeroMagazzino)
            rfcFunction.SetValue("I_LENUM", inUnitaMagazzino)
            rfcFunction.SetValue("I_ZID_WMS_FORKLIFT", inSapForkLiftStruct.IdForkLift)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inSapWmWmsJob.NrWmsJobs)

            rfcFunction.SetValue("I_ZWMS_COMPUTER", clsUtility.GetWorkStationName())


            Dim WorkVersion As String = ""
#If APPLICAZIONE_WIN32 = "SI" Then

            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion("", WorkVersion))
#Else
            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion())
#End If


            If (inFlagNewPicking = True) Then
                rfcFunction.SetValue("I_FLAG_NEW_PICKING", "X")
            Else
                rfcFunction.SetValue("I_FLAG_NEW_PICKING", "")
            End If


            rfcFunction.SetValue("I_LANGUAGE", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            '*************************************************************************************************
            ' >>> VERIFICO ESECUZIONE DEL PICKING NELL'UDS
            '*************************************************************************************************

            If Not (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_UDS_OK") Is Nothing) Then
                outE_CHECK_UDS_OK = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_UDS_OK")
            End If

            If Not (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_NEW_UDS") Is Nothing) Then
                outE_CHECK_NEW_UDS = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_NEW_UDS")
            End If

            If Not (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_TKNUM") Is Nothing) Then
                outE_ERROR_DIFF_TKNUM = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_TKNUM")
            End If

            If Not (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_KUNNR_WE") Is Nothing) Then
                outE_ERROR_DIFF_KUNNR_WE = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DIFF_KUNNR_WE")
            End If


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then


                rfcTable = rfcFunction.GetTable("E_ZWMS_UDS_MATNR_TAB")

                If (rfcTable.RowCount > 0) Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK

                    i = 0
                    ReDim outSapUDSInfo.Componenti(rfcTable.RowCount - 1)

                    For Each rfcRow In rfcTable

                        'Completo tutti i campi della struttura SapUDSInfo
                        If (i = 0) Then
                            outSapUDSInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                            outSapUDSInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                            outSapUDSInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                            outSapUDSInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                            outSapUDSInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                            outSapUDSInfo.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                            outSapUDSInfo.Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")
                            'outSapUDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                            outSapUDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZNR_WMS_JOBS", 0)
                            outSapUDSInfo.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                            outSapUDSInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                            outSapUDSInfo.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                            outSapUDSInfo.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                            outSapUDSInfo.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                            outSapUDSInfo.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                            outSapUDSInfo.QtaPrelevataInUdMPezzo = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_PZ")
                            outSapUDSInfo.UdmQtaPrelevataInUdMPezzo = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_PZ")
                            outSapUDSInfo.PesoMaterialeNettoEU = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_EU")
                            outSapUDSInfo.UnitaDiPesoMatEU = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_EU")
                            outSapUDSInfo.PesoMaterialeNettoUSA = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_USA")
                            outSapUDSInfo.UnitaDiPesoMatUSA = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_USA")
                            outSapUDSInfo.DataCreazione = rfcRow.Item("DATA_CREAZIONE").GetString
                            outSapUDSInfo.OraCreazione = rfcRow.Item("ORA_CREAZIONE").GetString
                            outSapUDSInfo.DataModifica = rfcRow.Item("DATA_MODIFICA").GetString
                            outSapUDSInfo.OraModifica = rfcRow.Item("DATA_MODIFICA").GetString
                            outSapUDSInfo.UserIdRFCrea = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_CREA")
                            outSapUDSInfo.UserIdRFMod = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_MOD")
                            outSapUDSInfo.UserId = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")
                            outSapUDSInfo.ZAG_NAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZAG_NAME")
                            outSapUDSInfo.Consegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "NUM_CONS_VBELV")
                            outSapUDSInfo.PosConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "POS_CONS_POSNV")
                            outSapUDSInfo.StopSequence = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_STOP_SEQ")
                            outSapUDSInfo.DropSequence = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_DROP_SEQ")
                            outSapUDSInfo.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGORT")
                            outSapUDSInfo.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAKTG")
                            outSapUDSInfo.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(rfcRow, "SOBKZ")
                            outSapUDSInfo.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(rfcRow, "SONUM")
                            outSapUDSInfo.TipoStock = clsSapUtility.GetRFCStructParamToString(rfcRow, "BESTQ")
                            'outSapUDSInfo.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToString(rfcRow, "TBNUM")
                            outSapUDSInfo.NrTrasporto = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TKNUM")
                            outSapUDSInfo.CodicePartnerAg = clsSapUtility.GetRFCStructParamToString(rfcRow, "KUNNR_AG")
                            outSapUDSInfo.CodicePartnerWE = clsSapUtility.GetRFCStructParamToString(rfcRow, "KUNNR_WE")
                            'outSapUDSInfo.CO = clsSapUtility.GetRFCStructParamToString(rfcRow, "KUNNR_RG")
                            outSapUDSInfo.ZAG_NAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZAG_NAME")
                            outSapUDSInfo.ZWE_NAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWE_NAME")
                            outSapUDSInfo.LGNUM_STAG_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM_STAG_DOOR")
                            outSapUDSInfo.LGTYP_STAG_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP_STAG_DOOR")
                            outSapUDSInfo.LGPLA_STAG_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA_STAG_DOOR")
                            outSapUDSInfo.LGNUM_DOCK_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM_DOOCK_DOOR")
                            outSapUDSInfo.LGTYP_DOCK_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP_DOOCK_DOOR")
                            outSapUDSInfo.LGPLA_DOCK_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA_DOOCK_DOOR")
                        End If


                        'Completo i campi della sottostruttura Componenti
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCParameterToString(rfcFunction, "Lgtyp")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCParameterToString(rfcFunction, "Lgpla")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCParameterToString(rfcFunction, "LETYP")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                        outSapUDSInfo.Componenti(i).MagazzinoLogico = ""

                        outSapUDSInfo.Componenti(i).Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")

                        'GESTIONE INFO DATI SCARICO NAVETTA
                        If Not (clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS") Is Nothing) Then
                            'outSapUDSInfo.Componenti(i).NrWmsJobs = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                            outSapUDSInfo.Componenti(i).NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZNR_WMS_JOBS", 0)
                        End If
                        If Not (clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP") Is Nothing) Then
                            outSapUDSInfo.Componenti(i).CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                        End If


                        outSapUDSInfo.Componenti(i).QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QuantitaInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")

                        'Determino il Codice Materiale complessivo del Pallet
                        If i > 0 Then
                            outSapUDSInfo.CodiceMaterialeComplessivo = clsAppTranslation.GetSingleParameterValue(1334, "", "VARIO")
                        Else
                            outSapUDSInfo.CodiceMaterialeComplessivo = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        End If

                        'QTA TOTALI DELLA UDS
                        outSapUDSInfo.TotQtaPalletInUdMBase = outSapUDSInfo.TotQtaPalletInUdMBase + clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.TotQtaPalletInUdMConsegna = outSapUDSInfo.TotQtaPalletInUdMConsegna + clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")

                        'Aggiorno indice
                        i += 1

                        'Totale Componenti nel Pallet
                        outSapUDSInfo.NrTotComponenti = i

                        If (Not outDataTable Is Nothing) Then
                            WorkRow = outDataTable.NewRow()

                            'Tabella per descrizioni

                            WorkRow.Item("WERKS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                            WorkRow.Item("LGNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                            WorkRow.Item("LENUM") = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                            WorkRow.Item("MATNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                            WorkRow.Item("CHARG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")
                            WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                            WorkRow.Item("LETYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                            WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                            WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                            WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                            WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                            WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_PZ")
                            WorkRow.Item("UDM_QTAPR_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_PZ")
                            WorkRow.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_EU")
                            WorkRow.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_EU")
                            WorkRow.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_USA")
                            WorkRow.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_USA")
                            WorkRow.Item("DATA_CREAZIONE") = rfcRow.GetString(rfcTable.GetElementMetadata("DATA_CREAZIONE").Name)
                            WorkRow.Item("ORA_CREAZIONE") = rfcRow.GetString(rfcTable.GetElementMetadata("ORA_CREAZIONE").Name)
                            WorkRow.Item("DATA_MODIFICA") = rfcRow.GetString(rfcTable.GetElementMetadata("DATA_MODIFICA").Name)
                            WorkRow.Item("ORA_MODIFICA") = rfcRow.GetString(rfcTable.GetElementMetadata("ORA_MODIFICA").Name)
                            WorkRow.Item("USERID_RF_CREA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_CREA")
                            WorkRow.Item("USERID_RF_MOD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_MOD")
                            WorkRow.Item("USERID") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")

                            outDataTable.Rows.Add(WorkRow)
                        End If
                    Next
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWM_CHECK_UDS_OK_FOR_JOB_PICK = RetCode 'errore
            Else
                Call_ZWM_CHECK_UDS_OK_FOR_JOB_PICK = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWMS_CHECK_JOBS_IS_FINISH(ByVal inUnitaMagazzino As String, ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByVal InDivisione As String, ByVal InNumeroMagazzino As String, ByRef inUbicazioneDestinazione As clsDataType.SapWmUbicazione, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outCheckIsFinishOk As Boolean, ByRef outCheckTotPickQtyOk As Boolean, ByRef outCheckIsFinishPartial As Boolean, ByRef outCheckIsFinishFull As Boolean, ByRef outCheckIsFinishSfusi As Boolean, ByRef outSapWmOtInfo() As clsDataType.SapWmOtInfo, ByRef outZwmsJobsRec As clsDataType.SapWmWmsJob, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long


        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkString As String


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_CHECK_JOBS_IS_FINISH = 1 'INIT AT ERROR

            outCheckOk = False 'INIT

            If (clsUtility.IsStringValid(InDivisione, True) = False) Then
                RetCode = 180
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(6, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (clsUtility.IsStringValid(inUbicazioneDestinazione.NumeroMagazzino, True) = False) Then
                RetCode = 181
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_PICK_INTO_UDS. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service
#Else


            'SAP RFC
            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_CHECK_JOBS_IS_FINISH")


            '>>> IMPOSTO I PARAMETRI SINGOLI DELLA FUNZIONE 
            rfcFunction.SetValue("I_WERKS", InDivisione)
            rfcFunction.SetValue("I_LGNUM", InNumeroMagazzino)
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inSapWmWmsJob.NrWmsJobs)
            'rfcFunction.SetValue("I_CALL_PRG_ID", ...)


            rfcFunction.SetValue("I_SPRAS", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            '*************************************************************************************************
            ' >>> VERIFICO ESECUZIONE DEL PICKING NELL'UDS
            '*************************************************************************************************


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then


                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_IS_FINISH_OK") = "X") Then
                    outCheckIsFinishOk = True 'E_CHECK_IS_FINISH_OK
                End If

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_TOT_PICK_QTY_OK") = "X") Then
                    outCheckTotPickQtyOk = True 'E_CHECK_TOT_PICK_QTY_OK
                End If

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_IS_FINISH_PARTIAL") = "X") Then
                    outCheckIsFinishPartial = True 'E_CHECK_IS_FINISH_PARTIAL
                End If

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_IS_FINISH_FULL") = "X") Then
                    outCheckIsFinishFull = True 'E_CHECK_IS_FINISH_FULL
                End If

                If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_IS_FINISH_SFUSI") = "X") Then
                    outCheckIsFinishSfusi = True 'E_CHECK_IS_FINISH_SFUSI
                End If




                'Dim Out_E_ZWMS_JOBS_REC_TAB As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_JOBS_REC")
                'Dim Out_E_ZWMS_JOBS_STEPS_TAB As IRfcTable = rfcFunction.GetTable("E_ZWMS_JOBS_STEPS_TAB")


                'If (Out_E_ZWMS_JOBS_STEPS_TAB.Count > 0) Then
                '    ReDim outSapWmOtInfo(Out_E_ZWMS_JOBS_STEPS_TAB.Count - 1)
                '    outSapWmOtInfo(0).NumeroOrdineDiTrasferimento = Out_E_ZWMS_JOBS_STEPS_TAB(0).Item("TANUM").GetString
                'End If


                'outZwmsJobsRec.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_JOBS")
                'outZwmsJobsRec.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_JOBSGRP")
                'outZwmsJobsRec.CodiceRaggruppoEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNR_WMS_GRPEXEC")
                'outZwmsJobsRec.IdWmsJobStatus = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "IDSTATUS")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "WERKS_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGORT_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MATNR_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.Partita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CHARG_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "BESTQ_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SOBKZ_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SONUM_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGNUM_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGTYP_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGPLA_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LENUM_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaJobRichiesta = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MEINS_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaJobRichiestaInUdmOriginale = clsSapUtility.GetRFCStructParamToFloat(Out_E_ZWMS_JOBS_REC_TAB, "ZQTAPK_ORI")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_E_ZWMS_JOBS_REC_TAB, "ZQTA_PREL_BASE")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "UDM_QTAPR_MEINS")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_E_ZWMS_JOBS_REC_TAB, "ZQTA_PREL_CONS")
                'outZwmsJobsRec.MaterialeGiacenzaOrigine.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "UDM_QTAPR_CONS")

                ''>>> DATI DESTINAZIONE
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "WERKS_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGORT_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MATNR_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.Partita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CHARG_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "BESTQ_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SOBKZ_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SONUM_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGNUM_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGTYP_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LGPLA_DEST")
                'outZwmsJobsRec.MaterialeGiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "LENUM_DEST")

                'outZwmsJobsRec.Sequence = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SEQUENCE")
                'outZwmsJobsRec.CurrentStep = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CURRENT_STEP")
                'outZwmsJobsRec.NumeroStepTotali = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "NUM_STEPS_TOTAL")

                'If (CDate(Out_E_ZWMS_JOBS_REC_TAB.Item("DATA_CREAZIONE").GetString) > Date.MinValue) Then
                '    outZwmsJobsRec.DataCreazione = Out_E_ZWMS_JOBS_REC_TAB.Item("DATA_CREAZIONE").GetString
                'End If
                'If (CDate(Out_E_ZWMS_JOBS_REC_TAB.Item("ORA_CREAZIONE").GetString) > Date.MinValue) Then
                '    outZwmsJobsRec.OraCreazione = Out_E_ZWMS_JOBS_REC_TAB.Item("ORA_CREAZIONE").GetString
                'End If

                'outZwmsJobsRec.PickDbNumero = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZNRPICK")
                'outZwmsJobsRec.PickDbPosizione = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "ZPOSPK")
                'outZwmsJobsRec.NumeroOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "VBELN")
                'outZwmsJobsRec.NumeroPosizioneOrdineVendita = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "POSNR")
                'outZwmsJobsRec.ConsegnaNumero = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "NUM_CONS_VBELV")
                'outZwmsJobsRec.ConsegnaPosizione = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "POS_CONS_POSNV")
                'outZwmsJobsRec.IdWmsJobType = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ID_JOBS_TYPE")
                'outZwmsJobsRec.Priorita = clsSapUtility.GetRFCStructParamToLong(Out_E_ZWMS_JOBS_REC_TAB, "PRIORITA")

                'WorkString = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "URGENTE")
                'If (WorkString = "X") Then
                '    outZwmsJobsRec.Urgente = True
                'Else
                '    outZwmsJobsRec.Urgente = False
                'End If

                'outZwmsJobsRec.FlagRilevanteWM = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZFLAWM")
                'WorkString = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "PALLET_INTERI")
                'If (WorkString = "X") Then
                '    outZwmsJobsRec.FlagPalletInteri = True
                'Else
                '    outZwmsJobsRec.FlagPalletInteri = False
                'End If
                'WorkString = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "SCATOLE_INTERE")
                'If (WorkString = "X") Then
                '    outZwmsJobsRec.FlagScatoleIntere = True
                'Else
                '    outZwmsJobsRec.FlagScatoleIntere = False
                'End If
                'outZwmsJobsRec.FlagPartitaTassativa = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "CHARG_TASSATIVA")
                'outZwmsJobsRec.IdCarrellistaProposto = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZCARR_PROP")
                'outZwmsJobsRec.IdCarrellistaEsecuzione = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZCARR_EXEC")
                'outZwmsJobsRec.TipoDocumento = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZDOC")
                'outZwmsJobsRec.Memo = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "MEMO")
                'outZwmsJobsRec.DistintaDiCarico = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "ZZ_NDIS")
                'outZwmsJobsRec.InfoPrelievo = clsSapUtility.GetRFCStructParamToString(Out_E_ZWMS_JOBS_REC_TAB, "INFO_PRELIEVO")

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_CHECK_JOBS_IS_FINISH = RetCode 'errore
            Else
                Call_ZWMS_CHECK_JOBS_IS_FINISH = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWMS_GET_JOBS_UDS_MATNR_OF_UDS(ByVal inUnitaMagazzino As String, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        Dim LoopIndex As Integer = 0
        Dim wkWorkSapUDSInfo As clsDataType.SapWmGiacenza
        Dim NrUDSMove As Long

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_GET_JOBS_UDS_MATNR_OF_UDS = 1 'INIT AT ERROR

            outCheckOk = False 'INIT


#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service
#Else


            'SAP RFC
            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim rfcTable_E_ZWMS_UDS_TAB As IRfcTable
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_JOBS_UDS_MATNR_OF_UDS")


            '>>> IMPOSTO I PARAMETRI SINGOLI DELLA FUNZIONE 
            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse)
            rfcFunction.SetValue("I_LENUM", inUnitaMagazzino)
            rfcFunction.SetValue("I_LGNUM", clsUser.GetUserNumeroMagazzinoToUse)
            rfcFunction.SetValue("I_UDM_LANG_CONVERSION", "X")
            rfcFunction.SetValue("I_SPRAS", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            '*************************************************************************************************
            ' >>> VERIFICO ESECUZIONE DEL PICKING NELL'UDS
            '*************************************************************************************************


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                'DEVO RIMUOVERE LE RIGHE DAL DATA TABLE PER RILEGGERELE DAI DATI RITORNATI DALLA FUNZIONE
                If (Not outDataTable Is Nothing) Then
                    If (outDataTable.Rows.Count > 0) Then
                        outDataTable.Rows.Clear()
                    End If
                End If
                rfcTable = rfcFunction.GetTable("E_ZWMS_UDS_MATNR_TAB")

                If (rfcTable.RowCount > 0) Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK

                    For Each rfcRow In rfcTable

                        WorkRow = outDataTable.NewRow()

                        'Tabella per descrizioni

                        WorkRow.Item("WERKS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        WorkRow.Item("LGNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        WorkRow.Item("LENUM") = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        WorkRow.Item("MATNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        WorkRow.Item("CHARG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")
                        WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                        WorkRow.Item("LETYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                        WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                        WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_PZ")
                        WorkRow.Item("UDM_QTAPR_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_PZ")

                        WorkRow.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_SF")

                        WorkRow.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_EU")
                        WorkRow.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_EU")
                        WorkRow.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_USA")
                        WorkRow.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_USA")
                        WorkRow.Item("DATA_CREAZIONE") = rfcRow.GetString(rfcTable.GetElementMetadata("DATA_CREAZIONE").Name)
                        WorkRow.Item("ORA_CREAZIONE") = rfcRow.GetString(rfcTable.GetElementMetadata("ORA_CREAZIONE").Name)
                        WorkRow.Item("DATA_MODIFICA") = rfcRow.GetString(rfcTable.GetElementMetadata("DATA_MODIFICA").Name)
                        WorkRow.Item("ORA_MODIFICA") = rfcRow.GetString(rfcTable.GetElementMetadata("ORA_MODIFICA").Name)
                        WorkRow.Item("USERID_RF_CREA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_CREA")
                        WorkRow.Item("USERID_RF_MOD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_MOD")
                        WorkRow.Item("USERID") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")

                        outDataTable.Rows.Add(WorkRow)

                    Next
                End If
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_GET_JOBS_UDS_MATNR_OF_UDS = RetCode 'errore
            Else
                Call_ZWMS_GET_JOBS_UDS_MATNR_OF_UDS = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWM_GET_JOB_UDS_ON_FORKLIFT(ByVal InIWerks As String, ByRef inSapForkLift As String, ByRef outDataTable As DataTable, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outSapUDSInfo As clsDataType.SapUDSInfo, ByRef outInfoGiacenze() As clsDataType.SapUDSInfo, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWM_GET_JOB_UDS_ON_FORKLIFT = 1 'INIT AT ERROR


#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcTable_01 As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_GET_JOB_UDS_ON_FORKLIFT")


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            rfcFunction.SetValue("I_WERKS", InIWerks)
            rfcFunction.SetValue("I_LGNUM", clsUser.SapWmsUser.LGNUM)
            rfcFunction.SetValue("I_ZID_WMS_FORKLIFT", inSapForkLift)
            'rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            'rfcFunction.SetValue("I_ZNR_WMS_JOBS", inSapWmWmsJob.NrWmsJobs)

            'rfcFunction.SetValue("I_ZWMS_COMPUTER", clsUtility.GetWorkStationName())

            rfcFunction.SetValue("I_ZWMSTRASF_OPE", "PKS")

            '            Dim WorkVersion As String = ""
            '#If APPLICAZIONE_WIN32 = "SI" Then

            '            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion("", WorkVersion))
            '#Else
            '            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion())
            '#End If

            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)



            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then


                rfcTable = rfcFunction.GetTable("E_ZWMS_UDS_MATNR_TAB")

                If (rfcTable.RowCount > 0) Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK

                    i = 0
                    ReDim outSapUDSInfo.Componenti(rfcTable.RowCount - 1)

                    For Each rfcRow In rfcTable

                        'Completo tutti i campi della struttura SapUDSInfo
                        If (i = 0) Then
                            outSapUDSInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                            outSapUDSInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                            outSapUDSInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                            outSapUDSInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                            outSapUDSInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                            outSapUDSInfo.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                            outSapUDSInfo.Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")
                            'outSapUDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                            outSapUDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZNR_WMS_JOBS", 0)
                            outSapUDSInfo.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                            outSapUDSInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                            outSapUDSInfo.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                            outSapUDSInfo.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                            outSapUDSInfo.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                            outSapUDSInfo.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                            outSapUDSInfo.QtaPrelevataInUdMPezzo = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_PZ")
                            outSapUDSInfo.UdmQtaPrelevataInUdMPezzo = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_PZ")
                            outSapUDSInfo.PesoMaterialeNettoEU = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_EU")
                            outSapUDSInfo.UnitaDiPesoMatEU = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_EU")
                            outSapUDSInfo.PesoMaterialeNettoUSA = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_USA")
                            outSapUDSInfo.UnitaDiPesoMatUSA = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_USA")
                            outSapUDSInfo.DataCreazione = rfcRow.Item("DATA_CREAZIONE").GetString
                            outSapUDSInfo.OraCreazione = rfcRow.Item("ORA_CREAZIONE").GetString
                            outSapUDSInfo.DataModifica = rfcRow.Item("DATA_MODIFICA").GetString
                            outSapUDSInfo.OraModifica = rfcRow.Item("DATA_MODIFICA").GetString
                            outSapUDSInfo.UserIdRFCrea = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_CREA")
                            outSapUDSInfo.UserIdRFMod = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_MOD")
                            outSapUDSInfo.UserId = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")
                            outSapUDSInfo.ZAG_NAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZAG_NAME")
                            outSapUDSInfo.Consegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "NUM_CONS_VBELV")
                            outSapUDSInfo.PosConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "POS_CONS_POSNV")
                            outSapUDSInfo.StopSequence = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_STOP_SEQ")
                            outSapUDSInfo.DropSequence = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMS_DROP_SEQ")
                            outSapUDSInfo.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGORT")
                            outSapUDSInfo.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAKTG")
                            outSapUDSInfo.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(rfcRow, "SOBKZ")
                            outSapUDSInfo.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(rfcRow, "SONUM")
                            outSapUDSInfo.TipoStock = clsSapUtility.GetRFCStructParamToString(rfcRow, "BESTQ")
                            'outSapUDSInfo.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToString(rfcRow, "TBNUM")
                            outSapUDSInfo.NrTrasporto = clsSapUtility.GetRFCStructParamToLong(rfcRow, "TKNUM")
                            outSapUDSInfo.CodicePartnerAg = clsSapUtility.GetRFCStructParamToString(rfcRow, "KUNNR_AG")
                            outSapUDSInfo.CodicePartnerWE = clsSapUtility.GetRFCStructParamToString(rfcRow, "KUNNR_WE")
                            'outSapUDSInfo.CO = clsSapUtility.GetRFCStructParamToString(rfcRow, "KUNNR_RG")
                            outSapUDSInfo.ZAG_NAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZAG_NAME")
                            outSapUDSInfo.ZWE_NAME = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWE_NAME")
                            outSapUDSInfo.LGNUM_STAG_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM_STAG_DOOR")
                            outSapUDSInfo.LGTYP_STAG_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP_STAG_DOOR")
                            outSapUDSInfo.LGPLA_STAG_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA_STAG_DOOR")
                            outSapUDSInfo.LGNUM_DOCK_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM_DOOCK_DOOR")
                            outSapUDSInfo.LGTYP_DOCK_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP_DOOCK_DOOR")
                            outSapUDSInfo.LGPLA_DOCK_DOOR = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA_DOOCK_DOOR")
                        End If


                        'Completo i campi della sottostruttura Componenti
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCParameterToString(rfcFunction, "Lgtyp")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCParameterToString(rfcFunction, "Lgpla")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCParameterToString(rfcFunction, "LETYP")
                        outSapUDSInfo.Componenti(i).UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                        outSapUDSInfo.Componenti(i).MagazzinoLogico = ""

                        outSapUDSInfo.Componenti(i).Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")

                        'GESTIONE INFO DATI SCARICO NAVETTA
                        If Not (clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS") Is Nothing) Then
                            'outSapUDSInfo.Componenti(i).NrWmsJobs = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                            outSapUDSInfo.Componenti(i).NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(rfcRow, "ZNR_WMS_JOBS", 0)
                        End If
                        If Not (clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP") Is Nothing) Then
                            outSapUDSInfo.Componenti(i).CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBSGRP")
                        End If


                        outSapUDSInfo.Componenti(i).QtaTotaleLquaInStock = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDisponibile = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaImmagazzinare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaPrelevare = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).QuantitaInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.Componenti(i).UnitaDiMisuraBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaInStockUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDispoUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaImmaUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).QtaTotaleLquaDaPrelUdMAcq = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outSapUDSInfo.Componenti(i).UnitaDiMisuraAcquisizione = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")

                        'Determino il Codice Materiale complessivo del Pallet
                        If i > 0 Then
                            outSapUDSInfo.CodiceMaterialeComplessivo = clsAppTranslation.GetSingleParameterValue(1334, "", "VARIO")
                        Else
                            outSapUDSInfo.CodiceMaterialeComplessivo = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        End If

                        'QTA TOTALI DELLA UDS
                        outSapUDSInfo.TotQtaPalletInUdMBase = outSapUDSInfo.TotQtaPalletInUdMBase + clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outSapUDSInfo.TotQtaPalletInUdMConsegna = outSapUDSInfo.TotQtaPalletInUdMConsegna + clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")

                        'Aggiorno indice
                        i += 1

                        'Totale Componenti nel Pallet
                        outSapUDSInfo.NrTotComponenti = i

                        WorkRow = outDataTable.NewRow()

                        'Tabella per descrizioni

                        WorkRow.Item("WERKS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        WorkRow.Item("LGNUM") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        WorkRow.Item("LENUM") = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        WorkRow.Item("MATNR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        WorkRow.Item("CHARG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")
                        WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZNR_WMS_JOBS")
                        WorkRow.Item("LETYP") = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                        WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                        WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_PZ")
                        WorkRow.Item("UDM_QTAPR_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_PZ")
                        WorkRow.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_EU")
                        WorkRow.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_EU")
                        WorkRow.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZWMS_PESOMAT_USA")
                        WorkRow.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GEWEI_USA")
                        WorkRow.Item("DATA_CREAZIONE") = rfcRow.GetString(rfcTable.GetElementMetadata("DATA_CREAZIONE").Name)
                        WorkRow.Item("ORA_CREAZIONE") = rfcRow.GetString(rfcTable.GetElementMetadata("ORA_CREAZIONE").Name)
                        WorkRow.Item("DATA_MODIFICA") = rfcRow.GetString(rfcTable.GetElementMetadata("DATA_MODIFICA").Name)
                        WorkRow.Item("ORA_MODIFICA") = rfcRow.GetString(rfcTable.GetElementMetadata("ORA_MODIFICA").Name)
                        WorkRow.Item("USERID_RF_CREA") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_CREA")
                        WorkRow.Item("USERID_RF_MOD") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID_RF_MOD")
                        WorkRow.Item("USERID") = clsSapUtility.GetRFCStructParamToString(rfcRow, "USERID")

                        '??? GESTIRE TOTALE SCATOLE E NUMERO UDS ( ? )
                        outDataTable.Rows.Add(WorkRow)

                    Next
                End If


                rfcTable_01 = rfcFunction.GetTable("E_LQUA_LENUM_TAB")

                If (rfcTable_01.RowCount > 0) Then
                    outCheckOk = True 'UNICO CASO DI CHECK OK

                    i = 0
                    ReDim outInfoGiacenze(rfcTable_01.RowCount - 1)

                    For Each rfcRow In rfcTable_01
                        outInfoGiacenze(i).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        outInfoGiacenze(i).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        outInfoGiacenze(i).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                        outInfoGiacenze(i).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                        outInfoGiacenze(i).UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        outInfoGiacenze(i).UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                        i += 1
                    Next

                End If



            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWM_GET_JOB_UDS_ON_FORKLIFT = RetCode 'errore
            Else
                Call_ZWM_GET_JOB_UDS_ON_FORKLIFT = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZWMS_DELETE_JOBS_TASKLINES(ByRef inNrWmsJobs As Long, ByRef inTaskLinesList As DataTable, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outDataTableTaskLiens As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim WorkRowTaskLines As DataRow
        Dim WorkInputRowTaskLines As DataRow
        Dim SingoloRec As New WS_GET_JOBS_LIST.ZwmsJobsMobile

        Dim objWS As New WS_GET_JOBS_LIST.ZWS_GET_JOBS_LIST
        Dim stImportParams As New WS_GET_JOBS_LIST.ZwmsGetJobsList
        Dim objWSResponse As New WS_GET_JOBS_LIST.ZwmsGetJobsListResponse

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_DELETE_JOBS_TASKLINES = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


            If (clsUtility.IsStringValid(clsUser.GetUserNumeroMagazzinoToUse, True) = False) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [NumeroMagazzino] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (inNrWmsJobs <= 0) Then
                RetCode = 20
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [NrWmsJobs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            If (inTaskLinesList Is Nothing) Then
                RetCode = 30
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [TaskLinesList] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (inTaskLinesList.Rows Is Nothing) Then
                RetCode = 40
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [TaskLinesList] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido ( Nothing ).")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            If (inTaskLinesList.Rows.Count <= 0) Then
                RetCode = 60
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [TaskLinesList] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido ( lunghezza = 0 ).")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then

            'SAP Web Service

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            Dim rfcRowTaskLines As IRfcStructure
            
            
            Dim i As Integer
            Dim WorkTaskLinesStruct As clsDataType.TaskLines
            Dim Table As New DataTable
            Dim WorkZNR_TASK_LINES As String

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_DELETE_JOBS_TASKLINES")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            Dim In_rfcTableNrTaskLines As IRfcTable = rfcFunction.GetTable("I_ZNR_TASK_LINES_TAB")

            rfcFunction.SetValue("I_LGNUM", clsUser.GetUserNumeroMagazzinoToUse)
            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse)
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inNrWmsJobs) '>>> FILTRO JOBS

            If (inTaskLinesList.Rows.Count = 1) Then
                'RECUPERO IL NUMERO DEL TASK
                WorkZNR_TASK_LINES = clsUtility.GetDataRowItem(inTaskLinesList.Rows(0), "ZNR_TASK_LINES", "0")
                If (clsUtility.IsStringValid(Trim(WorkZNR_TASK_LINES), True) = True) Then
                    rfcFunction.SetValue("I_ZNR_TASK_LINES", WorkZNR_TASK_LINES)  '>>> FILTRO TASK LINES
                End If
            ElseIf (inTaskLinesList.Rows.Count > 1) Then
                For Each WorkInputRowTaskLines In inTaskLinesList.Rows
                    'RECUPERO IL NUMERO DEL TASK
                    WorkZNR_TASK_LINES = clsUtility.GetDataRowItem(WorkInputRowTaskLines, "ZNR_TASK_LINES", "0")
                    If (clsUtility.IsStringValid(Trim(WorkZNR_TASK_LINES), True) = True) Then
                        In_rfcTableNrTaskLines.Append()
                        In_rfcTableNrTaskLines.SetValue(0, Trim(WorkZNR_TASK_LINES))
                    End If
                Next
            End If

            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outGetOk = True 'UNICO CASO DI CHECK OK

                rfcTable = rfcFunction.GetTable("E_ZWMS_JOBS_TAB")

                If (rfcTable.RowCount > 0) Then


                    '*********************************************************************************************************************************************
                    '>>> ESEGUO LOOP SULLE RIGHE DEI JOBS RITORNATI  
                    '*********************************************************************************************************************************************
                    For Each rfcRow In rfcTable

                        '>>> IMPOSTO OGGETTI RFC PER OTTENERE DATI DELLA STRUTTURA
                        Dim Out_rfcStruct_ZWMS_JOBS_INFO = rfcRow.Item("ZWMS_JOBS_REC").GetStructure
                        Dim Out_rfcStruct_ZWMS_JOBS = rfcRow.Item("ZWMS_JOBS_REC").GetStructure(0).Item("ZWMS_JOBS").GetStructure
                        Dim Out_rfcStruct_ZWMS_JOBS_TYPE = rfcRow.Item("ZWMS_JOBS_REC").GetStructure(0).Item("ZWMS_JOBS_TYPE").GetStructure
                        Dim Out_rfcTable_ZWMS_TASK_LINES_TAB = rfcRow.Item("ZWMS_TASK_LINES_TAB").GetTable


                    Next

                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                Else
                    '>>> CONDIZIONE DI ERRORE
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1135, "", " (GET_JOBGRP_LIST). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_DELETE_JOBS_TASKLINES = RetCode
            Else
                Call_ZWMS_DELETE_JOBS_TASKLINES = 0 'TUTTO OK
            End If
        End Try

    End Function

    '    Public Shared Function Call_ZWMS_DELETE_JOBS_TASKLINES(ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByRef inTaskLinesList As DataTable, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outDataTableTaskLiens As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

    '        '**************************************
    '        'HERE PUT DECLARATION OF LOCAL VARIABLE
    '        Dim RetCode As Long = 0
    '        Dim WorkRow As DataRow
    '        Dim WorkRowTaskLines As DataRow
    '        Dim WorkInputRowTaskLines As DataRow
    '        Dim SingoloRec As New WS_GET_JOBS_LIST.ZwmsJobsMobile

    '        Dim objWS As New WS_GET_JOBS_LIST.ZWS_GET_JOBS_LIST
    '        Dim stImportParams As New WS_GET_JOBS_LIST.ZwmsGetJobsList
    '        Dim objWSResponse As New WS_GET_JOBS_LIST.ZwmsGetJobsListResponse

    '        '**************************************
    '        Try 'HERE PUT NORMAL EXECUTION CODE
    '            '**************************************

    '            Call_ZWMS_DELETE_JOBS_TASKLINES = 1 'INIT AT ERROR

    '            outGetOk = False
    '            RetCode += clsUtility.InitDataTable(outDataTable)


    '            If (clsUtility.IsStringValid(clsUser.GetUserNumeroMagazzinoToUse, True) = False) Then
    '                RetCode = 10
    '                outSapFunctionError.ERROR_CODE = RetCode
    '                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [NumeroMagazzino] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
    '                If (inShowMessageBox = True) Then
    '                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
    '                End If
    '                Exit Function
    '            End If

    '            If (inSapWmWmsJob.NrWmsJobs <= 0) Then
    '                RetCode = 20
    '                outSapFunctionError.ERROR_CODE = RetCode
    '                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [NrWmsJobs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
    '                If (inShowMessageBox = True) Then
    '                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
    '                End If
    '                Exit Function
    '            End If


    '            If (inTaskLinesList Is Nothing) Then
    '                RetCode = 30
    '                outSapFunctionError.ERROR_CODE = RetCode
    '                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [TaskLinesList] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
    '                If (inShowMessageBox = True) Then
    '                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
    '                End If
    '                Exit Function
    '            End If

    '            If (inTaskLinesList.Rows Is Nothing) Then
    '                RetCode = 40
    '                outSapFunctionError.ERROR_CODE = RetCode
    '                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [TaskLinesList] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido ( Nothing ).")
    '                If (inShowMessageBox = True) Then
    '                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
    '                End If
    '                Exit Function
    '            End If


    '            If (inTaskLinesList.Rows.Count <= 0) Then
    '                RetCode = 60
    '                outSapFunctionError.ERROR_CODE = RetCode
    '                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZWMS_DELETE_JOBS_TASKLINES. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [TaskLinesList] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido ( lunghezza = 0 ).")
    '                If (inShowMessageBox = True) Then
    '                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
    '                End If
    '                Exit Function
    '            End If


    '#If APPLICAZIONE_WIN32 <> "SI" Then

    '            'SAP Web Service

    '#Else

    '            'SAP RFC

    '            Dim rfcRepository As RfcRepository
    '            Dim rfcFunction As IRfcFunction
    '            Dim rfcTable As IRfcTable
    '            Dim rfcRow As IRfcStructure
    '            Dim rfcRowTaskLines As IRfcStructure
    '            
    '            
    '            Dim i As Integer
    '            Dim WorkTaskLinesStruct As clsDataType.TaskLines
    '            Dim Table As New DataTable
    '            Dim WorkZNR_TASK_LINES As String

    '            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

    '            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

    '            rfcFunction = rfcRepository.CreateFunction("ZWMS_DELETE_JOBS_TASKLINES")

    '            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
    '            Dim In_rfcTableNrTaskLines As IRfcTable = rfcFunction.GetTable("I_ZNR_TASK_LINES_TAB")

    '            rfcFunction.SetValue("I_LGNUM", clsUser.GetUserNumeroMagazzinoToUse)
    '            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse)
    '            rfcFunction.SetValue("I_ZNR_WMS_JOBS", inSapWmWmsJob.NrWmsJobs) '>>> FILTRO JOBS

    '            If (inTaskLinesList.Rows.Count = 1) Then
    '                'RECUPERO IL NUMERO DEL TASK
    '                WorkZNR_TASK_LINES = clsUtility.GetDataRowItem(inTaskLinesList.Rows(0), "ZNR_TASK_LINES", "0")
    '                If (clsUtility.IsStringValid(Trim(WorkZNR_TASK_LINES), True) = True) Then
    '                    rfcFunction.SetValue("I_ZNR_TASK_LINES", WorkZNR_TASK_LINES)  '>>> FILTRO TASK LINES
    '                End If
    '            ElseIf (inTaskLinesList.Rows.Count > 1) Then
    '                For Each WorkInputRowTaskLines In inTaskLinesList.Rows
    '                    'RECUPERO IL NUMERO DEL TASK
    '                    WorkZNR_TASK_LINES = clsUtility.GetDataRowItem(WorkInputRowTaskLines, "ZNR_TASK_LINES", "0")
    '                    If (clsUtility.IsStringValid(Trim(WorkZNR_TASK_LINES), True) = True) Then
    '                        In_rfcTableNrTaskLines.Append()
    '                        In_rfcTableNrTaskLines.SetValue(0, Trim(WorkZNR_TASK_LINES))
    '                    End If
    '                Next
    '            End If

    '            rfcFunction.SetValue("I_SPRAS", inLingua)


    '            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
    '            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


    '            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
    '                outGetOk = True 'UNICO CASO DI CHECK OK

    '                rfcTable = rfcFunction.GetTable("E_ZWMS_JOBS_TAB")

    '                If (rfcTable.RowCount > 0) Then


    '                    '*********************************************************************************************************************************************
    '                    '>>> ESEGUO LOOP SULLE RIGHE DEI JOBS RITORNATI  
    '                    '*********************************************************************************************************************************************
    '                    For Each rfcRow In rfcTable

    '                        '>>> IMPOSTO OGGETTI RFC PER OTTENERE DATI DELLA STRUTTURA
    '                        Dim Out_rfcStruct_ZWMS_JOBS_INFO = rfcRow.Item("ZWMS_JOBS_REC").GetStructure
    '                        Dim Out_rfcStruct_ZWMS_JOBS = rfcRow.Item("ZWMS_JOBS_REC").GetStructure(0).Item("ZWMS_JOBS").GetStructure
    '                        Dim Out_rfcStruct_ZWMS_JOBS_TYPE = rfcRow.Item("ZWMS_JOBS_REC").GetStructure(0).Item("ZWMS_JOBS_TYPE").GetStructure
    '                        Dim Out_rfcTable_ZWMS_TASK_LINES_TAB = rfcRow.Item("ZWMS_TASK_LINES_TAB").GetTable


    '                        'If (Not outDataTable Is Nothing) Then
    '                        '    WorkRow = outDataTable.NewRow()


    '                        '    WorkRow.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBS")
    '                        '    WorkRow.Item("ZNR_WMS_JOBSGRP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_JOBSGRP")
    '                        '    WorkRow.Item("ZNR_WMS_GRPEXEC") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZNR_WMS_GRPEXEC")
    '                        '    WorkRow.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "IDSTATUS")

    '                        '    WorkRow.Item("STATUS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "STATUS")
    '                        '    WorkRow.Item("STATUS_DESCR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "STATUS_DESCR")
    '                        '    WorkRow.Item("TKNUM") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "TKNUM")
    '                        '    WorkRow.Item("MAKTG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "MAKTG")

    '                        '    WorkRow.Item("WERKS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_ORI")
    '                        '    WorkRow.Item("LGORT_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_ORI")
    '                        '    WorkRow.Item("MATNR_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_ORI")
    '                        '    WorkRow.Item("CHARG_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_ORI")
    '                        '    WorkRow.Item("BESTQ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_ORI")
    '                        '    WorkRow.Item("SOBKZ_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_ORI")
    '                        '    WorkRow.Item("SONUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_ORI")
    '                        '    WorkRow.Item("LGNUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_ORI")
    '                        '    WorkRow.Item("LGTYP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_ORI")
    '                        '    WorkRow.Item("LGPLA_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_ORI")
    '                        '    WorkRow.Item("LENUM_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_ORI")
    '                        '    WorkRow.Item("MEINS_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_ORI")
    '                        '    WorkRow.Item("ZQTAPK_ORI") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI")
    '                        '    WorkRow.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_PZ")
    '                        '    WorkRow.Item("MEINS_SC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_SC")
    '                        '    WorkRow.Item("MEINS_PAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEINS_PAL")

    '                        '    WorkRow.Item("ZQTAPK_ORI_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_BASE")
    '                        '    WorkRow.Item("ZQTAPK_ORI_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_CONS")
    '                        '    WorkRow.Item("ZQTAPK_ORI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PZ")
    '                        '    WorkRow.Item("ZQTAPK_ORI_SC") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_SC")
    '                        '    WorkRow.Item("ZQTAPK_ORI_PL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_ORI_PL")
    '                        '    WorkRow.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_FULL_PALL")
    '                        '    WorkRow.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_PARTIAL")
    '                        '    WorkRow.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTAPK_SFUSI_PZ")

    '                        '    WorkRow.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_BASE")
    '                        '    WorkRow.Item("UDM_QTAPR_MEINS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_MEINS")
    '                        '    WorkRow.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_CONS")
    '                        '    WorkRow.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "UDM_QTAPR_CONS")
    '                        '    WorkRow.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_FULL")
    '                        '    WorkRow.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PARTIA")
    '                        '    WorkRow.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_JOBS, "ZQTA_PREL_PZ")

    '                        '    WorkRow.Item("WERKS_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "WERKS_DEST")
    '                        '    WorkRow.Item("LGORT_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGORT_DEST")
    '                        '    WorkRow.Item("MATNR_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MATNR_DEST")
    '                        '    WorkRow.Item("CHARG_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_DEST")
    '                        '    WorkRow.Item("BESTQ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "BESTQ_DEST")
    '                        '    WorkRow.Item("SOBKZ_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SOBKZ_DEST")
    '                        '    WorkRow.Item("SONUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SONUM_DEST")
    '                        '    WorkRow.Item("LGNUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_DEST")
    '                        '    WorkRow.Item("LGTYP_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_DEST")
    '                        '    WorkRow.Item("LGPLA_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_DEST")
    '                        '    WorkRow.Item("LENUM_DEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_DEST")
    '                        '    WorkRow.Item("ZPICKFULLPARTIAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZPICKFULLPARTIAL")
    '                        '    WorkRow.Item("SEQUENCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SEQUENCE")
    '                        '    WorkRow.Item("CURRENT_STEP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CURRENT_STEP")
    '                        '    WorkRow.Item("NUM_STEPS_TOTAL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "NUM_STEPS_TOTAL")
    '                        '    WorkRow.Item("DATA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString
    '                        '    WorkRow.Item("ORA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString
    '                        '    WorkRow.Item("ZNRPICK") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZNRPICK")
    '                        '    WorkRow.Item("ZPOSPK") = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_JOBS, "ZPOSPK")
    '                        '    WorkRow.Item("VBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "VBELN")
    '                        '    WorkRow.Item("POSNR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "POSNR")

    '                        '    WorkRow.Item("NUM_CONS_VBELV") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "NUM_CONS_VBELV")
    '                        '    WorkRow.Item("POS_CONS_POSNV") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "POS_CONS_POSNV")

    '                        '    WorkRow.Item("ZWMS_STOP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_STOP_SEQ")
    '                        '    WorkRow.Item("ZWMS_DROP_SEQ") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZWMS_DROP_SEQ")
    '                        '    WorkRow.Item("EBELN") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "EBELN")
    '                        '    WorkRow.Item("EBELP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "EBELP")

    '                        '    WorkRow.Item("KUNNR_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_AG")
    '                        '    WorkRow.Item("KUNNR_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_WE")
    '                        '    WorkRow.Item("KUNNR_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "KUNNR_RG")

    '                        '    '>>> DESCRIZIONI CLIENTI ( STRUTTURA AD UN LIVELLO DIVERSO )
    '                        '    WorkRow.Item("NAME_AG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_AG")
    '                        '    WorkRow.Item("NAME_WE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_WE")
    '                        '    WorkRow.Item("NAME_RG") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "NAME_RG")

    '                        '    WorkRow.Item("ZZCDLEGACY") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_INFO, "ZZCDLEGACY")


    '                        '    WorkRow.Item("ID_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ID_JOBS_TYPE")
    '                        '    WorkRow.Item("DESCR_JOBS_TYPE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_TYPE, "DESCR_JOBS_TYPE")
    '                        '    WorkRow.Item("JOBS_TYPE_KZEAR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS_TYPE, "KZEAR")
    '                        '    WorkRow.Item("PRIORITA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "PRIORITA")
    '                        '    WorkRow.Item("URGENTE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "URGENTE")
    '                        '    WorkRow.Item("ZFLAWM") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFLAWM")
    '                        '    WorkRow.Item("PALLET_INTERI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "PALLET_INTERI")
    '                        '    WorkRow.Item("SCATOLE_INTERE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "SCATOLE_INTERE")
    '                        '    WorkRow.Item("ZTIPO_ENTMERCE") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZTIPO_ENTMERCE")
    '                        '    WorkRow.Item("ZFORCEDDEST") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCEDDEST")
    '                        '    WorkRow.Item("ZFORCSPUNTACONF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZFORCSPUNTACONF")
    '                        '    WorkRow.Item("CHARG_TASSATIVA") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "CHARG_TASSATIVA")
    '                        '    WorkRow.Item("LGNUM_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_STAG_DOOR")
    '                        '    WorkRow.Item("LGTYP_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_STAG_DOOR")
    '                        '    WorkRow.Item("LGPLA_STAG_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_STAG_DOOR")
    '                        '    WorkRow.Item("LGNUM_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_DOOCK_DOOR")
    '                        '    WorkRow.Item("LGTYP_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_DOOCK_DOOR")
    '                        '    WorkRow.Item("LGPLA_DOOCK_DOOR") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_DOOCK_DOOR")
    '                        '    WorkRow.Item("ZCARR_PROP") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_PROP")

    '                        '    WorkRow.Item("ZCARR_EXEC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC")
    '                        '    WorkRow.Item("ZCARR_EXEC_FL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC_FL")
    '                        '    WorkRow.Item("ZCARR_EXEC_SF") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZCARR_EXEC_SF")

    '                        '    WorkRow.Item("LGNUM_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_PROP_ORI")
    '                        '    WorkRow.Item("LGTYP_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_PROP_ORI")
    '                        '    WorkRow.Item("LGPLA_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_PROP_ORI")
    '                        '    WorkRow.Item("LENUM_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_PROP_ORI")
    '                        '    WorkRow.Item("OK_QTA_PROP_ORI") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "OK_QTA_PROP_ORI")

    '                        '    WorkRow.Item("LGNUM_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGNUM_PROP_ORIFL")
    '                        '    WorkRow.Item("LGTYP_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGTYP_PROP_ORIFL")
    '                        '    WorkRow.Item("LGPLA_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LGPLA_PROP_ORIFL")
    '                        '    WorkRow.Item("LENUM_PROP_ORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "LENUM_PROP_ORIFL")
    '                        '    WorkRow.Item("OK_QTA_PROPORIFL") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "OK_QTA_PROPORIFL")

    '                        '    WorkRow.Item("ZDOC") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZDOC")
    '                        '    WorkRow.Item("MEMO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "MEMO")
    '                        '    WorkRow.Item("ZZ_NDIS") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "ZZ_NDIS")
    '                        '    WorkRow.Item("INFO_PRELIEVO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "INFO_PRELIEVO")
    '                        '    WorkRow.Item("IMBALLO") = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_JOBS, "IMBALLO")


    '                        '    'RITORNO LE TASK LINES SE VALORIZZATE
    '                        '    If (Out_rfcTable_ZWMS_TASK_LINES_TAB.RowCount > 0) And (Not outDataTableTaskLiens Is Nothing) Then

    '                        '        For Each rfcRowTaskLines In Out_rfcTable_ZWMS_TASK_LINES_TAB
    '                        '            WorkRowTaskLines = outDataTableTaskLiens.NewRow()

    '                        '            WorkRowTaskLines.Item("ZNR_TASK_LINES") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZNR_TASK_LINES")

    '                        '            WorkRowTaskLines.Item("DATA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("DATA_CREAZIONE").GetString
    '                        '            WorkRowTaskLines.Item("ORA_CREAZIONE") = Out_rfcStruct_ZWMS_JOBS.Item("ORA_CREAZIONE").GetString

    '                        '            WorkRowTaskLines.Item("ZNR_WMS_JOBS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZNR_WMS_JOBS")
    '                        '            WorkRowTaskLines.Item("ZTASK_LINES_SEQ") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZTASK_LINES_SEQ")
    '                        '            WorkRowTaskLines.Item("ZPICKFULLPARTIAL") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "ZPICKFULLPARTIAL")
    '                        '            WorkRowTaskLines.Item("IDSTATUS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "IDSTATUS")
    '                        '            WorkRowTaskLines.Item("MEINS_PZ") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "MEINS_PZ")

    '                        '            WorkRowTaskLines.Item("ZQTAPK_ORI_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_ORI_BASE")
    '                        '            WorkRowTaskLines.Item("MEINS_BASE") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "MEINS_BASE")
    '                        '            WorkRowTaskLines.Item("ZQTAPK_ORI_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_ORI_CONS")
    '                        '            WorkRowTaskLines.Item("MEINS_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "MEINS_CONS")
    '                        '            WorkRowTaskLines.Item("ZQTAPK_FULL_PALL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_FULL_PALL")
    '                        '            WorkRowTaskLines.Item("ZQTAPK_PARTIAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_PARTIAL")
    '                        '            WorkRowTaskLines.Item("ZQTAPK_SFUSI_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTAPK_SFUSI_PZ")


    '                        '            WorkRowTaskLines.Item("ZQTA_PREL_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_BASE")
    '                        '            WorkRowTaskLines.Item("UDM_QTAPR_BASE") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "UDM_QTAPR_BASE")
    '                        '            WorkRowTaskLines.Item("ZQTA_PREL_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_CONS")
    '                        '            WorkRowTaskLines.Item("UDM_QTAPR_CONS") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "UDM_QTAPR_CONS")

    '                        '            WorkRowTaskLines.Item("ZQTA_PREL_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PZ")
    '                        '            WorkRowTaskLines.Item("ZQTA_PREL_SC") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_SC")
    '                        '            WorkRowTaskLines.Item("ZQTA_PREL_PAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PAL")
    '                        '            WorkRowTaskLines.Item("ZQTA_PREL_FULL") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_FULL")
    '                        '            WorkRowTaskLines.Item("ZQTA_PREL_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_PARTIA")
    '                        '            WorkRowTaskLines.Item("ZQTA_PREL_SF") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZQTA_PREL_SF")

    '                        '            WorkRowTaskLines.Item("ZWMS_PESOMAT_EU") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZWMS_PESOMAT_EU")
    '                        '            WorkRowTaskLines.Item("GEWEI_EU") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "GEWEI_EU")
    '                        '            WorkRowTaskLines.Item("ZWMS_PESOMAT_USA") = clsSapUtility.GetRFCStructParamToFloat(rfcRowTaskLines, "ZWMS_PESOMAT_USA")
    '                        '            WorkRowTaskLines.Item("GEWEI_USA") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "GEWEI_USA")
    '                        '            WorkRowTaskLines.Item("USERID_RF") = clsSapUtility.GetRFCStructParamToString(rfcRowTaskLines, "USERID_RF")

    '                        '            outDataTableTaskLiens.Rows.Add(WorkRowTaskLines)
    '                        '        Next
    '                        '    End If

    '                        'End If

    '                    Next

    '                End If

    '            End If


    '#End If


    '            '**************************************
    '        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
    '            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
    '            'LOG ERROR CONDITION
    '            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
    '            '**************************************
    '        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
    '            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
    '            If (outGetOk = False) Then
    '                RetCode = 101
    '                outSapFunctionError.ERROR_CODE = RetCode
    '                If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
    '                    '>>> CONDIZIONE DI NESSUN DATO TROVATO
    '                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
    '                Else
    '                    '>>> CONDIZIONE DI ERRORE
    '                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1135, "", " (GET_JOBGRP_LIST). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
    '                End If
    '                If (inShowMessageBox = True) Then
    '                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
    '                End If
    '                Call_ZWMS_DELETE_JOBS_TASKLINES = RetCode
    '            Else
    '                Call_ZWMS_DELETE_JOBS_TASKLINES = 0 'TUTTO OK
    '            End If
    '        End Try

    '    End Function

    Public Shared Function Call_ZMB_GET_T156T_MOT_MOVIMENTI(ByVal inNrmovimento As String, ByVal inDivisione As String, inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZMB_GET_T156T_MOT_MOVIMENTI = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inNrmovimento) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZMB_GET_T156T_MOT_MOVIMENTI. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ NrMovimento] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            'Dim SAPRfcDestination As SAP.Middleware.Connector.RfcDestination
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZMB_GET_T156T_MOT_MOVIMENTI")

            rfcFunction.SetValue("I_WERKS", inDivisione)
            rfcFunction.SetValue("I_BWART", inNrmovimento)
            rfcFunction.SetValue("I_SPRAS", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_DATA_T156T")


            For Each rfcRow In rfcTable

                WorkRow = outDataTable.NewRow()

                For i = 0 To rfcTable.RowCount

                    'WorkRow.Item("SPRAS") = clsSapUtility.GetRFCStructParamToString(rfcRow, "SPRAS")
                    WorkRow.Item("BWART") = clsSapUtility.GetRFCStructParamToString(rfcRow, "BWART")
                    'WorkRow.Item("SOBKZ") = clsSapUtility.GetRFCStructParamToString(rfcRow, "SOBKZ")
                    'WorkRow.Item("KZBEW") = clsSapUtility.GetRFCStructParamToString(rfcRow, "KZBEW")
                    'WorkRow.Item("KZZUG") = clsSapUtility.GetRFCStructParamToString(rfcRow, "KZZUG")
                    'WorkRow.Item("KZVBR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "KZVBR")
                    WorkRow.Item("BTEXT") = clsSapUtility.GetRFCStructParamToString(rfcRow, "BTEXT")

                Next

                outDataTable.Rows.Add(WorkRow)

            Next

            outGetOk = True

#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                '    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                '    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                'Else
                '    '>>> CONDIZIONE DI ERRORE
                '    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                'End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZMB_GET_T156T_MOT_MOVIMENTI = RetCode
            Else
                Call_ZMB_GET_T156T_MOT_MOVIMENTI = 0 'TUTTO OK
            End If
        End Try

    End Function

    Public Shared Function Call_ZMB_GET_T157E_MOT_MOVIMENTI(ByVal inNrmovimento As String, ByVal inDivisione As String, inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZMB_GET_T157E_MOT_MOVIMENTI = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inNrmovimento) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " ZMB_GET_T157E_MOT_MOVIMENTI. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ NrMovimento] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


#If APPLICAZIONE_WIN32 <> "SI" Then

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            'Dim SAPRfcDestination As SAP.Middleware.Connector.RfcDestination
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZMB_GET_T157E_MOT_MOVIMENTI")

            rfcFunction.SetValue("I_WERKS", inDivisione)
            rfcFunction.SetValue("I_BWART", inNrmovimento)
            rfcFunction.SetValue("I_SPRAS", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_DATA_T157E")


            For Each rfcRow In rfcTable

                WorkRow = outDataTable.NewRow()

                For i = 0 To rfcTable.RowCount

                    WorkRow.Item("BWART") = clsSapUtility.GetRFCStructParamToString(rfcRow, "BWART")
                    WorkRow.Item("GRUND") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GRUND")
                    WorkRow.Item("GRTXT") = clsSapUtility.GetRFCStructParamToString(rfcRow, "GRTXT")

                Next

                outDataTable.Rows.Add(WorkRow)

            Next

            outGetOk = True

#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                '    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                '    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                'Else
                '    '>>> CONDIZIONE DI ERRORE
                '    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                'End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZMB_GET_T157E_MOT_MOVIMENTI = RetCode
            Else
                Call_ZMB_GET_T157E_MOT_MOVIMENTI = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWMS_GET_USER_TASK_LINES(ByVal inNumeroMagazzino As String, ByRef inSapWmWmsJob As clsDataType.SapWmWmsJob, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTableTaskLines As DataTable, ByRef outTaskLinesInfo As clsDataType.SapTaskLinesInfo, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRowTaskLines As DataRow

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_GET_USER_TASK_LINES = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTableTaskLines)


#If APPLICAZIONE_WIN32 <> "SI" Then

            'SAP Web Service

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            Dim rfcRowTaskLines As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_USER_TASK_LINES")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            rfcFunction.SetValue("I_LGNUM", inNumeroMagazzino)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)  '>>> FILTRO USER ID


            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outGetOk = True 'UNICO CASO DI CHECK OK


                rfcTable = rfcFunction.GetTable("E_TASK_LINES_TAB")
                Dim Out_rfcStruct_ZWMS_TASK_LINES_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_TASK_LINES_INFO")


                'RITORNO LE INFO PRINCIPALI DELLE TASK LINES
                outTaskLinesInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZNR_WMS_JOBS")
                outTaskLinesInfo.TotalTaskLines = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES")
                outTaskLinesInfo.TotalTaskLinesFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_FULL")
                outTaskLinesInfo.TotalTaskLinesPartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_PARTIAL")
                outTaskLinesInfo.TotalTaskLinesDone = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE")
                outTaskLinesInfo.TotalTaskLinesDoneFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE_FL")
                outTaskLinesInfo.TotalTaskLinesDonePartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_DONE_PAR")
                outTaskLinesInfo.TotalTaskLineOpen = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN")
                outTaskLinesInfo.TotalTaskLinesOpenFull = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN_FL")
                outTaskLinesInfo.TotalTaskLinesOpenPartial = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_TASK_LINES_INFO, "ZTOT_TASK_LINES_OPEN_PAR")


                If (rfcTable.RowCount > 0) Then


                    For i = 0 To rfcTable.Count - 1

                        WorkRowTaskLines = outDataTableTaskLines.NewRow()

                        WorkRowTaskLines.Item("ZNR_TASK_LINES") = rfcTable.Item(i)("ZNR_TASK_LINES").GetString

                        WorkRowTaskLines.Item("DATA_CREAZIONE") = rfcTable.Item(i)("DATA_CREAZIONE").GetString
                        WorkRowTaskLines.Item("ORA_CREAZIONE") = rfcTable.Item(i)("ORA_CREAZIONE").GetString

                        WorkRowTaskLines.Item("ZNR_WMS_JOBS") = rfcTable.Item(i)("ZNR_WMS_JOBS").GetString
                        WorkRowTaskLines.Item("ZTASK_LINES_SEQ") = rfcTable.Item(i)("ZTASK_LINES_SEQ").GetString
                        WorkRowTaskLines.Item("ZID_PICK_QUEUE") = rfcTable.Item(i)("ZID_PICK_QUEUE").GetString
                        WorkRowTaskLines.Item("ZPICKFULLPARTIAL") = rfcTable.Item(i)("ZPICKFULLPARTIAL").GetString
                        WorkRowTaskLines.Item("IDSTATUS") = rfcTable.Item(i)("IDSTATUS").GetString
                        WorkRowTaskLines.Item("STATUS") = rfcTable.Item(i)("STATUS").GetString
                        WorkRowTaskLines.Item("MEINS_PZ") = rfcTable.Item(i)("MEINS_PZ").GetString

                        WorkRowTaskLines.Item("ZQTAPK_ORI_BASE") = rfcTable.Item(i)("ZQTAPK_ORI_BASE").GetFloat
                        WorkRowTaskLines.Item("MEINS_BASE") = rfcTable.Item(i)("MEINS_BASE").GetString
                        WorkRowTaskLines.Item("ZQTAPK_ORI_CONS") = rfcTable.Item(i)("ZQTAPK_ORI_CONS").GetFloat
                        WorkRowTaskLines.Item("MEINS_CONS") = rfcTable.Item(i)("MEINS_CONS").GetString
                        WorkRowTaskLines.Item("ZQTAPK_FULL_PALL") = rfcTable.Item(i)("ZQTAPK_FULL_PALL").GetFloat
                        WorkRowTaskLines.Item("ZQTAPK_PARTIAL") = rfcTable.Item(i)("ZQTAPK_PARTIAL").GetFloat
                        WorkRowTaskLines.Item("ZQTAPK_SFUSI_PZ") = rfcTable.Item(i)("ZQTAPK_SFUSI_PZ").GetFloat

                        WorkRowTaskLines.Item("ZQTA_PREL_BASE") = rfcTable.Item(i)("ZQTA_PREL_BASE").GetFloat
                        WorkRowTaskLines.Item("UDM_QTAPR_BASE") = rfcTable.Item(i)("UDM_QTAPR_BASE").GetString
                        WorkRowTaskLines.Item("ZQTA_PREL_CONS") = rfcTable.Item(i)("ZQTA_PREL_CONS").GetFloat
                        WorkRowTaskLines.Item("UDM_QTAPR_CONS") = rfcTable.Item(i)("UDM_QTAPR_CONS").GetString

                        WorkRowTaskLines.Item("ZQTA_PREL_PZ") = rfcTable.Item(i)("ZQTA_PREL_PZ").GetFloat
                        WorkRowTaskLines.Item("ZQTA_PREL_SC") = rfcTable.Item(i)("ZQTA_PREL_SC").GetFloat
                        WorkRowTaskLines.Item("ZQTA_PREL_PAL") = rfcTable.Item(i)("ZQTA_PREL_PAL").GetFloat
                        WorkRowTaskLines.Item("ZQTA_PREL_FULL") = rfcTable.Item(i)("ZQTA_PREL_FULL").GetFloat
                        WorkRowTaskLines.Item("ZQTA_PREL_PARTIA") = rfcTable.Item(i)("ZQTA_PREL_PARTIA").GetFloat
                        WorkRowTaskLines.Item("ZQTA_PREL_SF") = rfcTable.Item(i)("ZQTA_PREL_SF").GetFloat

                        WorkRowTaskLines.Item("ZWMS_PESOMAT_EU") = rfcTable.Item(i)("ZWMS_PESOMAT_EU").GetFloat
                        WorkRowTaskLines.Item("GEWEI_EU") = rfcTable.Item(i)("GEWEI_EU").GetString
                        WorkRowTaskLines.Item("ZWMS_PESOMAT_USA") = rfcTable.Item(i)("ZWMS_PESOMAT_USA").GetFloat
                        WorkRowTaskLines.Item("GEWEI_USA") = rfcTable.Item(i)("GEWEI_USA").GetString
                        WorkRowTaskLines.Item("USERID_RF") = rfcTable.Item(i)("USERID_RF").GetString
                        WorkRowTaskLines.Item("ZPICK_QUEUE_DESC") = rfcTable.Item(i)("ZPICK_QUEUE_DESC").GetString

                        outDataTableTaskLines.Rows.Add(WorkRowTaskLines)

                    Next
                End If

            End If



#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                '    '>>> CONDIZIONE DI NESSUN DATO TROVATO
                '    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                'Else
                '    '>>> CONDIZIONE DI ERRORE
                '    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & clsAppTranslation.GetSingleParameterValue(1135, "", " (GET_JOBGRP_LIST). ") & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                'End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_GET_USER_TASK_LINES = RetCode
            Else
                Call_ZWMS_GET_USER_TASK_LINES = 0 'TUTTO OK
            End If
        End Try

    End Function



    Public Shared Function Call_ZWM_MB_EXEC_WM_TO_MULTIPLE(ByVal inParams As StrctSapMoveSuMulParams, ByVal InGiacenzeTrasfList() As clsDataType.SapWmGiacenza, ByRef outOkTransferExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByRef outOT_Number() As String, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim strRetCode As String = ""
        Dim LoopIndex As Integer = 0


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWM_MB_EXEC_WM_TO_MULTIPLE = 1 'INIT AT ERROR

            outOkTransferExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)


#If Not APPLICAZIONE_WIN32 = "SI" Then

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim Out_rfcStruct_E_OT_TAB As IRfcTable
            Dim rfcRow As IRfcStructure
            
            


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (inParams.rfcSapOtMulInfo_Rec.ILenumTab Is Nothing) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (inParams.rfcSapOtMulInfo_Rec.ILenumTab.Length <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Lenum] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.rfcSapOtMulInfo_Rec.IBwlvs) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Bwlvs] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.rfcSapOtMulInfo_Rec.INltyp) <= 0) Then
                RetCode = 203
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nltyp] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If
            If (Len(inParams.rfcSapOtMulInfo_Rec.INlpla) <= 0) Then
                RetCode = 204
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(971, "", "Errore in esecuzione OT (EXEC_WM_TO_MOVE_SU). Parametro") & " [Nlpla] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inParams.rfcSapOtMulInfo_Rec.INlber) <= 0) Then
                inParams.rfcSapOtMulInfo_Rec.INlber = "001"
            End If

            'IMPOSTO LA LINGUA
            inParams.rfcSapOtMulInfo_Rec.ILanguage = clsUser.SapWmsUser.LANGUAGE

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_MB_EXEC_WM_TO_MULTIPLE")

            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_LQUA_TAB")


            LoopIndex = 0

            'IMPOSTO LE UNITA DI MAGAZZINO
            For LoopIndex = 0 To (InGiacenzeTrasfList.Length - 1)

                In_rfcTable.Append()

                In_rfcTable.SetValue("LGNUM", InGiacenzeTrasfList(LoopIndex).UbicazioneInfo.NumeroMagazzino)
                In_rfcTable.SetValue("LQNUM", InGiacenzeTrasfList(LoopIndex).UbicazioneInfo.NumeroQuantWmSap)
                In_rfcTable.SetValue("MATNR", InGiacenzeTrasfList(LoopIndex).CodiceMateriale)
                In_rfcTable.SetValue("WERKS", InGiacenzeTrasfList(LoopIndex).UbicazioneInfo.Divisione)
                In_rfcTable.SetValue("CHARG", InGiacenzeTrasfList(LoopIndex).Partita)
                In_rfcTable.SetValue("BESTQ", InGiacenzeTrasfList(LoopIndex).TipoStock)
                In_rfcTable.SetValue("SOBKZ", InGiacenzeTrasfList(LoopIndex).CdStockSpeciale)
                In_rfcTable.SetValue("SONUM", InGiacenzeTrasfList(LoopIndex).NumeroStockSpeciale)
                In_rfcTable.SetValue("LGTYP", InGiacenzeTrasfList(LoopIndex).UbicazioneInfo.TipoMagazzino)
                In_rfcTable.SetValue("LGPLA", InGiacenzeTrasfList(LoopIndex).UbicazioneInfo.Ubicazione)
                In_rfcTable.SetValue("GESME", InGiacenzeTrasfList(LoopIndex).QtaTotaleLquaDisponibile)
                In_rfcTable.SetValue("MEINS", InGiacenzeTrasfList(LoopIndex).UnitaDiMisuraPezzo)
                In_rfcTable.SetValue("LGORT", InGiacenzeTrasfList(LoopIndex).MagazzinoLogico)
                'In_rfcTable.SetValue("LENUM", InGiacenzeTrasfList(LoopIndex).UbicazioneInfo.UnitaMagazzino)


            Next

            'rfcFunction.SetValue("I_LENUM_TAB", inParams.rfcSapOtMulInfo_Rec.ILenumTab)
            rfcFunction.SetValue("I_BWLVS", inParams.rfcSapOtMulInfo_Rec.IBwlvs)
            rfcFunction.SetValue("I_NLTYP", inParams.rfcSapOtMulInfo_Rec.INltyp)
            rfcFunction.SetValue("I_NLPLA", inParams.rfcSapOtMulInfo_Rec.INlpla)
            rfcFunction.SetValue("I_NLBER", inParams.rfcSapOtMulInfo_Rec.INlber)
            rfcFunction.SetValue("I_SQUIT", "X")
            rfcFunction.SetValue("I_LANGUAGE", clsUser.SapWmsUser.LANGUAGE)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            LoopIndex = 0

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                Out_rfcStruct_E_OT_TAB = rfcFunction.GetTable("E_OT_TAB")

                If (Not Out_rfcStruct_E_OT_TAB Is Nothing) Then
                    If (Out_rfcStruct_E_OT_TAB.RowCount > 0) Then

                        ReDim outOT_Number(Out_rfcStruct_E_OT_TAB.RowCount - 1)

                        For Each rfcRow In Out_rfcStruct_E_OT_TAB

                            If (Out_rfcStruct_E_OT_TAB.GetObject("Tanum") > 0) Then
                                outOT_Number(LoopIndex) = clsSapUtility.GetRFCStructParamToString(rfcRow, "Tanum")
                                'outOT_Number(LoopIndex) = Out_rfcStruct_E_OT_TAB.GetObject("Tanum") 'objWSResponse.EOtTab(LoopIndex).Tanum
                                outOkTransferExecuted = True 'UNICO CASO DI ESECUZIONE OK
                            End If
                            LoopIndex += 1
                        Next
                    End If
                End If

                Call_ZWM_MB_EXEC_WM_TO_MULTIPLE = RetCode 'SE = 0 TUTTO OK

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkTransferExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                'CASO ESECUZIONE OK
                Call_ZWM_MB_EXEC_WM_TO_MULTIPLE = 0 'TUTTO OK
            End If
        End Try

    End Function



    Public Shared Function Call_ZWMS_EXEC_PRINT_PALLET_UDC(ByVal InGiacenze As clsDataType.SapWmGiacenza, ByRef outOkPrintExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean, Optional ByVal InDestination_Printer As String = "") As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim strRetCode As String = ""
        Dim LoopIndex As Integer = 0


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_EXEC_PRINT_PALLET_UDC = 1 'INIT AT ERROR

            outOkPrintExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)


#If Not APPLICAZIONE_WIN32 = "SI" Then

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcRow As IRfcStructure




            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (Len(InGiacenze.UbicazioneInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            'IMPOSTO LA LINGUA

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_EXEC_PRINT_PALLET_UDC")


            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse())


            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_TAB_UDC_DATA")


            'IMPOSTO I DATI ETICHETTA

            In_rfcTable.Append()

            In_rfcTable.SetValue("LGNUM", InGiacenze.UbicazioneInfo.NumeroMagazzino)
            In_rfcTable.SetValue("LQNUM", InGiacenze.UbicazioneInfo.NumeroQuantWmSap)
            In_rfcTable.SetValue("BCUDX", InGiacenze.UbicazioneInfo.UnitaMagazzino)
            In_rfcTable.SetValue("WERKS", InGiacenze.UbicazioneInfo.Divisione)
            In_rfcTable.SetValue("MATNR", InGiacenze.CodiceMateriale)
            In_rfcTable.SetValue("CHARG", InGiacenze.Partita)

            In_rfcTable.SetValue("MENGE", InGiacenze.QtaTotaleLquaDisponibile)
            In_rfcTable.SetValue("MEINA", InGiacenze.UnitaDiMisuraBase)
            In_rfcTable.SetValue("QTA_UDM_BASE", InGiacenze.QuantitaInUdMBase)
            In_rfcTable.SetValue("UDM_BASE", InGiacenze.UnitaDiMisuraBase)
            In_rfcTable.SetValue("QTA_UDM_CONS", InGiacenze.QtaPrelevataInUdMConsegna)
            In_rfcTable.SetValue("UDM_CONS", InGiacenze.UdmQtaPrelevataInUdMConsegna)
            In_rfcTable.SetValue("QTA_UDM_SC", InGiacenze.QtaJobRichiestaInUdmSC)
            In_rfcTable.SetValue("UDM_SC", InGiacenze.UnitaDiMisuraScatole)
            In_rfcTable.SetValue("QTA_UDM_PZ", InGiacenze.QtaJobRichiestaInUdmPZ)
            In_rfcTable.SetValue("UDM_PZ", InGiacenze.UnitaDiMisuraPezzo)
            In_rfcTable.SetValue("QTA_UDM_PL", InGiacenze.QtaJobRichiestaInUdmPZ)
            In_rfcTable.SetValue("UDM_PL", InGiacenze.UnitaDiMisuraPezzo)
            In_rfcTable.SetValue("QTA_SFUSI", InGiacenze.QuantitaConfermataSfusiOperatore)


            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_USERID", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_SPRAS", clsUser.SapWmsUser.LANGUAGE)

            'IMPOSTO LA STAMPANTE DI DESTINAZIONE SCELTA NELLA POPUP ...
            If (InDestination_Printer <> "") Then
                rfcFunction.SetValue("I_TDDEST", InDestination_Printer)
            End If


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outOkPrintExecuted = True 'ESECUZIONE OK
            Else
                outOkPrintExecuted = False 'ESECUZIONE NON OK
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkPrintExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                'CASO ESECUZIONE OK
                Call_ZWMS_EXEC_PRINT_PALLET_UDC = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWMS_EXEC_PRINT_PALLET_UDS(ByVal InGiacenze As clsDataType.SapWmGiacenza, ByRef outOkPrintExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim strRetCode As String = ""
        Dim LoopIndex As Integer = 0


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_EXEC_PRINT_PALLET_UDS = 1 'INIT AT ERROR

            outOkPrintExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)


#If Not APPLICAZIONE_WIN32 = "SI" Then

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcRow As IRfcStructure
            
            


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (Len(InGiacenze.UbicazioneInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            'IMPOSTO LA LINGUA

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_EXEC_PRINT_PALLET_UDS")


            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse())

            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_TAB_UDS_DATA")


            'IMPOSTO I DATI ETICHETTA

            In_rfcTable.Append()

            In_rfcTable.SetValue("LGNUM", InGiacenze.UbicazioneInfo.NumeroMagazzino)
            In_rfcTable.SetValue("LQNUM", InGiacenze.UbicazioneInfo.NumeroQuantWmSap)
            In_rfcTable.SetValue("BCUDX", InGiacenze.UbicazioneInfo.UnitaMagazzino)
            In_rfcTable.SetValue("WERKS", InGiacenze.UbicazioneInfo.Divisione)
            In_rfcTable.SetValue("MATNR", InGiacenze.CodiceMateriale)
            In_rfcTable.SetValue("CHARG", InGiacenze.Partita)

            In_rfcTable.SetValue("MENGE", InGiacenze.QtaTotaleLquaDisponibile)
            In_rfcTable.SetValue("MEINA", InGiacenze.UnitaDiMisuraBase)
            In_rfcTable.SetValue("QTA_UDM_BASE", InGiacenze.QuantitaInUdMBase)
            In_rfcTable.SetValue("UDM_BASE", InGiacenze.UnitaDiMisuraBase)
            In_rfcTable.SetValue("QTA_UDM_CONS", InGiacenze.QtaPrelevataInUdMConsegna)
            In_rfcTable.SetValue("UDM_CONS", InGiacenze.UdmQtaPrelevataInUdMConsegna)
            In_rfcTable.SetValue("QTA_UDM_SC", InGiacenze.QtaJobRichiestaInUdmSC)
            In_rfcTable.SetValue("UDM_SC", InGiacenze.UnitaDiMisuraScatole)
            In_rfcTable.SetValue("QTA_UDM_PZ", InGiacenze.QtaJobRichiestaInUdmPZ)
            In_rfcTable.SetValue("UDM_PZ", InGiacenze.UnitaDiMisuraPezzo)
            In_rfcTable.SetValue("QTA_UDM_PL", InGiacenze.QtaJobRichiestaInUdmPZ)
            In_rfcTable.SetValue("UDM_PL", InGiacenze.UnitaDiMisuraPezzo)


            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_USERID", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_SPRAS", clsUser.SapWmsUser.LANGUAGE)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outOkPrintExecuted = True 'ESECUZIONE OK
            Else
                outOkPrintExecuted = False 'ESECUZIONE NON OK
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkPrintExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                'CASO ESECUZIONE OK
                Call_ZWMS_EXEC_PRINT_PALLET_UDS = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWMS_EXEC_PRINT_PALLET_KTAG(ByVal InGiacenze As clsDataType.SapWmGiacenza, ByVal inNrKTagLabel As String, ByRef outOkPrintExecuted As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim strRetCode As String = ""
        Dim LoopIndex As Integer = 0


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_EXEC_PRINT_PALLET_KTAG = 1 'INIT AT ERROR

            outOkPrintExecuted = False 'INIT
            RetCode = clsBusinessLogic.InitSapFunctionError(outSapFunctionError)


#If Not APPLICAZIONE_WIN32 = "SI" Then

#Else


            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcRow As IRfcStructure




            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE

            '>>> VERIFICO VALIDITA' DEI DATI OBBLIGATORI
            If (Len(InGiacenze.UbicazioneInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If


            'IMPOSTO LA LINGUA

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_EXEC_PRINT_PALLET_KTAG")


            rfcFunction.SetValue("I_WERKS", clsUser.GetUserDivisionToUse())
            rfcFunction.SetValue("I_NUM_KTAG_LABEL", inNrKTagLabel)


            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_TAB_KTAG_DATA")


            'IMPOSTO I DATI ETICHETTA

            In_rfcTable.Append()

            'In_rfcTable.SetValue("LGNUM", InGiacenze.UbicazioneInfo.NumeroMagazzino)
            In_rfcTable.SetValue("LGNUM", clsUser.GetUserNumeroMagazzinoToUse())
            In_rfcTable.SetValue("LQNUM", InGiacenze.UbicazioneInfo.NumeroQuantWmSap)
            In_rfcTable.SetValue("BCUDX", InGiacenze.UbicazioneInfo.UnitaMagazzino)
            'In_rfcTable.SetValue("WERKS", InGiacenze.UbicazioneInfo.Divisione)
            In_rfcTable.SetValue("WERKS", clsUser.GetUserDivisionToUse())
            In_rfcTable.SetValue("MATNR", InGiacenze.CodiceMateriale)
            In_rfcTable.SetValue("CHARG", InGiacenze.Partita)

            In_rfcTable.SetValue("MENGE", InGiacenze.QtaTotaleLquaDisponibile)
            In_rfcTable.SetValue("MEINA", InGiacenze.UnitaDiMisuraBase)
            In_rfcTable.SetValue("QTA_UDM_BASE", InGiacenze.QuantitaInUdMBase)
            In_rfcTable.SetValue("UDM_BASE", InGiacenze.UnitaDiMisuraBase)
            In_rfcTable.SetValue("QTA_UDM_CONS", InGiacenze.QtaPrelevataInUdMConsegna)
            In_rfcTable.SetValue("UDM_CONS", InGiacenze.UdmQtaPrelevataInUdMConsegna)
            In_rfcTable.SetValue("QTA_UDM_SC", InGiacenze.QtaJobRichiestaInUdmSC)
            In_rfcTable.SetValue("UDM_SC", InGiacenze.UnitaDiMisuraScatole)
            In_rfcTable.SetValue("QTA_UDM_PZ", InGiacenze.QtaJobRichiestaInUdmPZ)
            In_rfcTable.SetValue("UDM_PZ", InGiacenze.UnitaDiMisuraPezzo)
            In_rfcTable.SetValue("QTA_UDM_PL", InGiacenze.QtaJobRichiestaInUdmPZ)
            In_rfcTable.SetValue("UDM_PL", InGiacenze.UnitaDiMisuraPezzo)


            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_USERID", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_SPRAS", clsUser.SapWmsUser.LANGUAGE)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                outOkPrintExecuted = True 'ESECUZIONE OK
            Else
                outOkPrintExecuted = False 'ESECUZIONE NON OK
            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default '>>> FINE SEGNALE ATTESA
            If (outOkPrintExecuted = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(972, "", "Trasferimento non corretto.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "ErrorDescr.:" & objWSResponse.EErrorDescription
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
            Else
                'CASO ESECUZIONE OK
                Call_ZWMS_EXEC_PRINT_PALLET_KTAG = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWS_GET_UBI_SPECIAL(ByVal inNrMagazzino As String, ByVal inDivisione As String, ByVal inLingua As String, ByRef outGetOk As Boolean, ByRef outDataTable As DataTable, ByRef outDataTableWH As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow
        Dim Index As Long = 0
        Dim SingoloRec As New StrctSapLgtypInfo


        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWS_GET_UBI_SPECIAL = 1 'INIT AT ERROR

            outGetOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)

            If (Len(inNrMagazzino) <= 0) Then
                RetCode = 10
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & " [ NumMagazzino] " & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            'If (Len(inProfId) <= 0) Then
            '    RetCode = 11
            '    outSapFunctionError.ERROR_CODE = RetCode
            '    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & " GET_LGTYP_LIST. " & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
            '    If (inShowMessageBox = True) Then
            '        MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
            '    End If
            '    Exit Function
            'End If

#If APPLICAZIONE_WIN32 <> "SI" Then

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            
            
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_GET_UBI_SPECIAL")

            'rfcFunction.SetValue("I_WERKS", inDivisione)
            rfcFunction.SetValue("I_LGNUM", inNrMagazzino)
            rfcFunction.SetValue("I_ZFLAG_STAG_DOOR", "X")


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            rfcTable = rfcFunction.GetTable("E_ZWMS_UBI_SPECIAL_TAB")

            If rfcTable.RowCount > 0 Then
                outGetOk = True 'ESECUZIONE OK 
            End If


            For Each rfcRow In rfcTable

                WorkRow = outDataTable.NewRow()

                For i = 0 To rfcTable.RowCount

                    WorkRow.Item("Lgnum") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgnum")
                    WorkRow.Item("Lgtyp") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgtyp")
                    WorkRow.Item("Lgpla") = clsSapUtility.GetRFCStructParamToString(rfcRow, "Lgpla")
                    WorkRow.Item("ZWMSUBI_DESCR") = clsSapUtility.GetRFCStructParamToString(rfcRow, "ZWMSUBI_DESCR")

                Next

                outDataTable.Rows.Add(WorkRow)

            Next


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outGetOk = False) Then
                RetCode = 101
                outSapFunctionError.ERROR_CODE = RetCode
                'If (objWSResponse.ESuccess = "Y") And (objWSResponse.EFoundrows = 0) Then
                '>>> CONDIZIONE DI NESSUN DATO TROVATO
                ' outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(554, "", "Nessun dato trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                'Else
                '>>> CONDIZIONE DI ERRORE
                ' outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Estrazione dati errata ") & "(GET_LGTYP_LIST)." & clsAppTranslation.GetSingleParameterValue(284, "", "Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                'End If
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWS_GET_UBI_SPECIAL = RetCode
            Else
                Call_ZWS_GET_UBI_SPECIAL = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWMS_JOB_CHANGE_UDS_ADD(ByRef inWorkPickedGiacenze() As clsDataType.SapJobUdsChange, ByVal InOperation As String, ByVal InDivisione As String, ByVal InNumeroMagazzino As String, ByRef inUbicazioneDestinazione As clsDataType.SapWmUbicazione, ByVal inLingua As String, ByRef outClsUDS As clsUDS, ByRef outOT_Number() As clsDataType.SapWmOtInfo, ByRef outPickOk As Boolean, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        Dim LoopIndex As Integer = 0
        Dim wkWorkSapUDSInfo As clsDataType.SapJobUdsChange
        Dim NrUDSMove As Long

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_JOB_CHANGE_UDS_ADD = 1 'INIT AT ERROR

            outPickOk = False 'INIT

            If (clsUtility.IsStringValid(InDivisione, True) = False) Then
                RetCode = 180
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_CHANGE_UDS_ADD. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(6, "", "Divisione") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (inWorkPickedGiacenze.Length <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_CHANGE_UDS_ADD. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            'FACCIO IL CONTROLLO SOLO SE SONO IN TIPO MAGAZZINO CON  GESTION UM
            If (inWorkPickedGiacenze(0).GiacenzaOrigine.UbicazioneInfo.AbilitaUnitaMagazzino = True) Then
                If (Len(inWorkPickedGiacenze(0).GiacenzaOrigine.UbicazioneInfo.UnitaMagazzino) <= 0) Then
                    RetCode = 210
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_CHANGE_UDS_ADD. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                    If (inShowMessageBox = True) Then
                        MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                    End If
                    Exit Function
                End If
            End If
            If (inWorkPickedGiacenze(0).GiacenzaDestinazione.UbicazioneInfo.AbilitaUnitaMagazzino = True) Then
                If (Len(inWorkPickedGiacenze(0).GiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino) <= 0) Then
                    RetCode = 220
                    outSapFunctionError.ERROR_CODE = RetCode
                    outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1335, "", " JOB_CHANGE_UDS_ADD. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1082, "", "UnitaMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                    If (inShowMessageBox = True) Then
                        MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                    End If
                    Exit Function
                End If
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then
            'SAP Web Service

#Else


            'SAP RFC
            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure


            Dim Out_rfcTable_E_OT_INFO_TAB As IRfcTable
            Dim rfcTable_E_ZWMS_UDS_TAB As IRfcTable
            Dim rfcFunction_E_UDS_TRUCK_LOAD_INFO As IRfcStructure
            Dim rfcFunction_ZWMS_UDS As IRfcStructure
            Dim i As Integer

            Dim Table As New DataTable

            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_JOB_CHANGE_UDS_ADD")

            '**********************************************************************************************
            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            '**********************************************************************************************
            Dim In_rfcTable As IRfcTable = rfcFunction.GetTable("I_ZWMS_JOB_PICK_TAB")


            If (Not (inWorkPickedGiacenze Is Nothing)) Then
                NrUDSMove = -1 'INIT
                For Each wkWorkSapUDSInfo In inWorkPickedGiacenze
                    NrUDSMove = NrUDSMove + 1

                    In_rfcTable.Append()

                    In_rfcTable.SetValue("ZUDS_BARCODE", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(wkWorkSapUDSInfo.GiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino))
                    'In_rfcTable.SetValue("ZNR_WMS_JOBS", rfc_stImportParams(NrUDSMove).rfc_ZNR_WMS_JOBS)
                    In_rfcTable.SetValue("MATNR_ORI", wkWorkSapUDSInfo.GiacenzaOrigine.CodiceMateriale)
                    In_rfcTable.SetValue("WERKS_ORI", wkWorkSapUDSInfo.GiacenzaOrigine.UbicazioneInfo.Divisione)
                    In_rfcTable.SetValue("LGORT_ORI", wkWorkSapUDSInfo.GiacenzaOrigine.MagazzinoLogico)
                    In_rfcTable.SetValue("CHARG_ORI", wkWorkSapUDSInfo.GiacenzaOrigine.Partita)
                    In_rfcTable.SetValue("LGNUM_ORI", wkWorkSapUDSInfo.GiacenzaOrigine.UbicazioneInfo.NumeroMagazzino)
                    In_rfcTable.SetValue("LGTYP_ORI", wkWorkSapUDSInfo.GiacenzaOrigine.UbicazioneInfo.TipoMagazzino)
                    In_rfcTable.SetValue("LGPLA_ORI", wkWorkSapUDSInfo.GiacenzaOrigine.UbicazioneInfo.Ubicazione)
                    In_rfcTable.SetValue("LENUM_ORI", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(wkWorkSapUDSInfo.GiacenzaOrigine.UbicazioneInfo.UnitaMagazzino))

                    If (clsUtility.IsStringValid(clsWmsJob.UDSOnWork.UDSInfo.UbicazioneInfo.TipoUnitaMagazzino, True) = False) Then
                        In_rfcTable.SetValue("LETYP", "PP")
                    Else
                        In_rfcTable.SetValue("LETYP", clsWmsJob.UDSOnWork.UDSInfo.UbicazioneInfo.TipoUnitaMagazzino)
                    End If


                    In_rfcTable.SetValue("MATNR_DEST", wkWorkSapUDSInfo.GiacenzaDestinazione.CodiceMateriale)
                    In_rfcTable.SetValue("WERKS_DEST", wkWorkSapUDSInfo.GiacenzaDestinazione.UbicazioneInfo.Divisione)
                    In_rfcTable.SetValue("LGORT_DEST", wkWorkSapUDSInfo.GiacenzaDestinazione.MagazzinoLogico)
                    In_rfcTable.SetValue("CHARG_DEST", wkWorkSapUDSInfo.GiacenzaDestinazione.Partita)
                    In_rfcTable.SetValue("LGNUM_DEST", inUbicazioneDestinazione.NumeroMagazzino)
                    In_rfcTable.SetValue("LGTYP_DEST", inUbicazioneDestinazione.TipoMagazzino)
                    In_rfcTable.SetValue("LGPLA_DEST", inUbicazioneDestinazione.Ubicazione)
                    'In_rfcTable.SetValue("LENUM_DEST", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(inUbicazioneDestinazione.UnitaMagazzino))
                    In_rfcTable.SetValue("LENUM_DEST", clsSapUtility.FormattaStringaUnitaMagazzinoPerSap(wkWorkSapUDSInfo.GiacenzaDestinazione.UbicazioneInfo.UnitaMagazzino))

                    In_rfcTable.SetValue("QTA_PICKED", wkWorkSapUDSInfo.GiacenzaDestinazione.QuantitaConfermataOperatore)
                    In_rfcTable.SetValue("UDM_QTA_PICKED", wkWorkSapUDSInfo.GiacenzaDestinazione.UnitaDiMisuraAcquisizione)

                    '* Modifica Gestione Qtà Pezzi Sfusi
                    In_rfcTable.SetValue("QTA_PICKED_SFUSI", wkWorkSapUDSInfo.GiacenzaDestinazione.QuantitaConfermataSfusiOperatore)


                    In_rfcTable.SetValue("ZUDS_CHANGE_OPER", UCase(InOperation))

                Next
            End If


            '>>> IMPOSTO I PARAMETRI SINGOLI DELLA FUNZIONE 
            rfcFunction.SetValue("I_LGNUM", InNumeroMagazzino)
            rfcFunction.SetValue("I_WERKS", InDivisione)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_ZWMS_COMPUTER", clsUtility.GetWorkStationName())
            Dim WorkVersion As String = ""
#If APPLICAZIONE_WIN32 = "SI" Then

            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion("", WorkVersion))
#Else
            rfcFunction.SetValue("I_ZWMS_APP_VERSION", clsUtility.GetAssemblyApplicationVersion())
#End If

            rfcFunction.SetValue("I_SPRAS", inLingua)

            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            '*************************************************************************************************
            ' >>> VERIFICO ESECUZIONE DEL PICKING NELL'UDS
            '*************************************************************************************************
            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                Dim Out_rfcStruct_UDS_WEIGHT_INFO As IRfcStructure = rfcFunction.GetStructure("E_UDS_WEIGHT_INFO")
                Dim Out_rfcStruct_ZWMS_UDS_MAIN_INFO As IRfcStructure = rfcFunction.GetStructure("E_ZWMS_UDS_MAIN_INFO")
                Dim Out_rfcTable_ZWMS_UDS_MATNR_TAB As IRfcTable = rfcFunction.GetTable("E_ZWMS_UDS_MATNR_TAB")

                Out_rfcTable_E_OT_INFO_TAB = rfcFunction.GetTable("E_OT_INFO_TAB")


                '>>> RITORNO DATI DELL'OT
                If (Not Out_rfcTable_E_OT_INFO_TAB Is Nothing) Then
                    If (Out_rfcTable_E_OT_INFO_TAB.RowCount > 0) Then
                        LoopIndex = 0
                        ReDim outOT_Number(Out_rfcTable_E_OT_INFO_TAB.RowCount - 1)
                        For Each rfcRow In Out_rfcTable_E_OT_INFO_TAB
                            If (Out_rfcTable_E_OT_INFO_TAB.GetObject("Tanum") > 0) Then
                                outOT_Number(LoopIndex).NumeroOrdineDiTrasferimento = clsSapUtility.GetRFCStructParamToString(rfcRow, "Tanum")
                                outPickOk = True 'UNICO CASO DI ESECUZIONE OK
                            End If
                            LoopIndex += 1
                        Next
                    End If
                End If


                '*********************************************************************************************************************************************
                'AGGIORNO DATI UDS 
                '*********************************************************************************************************************************************
                If (outClsUDS Is Nothing) Then
                    outClsUDS = New clsUDS
                End If
                'If (inSapForkLiftStruct.NumUdsOnForklift > 0) Then
                'HO UN UDS A BORDO DEL FORKLIFT ( RECUPERO INFO DEL PESO )
                outClsUDS.UDSWeightInfo.PesoTotaleUDS_Kg = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_UDS_WEIGHT_INFO, "ZWMS_PESOMAT_EU")
                outClsUDS.UDSWeightInfo.UdmPesoKg = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_UDS_WEIGHT_INFO, "GEWEI_EU")
                outClsUDS.UDSWeightInfo.PesoTotaleUDS_Lb = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_UDS_WEIGHT_INFO, "ZWMS_PESOMAT_USA")
                outClsUDS.UDSWeightInfo.UdmPesoLb = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_UDS_WEIGHT_INFO, "GEWEI_USA")

                '>>> RITORNO LE INFORMAZIONI PRINCIPALI DELLA UDS
                If (Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS") Is Nothing)) Then
                    'outClsUDS.UDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS")
                    outClsUDS.UDSInfo.NrWmsJobs = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBS", 0)
                End If
                If (Not (clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBSGRP") Is Nothing)) Then
                    outClsUDS.UDSInfo.CodiceGruppoMissioni = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZNR_WMS_JOBSGRP")
                End If

                outClsUDS.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LENUM"))

                outClsUDS.UDSInfo.DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "MAKTG")
                outClsUDS.UDSInfo.QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZQTA_PREL_BASE")
                outClsUDS.UDSInfo.UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "UDM_QTAPR_MEINS")
                outClsUDS.UDSInfo.QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "ZQTA_PREL_CONS")
                outClsUDS.UDSInfo.UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "UDM_QTAPR_CONS")
                outClsUDS.UDSInfo.QtaPrelevataInUdMPezzo = 0
                outClsUDS.UDSInfo.UdmQtaPrelevataInUdMPezzo = ""

                outClsUDS.UDSInfo.PickSUCompleto = False

                outClsUDS.UDSInfo.UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "WERKS")
                outClsUDS.UDSInfo.UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGNUM")
                outClsUDS.UDSInfo.UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGTYP")
                outClsUDS.UDSInfo.UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGPLA")
                outClsUDS.UDSInfo.UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))
                outClsUDS.UDSInfo.UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LETYP")
                outClsUDS.UDSInfo.UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                outClsUDS.UDSInfo.MagazzinoLogico = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "LGORT")

                '>>> SE NECESSARIO VALORIZZO IL CODICE MATERIALE
                If (outClsUDS.UDSInfo.CodiceMateriale = "") And (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "MATNR"), True) = True) Then
                    outClsUDS.UDSInfo.CodiceMateriale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "MATNR")
                End If

                '>>> PER LA PARTITA C'è UNA LOGICA PARTICOLARE (SE NE HO UNA VALIDA PRENDO QUELLA
                If (clsUtility.IsStringValid(clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "CHARG"), True) = True) Then
                    outClsUDS.UDSInfo.Partita = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "CHARG")
                End If

                outClsUDS.UDSInfo.CdStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "SOBKZ")
                outClsUDS.UDSInfo.NumeroStockSpeciale = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "SONUM")
                outClsUDS.UDSInfo.TipoStock = clsSapUtility.GetRFCStructParamToString(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "BESTQ")
                outClsUDS.UDSInfo.NumeroFabbisognoDiTrasporto = clsSapUtility.GetRFCStructParamToLong(Out_rfcStruct_ZWMS_UDS_MAIN_INFO, "TBNUM")

                outClsUDS.UDSInfo.TruckDayNr = ""
                outClsUDS.UDSInfo.TrasfNumPallet = 0

                'SE E' PRESENTE UN UDS A BORDO DEL FORKLIFT RITORNO LE INFO DEI COMPONENTI DEL FORKLIFT
                If (Out_rfcTable_ZWMS_UDS_MATNR_TAB.RowCount > 0) Then
                    ReDim outClsUDS.UDSInfo.Componenti(Out_rfcTable_ZWMS_UDS_MATNR_TAB.RowCount - 1)

                    'ESEGUO LOOP SU TUTTI I COMPONENTI DELLA UDS
                    Dim LoopIndexUdsMatn As Long = 0
                    For Each rfcRow In Out_rfcTable_ZWMS_UDS_MATNR_TAB

                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.UnitaMagazzino = clsSapUtility.FormattaStringaUnitaMagazzino(clsSapUtility.GetRFCStructParamToString(rfcRow, "LENUM"))

                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).DescrizioneMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MAKTG")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).QtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_BASE")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UdmQtaPrelevataInUdMBase = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_MEINS")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).QtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_PREL_CONS")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UdmQtaPrelevataInUdMConsegna = clsSapUtility.GetRFCStructParamToString(rfcRow, "UDM_QTAPR_CONS")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).QtaPrelevataInUdMPezzo = 0
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UdmQtaPrelevataInUdMPezzo = ""

                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).PickSUCompleto = False

                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.Divisione = clsSapUtility.GetRFCStructParamToString(rfcRow, "WERKS")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.NumeroMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGNUM")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.TipoMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGTYP")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.Ubicazione = clsSapUtility.GetRFCStructParamToString(rfcRow, "LGPLA")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.TipoUnitaMagazzino = clsSapUtility.GetRFCStructParamToString(rfcRow, "LETYP")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).UbicazioneInfo.AbilitaUnitaMagazzino = True 'devo considerare le UM
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).MagazzinoLogico = ""

                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).CodiceMateriale = clsSapUtility.GetRFCStructParamToString(rfcRow, "MATNR")
                        outClsUDS.UDSInfo.Componenti(LoopIndexUdsMatn).Partita = clsSapUtility.GetRFCStructParamToString(rfcRow, "CHARG")

                        LoopIndexUdsMatn = LoopIndexUdsMatn + 1
                    Next
                End If

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outPickOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_JOB_CHANGE_UDS_ADD = RetCode 'errore
            Else
                Call_ZWMS_JOB_CHANGE_UDS_ADD = 0 'TUTTO OK
            End If
        End Try

    End Function



    Public Shared Function Call_ZWM_GET_LOCATION_QTY_MATNR(ByRef inInfoStock As clsDataType.SapWmGiacenza, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef outDataTable As DataTable, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean, ByRef outCatchErrorHappened As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWM_GET_LOCATION_QTY_MATNR = 1 'INIT AT ERROR

            outCheckOk = False
            RetCode += clsUtility.InitDataTable(outDataTable)


            If (Len(inInfoStock.CodiceMateriale) <= 0) Then
                RetCode = 200
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1078, "", "CodiceMateriale") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoStock.UbicazioneInfo.NumeroMagazzino) <= 0) Then
                RetCode = 201
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1079, "", "NumeroMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

            If (Len(inInfoStock.UbicazioneInfo.TipoMagazzino) <= 0) Then
                RetCode = 202
                outSapFunctionError.ERROR_CODE = RetCode
                outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(974, "", "Errore in esecuzione ") & clsAppTranslation.GetSingleParameterValue(1123, "", " CHECK STOCK. ") & clsAppTranslation.GetSingleParameterValue(966, "", " Parametro ") & "[" & clsAppTranslation.GetSingleParameterValue(1080, "", "TipoMagazzino") & "]" & clsAppTranslation.GetSingleParameterValue(967, "", "non valido.")
                If (inShowMessageBox = True) Then
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Exit Function
            End If

#If APPLICAZIONE_WIN32 <> "SI" Then

#Else

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure
            


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWM_GET_LOCATION_QTY_MATNR")

            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_WERKS", inInfoStock.UbicazioneInfo.Divisione)
            rfcFunction.SetValue("I_LGNUM", inInfoStock.UbicazioneInfo.NumeroMagazzino)
            rfcFunction.SetValue("I_LGTYP", inInfoStock.UbicazioneInfo.TipoMagazzino)
            rfcFunction.SetValue("I_LGPLA", inInfoStock.UbicazioneInfo.Ubicazione)
            rfcFunction.SetValue("I_MATNR", inInfoStock.CodiceMateriale)
            rfcFunction.SetValue("I_CHARG", inInfoStock.Partita)
            rfcFunction.SetValue("I_LGORT", inInfoStock.MagazzinoLogico)

            rfcFunction.SetValue("I_LANGUAGE", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then

                rfcRow = rfcFunction.GetStructure("E_ZQTA_LOCSTOCK_INFO")

                'If rfcTable.RowCount > 0 Then
                outCheckOk = True 'ESECUZIONE OK 
                'End If


                'For Each rfcRow In rfcTable

                WorkRow = outDataTable.NewRow()

                '    For i = 0 To rfcTable.RowCount

                WorkRow.Item("ZQTA_LOCSTOCK_BASE") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_BASE")
                WorkRow.Item("ZQTA_LOCSTOCK_CONS") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_CONS")
                WorkRow.Item("ZQTA_LOCSTOCK_PZ") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_PZ")
                WorkRow.Item("ZQTA_LOCSTOCK_SC") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_SC")
                WorkRow.Item("ZQTA_LOCSTOCK_PAL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_PAL")
                WorkRow.Item("ZQTA_LOCSTOCK_FULL") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_FULL")
                WorkRow.Item("ZQTA_LOCSTOCK_PARTIA") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_PARTIA")
                WorkRow.Item("ZQTA_LOCSTOCK_SF") = clsSapUtility.GetRFCStructParamToFloat(rfcRow, "ZQTA_LOCSTOCK_SF")

                '    Next

                outDataTable.Rows.Add(WorkRow)

                'Next

            End If


#End If


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            outCatchErrorHappened = True '>>> SETTO FLAG DI CATH ERROR
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk = False) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWM_GET_LOCATION_QTY_MATNR = RetCode 'caso di errore
            Else
                Call_ZWM_GET_LOCATION_QTY_MATNR = 0 'TUTTO OK
            End If
        End Try

    End Function


    Public Shared Function Call_ZWMS_JOB_PICK_UDC_ISSUE(ByVal InIZnrWmsJobs As String, ByVal InIFlagPartialPal As Boolean, ByVal InIFlagWrongPallet As Boolean, ByVal InILgtypEntered As String, ByVal InILgplaEntered As String, ByVal InILenumEntered As String, ByVal InISkuEntered As String, ByVal InILenumSelected As String, ByVal inLingua As String, ByRef outCheckOk As Boolean, ByRef OutEOkLenum As String, ByRef outESelectPartial As String, ByRef outEErrorCode As String, ByRef outSapFunctionError As clsBusinessLogic.SapFunctionError, ByVal inShowMessageBox As Boolean) As Long

        '**************************************
        'HERE PUT DECLARATION OF LOCAL VARIABLE
        Dim RetCode As Long = 0
        Dim WorkRow As DataRow

        '**************************************
        Try 'HERE PUT NORMAL EXECUTION CODE
            '**************************************

            Call_ZWMS_JOB_PICK_UDC_ISSUE = 1 'INIT AT ERROR

            'SAP RFC

            Dim rfcRepository As RfcRepository
            Dim rfcFunction As IRfcFunction
            Dim rfcTable As IRfcTable
            Dim rfcRow As IRfcStructure

            Dim i As Integer


            clsSAPNetConn.SAPRfcDestination = clsSAPNetConn.GetValidSAPRfcDestination()

            rfcRepository = clsSAPNetConn.SAPRfcDestination.Repository

            rfcFunction = rfcRepository.CreateFunction("ZWMS_JOB_PICK_UDC_ISSUE")


            'IMPOSTO I PARAMETRI DI IMPORT DELLA FUNZIONE
            rfcFunction.SetValue("I_LGNUM", clsUser.SapWmsUser.LGNUM)
            rfcFunction.SetValue("I_WERKS", clsUser.SapWmsUser.WERKS)
            rfcFunction.SetValue("I_ZNR_WMS_JOBS", InIZnrWmsJobs)

            If (InIFlagPartialPal = True) Then
                rfcFunction.SetValue("I_FLAG_PARTIALPAL", "X")
            Else
                rfcFunction.SetValue("I_FLAG_PARTIALPAL", "")
            End If

            If (InIFlagWrongPallet = True) Then
                rfcFunction.SetValue("I_FLAG_WRONGPALLET", "X")
            Else
                rfcFunction.SetValue("I_FLAG_WRONGPALLET", "")
            End If

            rfcFunction.SetValue("I_LGTYP_ENTERED", InILgtypEntered)
            rfcFunction.SetValue("I_LGPLA_ENTERED", InILgplaEntered)
            rfcFunction.SetValue("I_LENUM_ENTERED", InILenumEntered)
            rfcFunction.SetValue("I_SKU_ENTERED", InISkuEntered)
            rfcFunction.SetValue("I_LENUM_SELECTED", InILenumSelected)
            rfcFunction.SetValue("I_USERID_RF", clsUser.SapWmsUser.USERID)
            rfcFunction.SetValue("I_USERID", clsUser.SapWmsUser.USERID)

            rfcFunction.SetValue("I_SPRAS", inLingua)


            Cursor.Current = Cursors.WaitCursor '>>> IMPOSTO SEGNALE ATTESA
            rfcFunction.Invoke(clsSAPNetConn.SAPRfcDestination)


            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_Success") = "Y") Then
                'GESTIONE FLAG PER RICONOSCERE SE UM E' IN LOCAZIONE STAGING DOOR
                OutEOkLenum = Right(clsSapUtility.GetRFCParameterToString(rfcFunction, "E_OK_LENUM"), 10)
            End If

            If (clsSapUtility.GetRFCParameterToString(rfcFunction, "E_CHECK_OK") = "Y") Then
                outCheckOk = True
            Else
                outCheckOk = False
            End If

            outESelectPartial = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_SELECT_PARTIAL")

            outSapFunctionError.ERROR_DESCRIPTION = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_DESCRIPTION")
            outSapFunctionError.ERROR_CODE = clsSapUtility.GetRFCParameterToString(rfcFunction, "E_ERROR_CODE")
            outEErrorCode = outSapFunctionError.ERROR_CODE


            '**************************************
        Catch ex As Exception 'HERE PUT ERROR MANAGEMENT
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            'LOG ERROR CONDITION
            clsProgramError.ManageLogErrorCondition(CodeClassObjectName, "", clsProgramError.ErrorInfoTypeEnum.ErrorInfoTypeError, "Catch Error!", ex)
            '**************************************
        Finally 'HERE PUT NORMAL AND NOT NORMAL END EXECUTION
            Cursor.Current = Cursors.Default  '>>> FINE SEGNALE ATTESA
            If (outCheckOk <> True) Then
                RetCode = 101
                If (inShowMessageBox = True) Then
                    outSapFunctionError.ERROR_CODE = RetCode
                    'outSapFunctionError.ERROR_DESCRIPTION = clsAppTranslation.GetSingleParameterValue(1062, "", "Materiale/Giacenza non trovato.Verificare e riprovare.") & vbCrLf & "ErrorCode:" & objWSResponse.EErrorCode & vbCrLf & "Err.Descr.:" & objWSResponse.EErrorDescription
                    MessageBox.Show(outSapFunctionError.ERROR_DESCRIPTION, AppMsgBoxTitle, MessageBoxButtons.OK, MessageBoxIcon.Exclamation, MessageBoxDefaultButton.Button1)
                End If
                Call_ZWMS_JOB_PICK_UDC_ISSUE = RetCode 'errore
            Else
                Call_ZWMS_JOB_PICK_UDC_ISSUE = 0 'TUTTO OK
            End If
        End Try

    End Function




End Class